{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-VRZnOBNA6o7"
      },
      "source": [
        "# Regression Discontinuity\n",
        "This notebook illustrates the use of Regression Discontinuity in an empirical study. We analyze the effect of the antipoverty program *Progresa/Opportunidades* on the consumption behavior of families in Mexico in the early 2000s.\n",
        "\n",
        "The program was intended for families in extreme poverty and included financial incentives for participation in measures that improved the family's health, nutrition and children's education. The effect of this program is a widely studied problem in social and economic sciences and, according to the WHO, was a very sucessful measure in terms of reducing extreme poverty om Mexico.\n",
        "\n",
        "Eligibility for the program was determined based on a pre-intervention household poverty-index. Individuals above a certain threshold received the treatment (participation in the program) while individuals below the threshold were excluded and recorded as a control group. All observations above the threshold participated in the program, which makes the analysis fall into the standard (sharp) regression discontinuity design.\n",
        "\n",
        "First, we need to install and load some packages. This can take up to 15 minutes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 950
        },
        "id": "1Yr5aL2yAgYN",
        "outputId": "09a21d14-e092-48cf-c902-513eff71b624"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing packages into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "also installing the dependencies ‘numDeriv’, ‘SparseM’, ‘MatrixModels’, ‘minqa’, ‘nloptr’, ‘iterators’, ‘carData’, ‘abind’, ‘pbkrtest’, ‘quantreg’, ‘lme4’, ‘foreach’, ‘shape’, ‘Rcpp’, ‘RcppEigen’, ‘zoo’, ‘car’, ‘glmnet’, ‘checkmate’, ‘Formula’, ‘sandwich’, ‘lmtest’, ‘AER’\n",
            "\n",
            "\n",
            "Thank you for using fastDummies!\n",
            "\n",
            "To acknowledge our work, please cite the package:\n",
            "\n",
            "Kaplan, J. & Schlegel, B. (2023). fastDummies: Fast Creation of Dummy (Binary) Columns and Rows from Categorical Variables. Version 1.7.1. URL: https://github.com/jacobkap/fastDummies, https://jacobkap.github.io/fastDummies/.\n",
            "\n",
            "randomForest 4.7-1.1\n",
            "\n",
            "Type rfNews() to see new features/changes/bug fixes.\n",
            "\n",
            "Loaded gbm 2.1.9\n",
            "\n",
            "This version of gbm is no longer under development. Consider transitioning to gbm3, https://github.com/gbm-developers/gbm3\n",
            "\n",
            "Loading required package: sandwich\n",
            "\n",
            "Loading required package: lmtest\n",
            "\n",
            "Loading required package: zoo\n",
            "\n",
            "\n",
            "Attaching package: ‘zoo’\n",
            "\n",
            "\n",
            "The following objects are masked from ‘package:base’:\n",
            "\n",
            "    as.Date, as.Date.numeric\n",
            "\n",
            "\n",
            "Loading required package: AER\n",
            "\n",
            "Loading required package: car\n",
            "\n",
            "Loading required package: carData\n",
            "\n",
            "Loading required package: survival\n",
            "\n",
            "Loading required package: Formula\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<ol>\n",
              "\t<li><style>\n",
              ".list-inline {list-style: none; margin:0; padding: 0}\n",
              ".list-inline>li {display: inline-block}\n",
              ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
              "</style>\n",
              "<ol class=list-inline><li>'rdrobust'</li><li>'stats'</li><li>'graphics'</li><li>'grDevices'</li><li>'utils'</li><li>'datasets'</li><li>'methods'</li><li>'base'</li></ol>\n",
              "</li>\n",
              "\t<li><style>\n",
              ".list-inline {list-style: none; margin:0; padding: 0}\n",
              ".list-inline>li {display: inline-block}\n",
              ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
              "</style>\n",
              "<ol class=list-inline><li>'fastDummies'</li><li>'rdrobust'</li><li>'stats'</li><li>'graphics'</li><li>'grDevices'</li><li>'utils'</li><li>'datasets'</li><li>'methods'</li><li>'base'</li></ol>\n",
              "</li>\n",
              "\t<li><style>\n",
              ".list-inline {list-style: none; margin:0; padding: 0}\n",
              ".list-inline>li {display: inline-block}\n",
              ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
              "</style>\n",
              "<ol class=list-inline><li>'randomForest'</li><li>'fastDummies'</li><li>'rdrobust'</li><li>'stats'</li><li>'graphics'</li><li>'grDevices'</li><li>'utils'</li><li>'datasets'</li><li>'methods'</li><li>'base'</li></ol>\n",
              "</li>\n",
              "\t<li><style>\n",
              ".list-inline {list-style: none; margin:0; padding: 0}\n",
              ".list-inline>li {display: inline-block}\n",
              ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
              "</style>\n",
              "<ol class=list-inline><li>'hdm'</li><li>'randomForest'</li><li>'fastDummies'</li><li>'rdrobust'</li><li>'stats'</li><li>'graphics'</li><li>'grDevices'</li><li>'utils'</li><li>'datasets'</li><li>'methods'</li><li>'base'</li></ol>\n",
              "</li>\n",
              "\t<li><style>\n",
              ".list-inline {list-style: none; margin:0; padding: 0}\n",
              ".list-inline>li {display: inline-block}\n",
              ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
              "</style>\n",
              "<ol class=list-inline><li>'gbm'</li><li>'hdm'</li><li>'randomForest'</li><li>'fastDummies'</li><li>'rdrobust'</li><li>'stats'</li><li>'graphics'</li><li>'grDevices'</li><li>'utils'</li><li>'datasets'</li><li>'methods'</li><li>'base'</li></ol>\n",
              "</li>\n",
              "\t<li><style>\n",
              ".list-inline {list-style: none; margin:0; padding: 0}\n",
              ".list-inline>li {display: inline-block}\n",
              ".list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex}\n",
              "</style>\n",
              "<ol class=list-inline><li>'rdd'</li><li>'Formula'</li><li>'AER'</li><li>'survival'</li><li>'car'</li><li>'carData'</li><li>'lmtest'</li><li>'zoo'</li><li>'sandwich'</li><li>'gbm'</li><li>'hdm'</li><li>'randomForest'</li><li>'fastDummies'</li><li>'rdrobust'</li><li>'stats'</li><li>'graphics'</li><li>'grDevices'</li><li>'utils'</li><li>'datasets'</li><li>'methods'</li><li>'base'</li></ol>\n",
              "</li>\n",
              "</ol>\n"
            ],
            "text/markdown": "1. 1. 'rdrobust'\n2. 'stats'\n3. 'graphics'\n4. 'grDevices'\n5. 'utils'\n6. 'datasets'\n7. 'methods'\n8. 'base'\n\n\n\n2. 1. 'fastDummies'\n2. 'rdrobust'\n3. 'stats'\n4. 'graphics'\n5. 'grDevices'\n6. 'utils'\n7. 'datasets'\n8. 'methods'\n9. 'base'\n\n\n\n3. 1. 'randomForest'\n2. 'fastDummies'\n3. 'rdrobust'\n4. 'stats'\n5. 'graphics'\n6. 'grDevices'\n7. 'utils'\n8. 'datasets'\n9. 'methods'\n10. 'base'\n\n\n\n4. 1. 'hdm'\n2. 'randomForest'\n3. 'fastDummies'\n4. 'rdrobust'\n5. 'stats'\n6. 'graphics'\n7. 'grDevices'\n8. 'utils'\n9. 'datasets'\n10. 'methods'\n11. 'base'\n\n\n\n5. 1. 'gbm'\n2. 'hdm'\n3. 'randomForest'\n4. 'fastDummies'\n5. 'rdrobust'\n6. 'stats'\n7. 'graphics'\n8. 'grDevices'\n9. 'utils'\n10. 'datasets'\n11. 'methods'\n12. 'base'\n\n\n\n6. 1. 'rdd'\n2. 'Formula'\n3. 'AER'\n4. 'survival'\n5. 'car'\n6. 'carData'\n7. 'lmtest'\n8. 'zoo'\n9. 'sandwich'\n10. 'gbm'\n11. 'hdm'\n12. 'randomForest'\n13. 'fastDummies'\n14. 'rdrobust'\n15. 'stats'\n16. 'graphics'\n17. 'grDevices'\n18. 'utils'\n19. 'datasets'\n20. 'methods'\n21. 'base'\n\n\n\n\n\n",
            "text/latex": "\\begin{enumerate}\n\\item \\begin{enumerate*}\n\\item 'rdrobust'\n\\item 'stats'\n\\item 'graphics'\n\\item 'grDevices'\n\\item 'utils'\n\\item 'datasets'\n\\item 'methods'\n\\item 'base'\n\\end{enumerate*}\n\n\\item \\begin{enumerate*}\n\\item 'fastDummies'\n\\item 'rdrobust'\n\\item 'stats'\n\\item 'graphics'\n\\item 'grDevices'\n\\item 'utils'\n\\item 'datasets'\n\\item 'methods'\n\\item 'base'\n\\end{enumerate*}\n\n\\item \\begin{enumerate*}\n\\item 'randomForest'\n\\item 'fastDummies'\n\\item 'rdrobust'\n\\item 'stats'\n\\item 'graphics'\n\\item 'grDevices'\n\\item 'utils'\n\\item 'datasets'\n\\item 'methods'\n\\item 'base'\n\\end{enumerate*}\n\n\\item \\begin{enumerate*}\n\\item 'hdm'\n\\item 'randomForest'\n\\item 'fastDummies'\n\\item 'rdrobust'\n\\item 'stats'\n\\item 'graphics'\n\\item 'grDevices'\n\\item 'utils'\n\\item 'datasets'\n\\item 'methods'\n\\item 'base'\n\\end{enumerate*}\n\n\\item \\begin{enumerate*}\n\\item 'gbm'\n\\item 'hdm'\n\\item 'randomForest'\n\\item 'fastDummies'\n\\item 'rdrobust'\n\\item 'stats'\n\\item 'graphics'\n\\item 'grDevices'\n\\item 'utils'\n\\item 'datasets'\n\\item 'methods'\n\\item 'base'\n\\end{enumerate*}\n\n\\item \\begin{enumerate*}\n\\item 'rdd'\n\\item 'Formula'\n\\item 'AER'\n\\item 'survival'\n\\item 'car'\n\\item 'carData'\n\\item 'lmtest'\n\\item 'zoo'\n\\item 'sandwich'\n\\item 'gbm'\n\\item 'hdm'\n\\item 'randomForest'\n\\item 'fastDummies'\n\\item 'rdrobust'\n\\item 'stats'\n\\item 'graphics'\n\\item 'grDevices'\n\\item 'utils'\n\\item 'datasets'\n\\item 'methods'\n\\item 'base'\n\\end{enumerate*}\n\n\\end{enumerate}\n",
            "text/plain": [
              "[[1]]\n",
              "[1] \"rdrobust\"  \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\" \n",
              "[7] \"methods\"   \"base\"     \n",
              "\n",
              "[[2]]\n",
              "[1] \"fastDummies\" \"rdrobust\"    \"stats\"       \"graphics\"    \"grDevices\"  \n",
              "[6] \"utils\"       \"datasets\"    \"methods\"     \"base\"       \n",
              "\n",
              "[[3]]\n",
              " [1] \"randomForest\" \"fastDummies\"  \"rdrobust\"     \"stats\"        \"graphics\"    \n",
              " [6] \"grDevices\"    \"utils\"        \"datasets\"     \"methods\"      \"base\"        \n",
              "\n",
              "[[4]]\n",
              " [1] \"hdm\"          \"randomForest\" \"fastDummies\"  \"rdrobust\"     \"stats\"       \n",
              " [6] \"graphics\"     \"grDevices\"    \"utils\"        \"datasets\"     \"methods\"     \n",
              "[11] \"base\"        \n",
              "\n",
              "[[5]]\n",
              " [1] \"gbm\"          \"hdm\"          \"randomForest\" \"fastDummies\"  \"rdrobust\"    \n",
              " [6] \"stats\"        \"graphics\"     \"grDevices\"    \"utils\"        \"datasets\"    \n",
              "[11] \"methods\"      \"base\"        \n",
              "\n",
              "[[6]]\n",
              " [1] \"rdd\"          \"Formula\"      \"AER\"          \"survival\"     \"car\"         \n",
              " [6] \"carData\"      \"lmtest\"       \"zoo\"          \"sandwich\"     \"gbm\"         \n",
              "[11] \"hdm\"          \"randomForest\" \"fastDummies\"  \"rdrobust\"     \"stats\"       \n",
              "[16] \"graphics\"     \"grDevices\"    \"utils\"        \"datasets\"     \"methods\"     \n",
              "[21] \"base\"        \n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "dependencies <- c(\"rdrobust\", \"fastDummies\", \"randomForest\", \"hdm\", \"gbm\", \"rdd\")\n",
        "install.packages(dependencies)\n",
        "lapply(dependencies, library, character.only = TRUE)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GH0wFmHSxnen"
      },
      "source": [
        "We use a dataset assembled by [Calonico et al. (2014)](https://rdpackages.github.io/references/Calonico-Cattaneo-Titiunik_2014_ECMA--Supplemental.pdf) and follow the analysis in [Noack et al. (2023)](https://arxiv.org/pdf/2107.07942.pdf).\n",
        "\n",
        "First, we open the data and remove any observations that have NaN values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "Rzbv0XXCxxJt",
        "outputId": "9635e9ba-e39d-43f7-f303-5f3abc8238a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] \"Shape of Data:\"\n",
            "[1] 1944   27\n",
            "[1] \"Variable Names:\"\n",
            " [1] \"hhpiso\"           \"hhrooms\"          \"hhwater\"          \"hhwaterin\"       \n",
            " [5] \"hhbano\"           \"hhownhouse\"       \"hhsize\"           \"hhelect\"         \n",
            " [9] \"clus\"             \"headmale\"         \"headage\"          \"heademp\"         \n",
            "[13] \"wifeage\"          \"wifeeduc\"         \"headeduc\"         \"child_0to5\"      \n",
            "[17] \"boy_0to5\"         \"index\"            \"conspcfood_t0\"    \"conspcfood_t1\"   \n",
            "[21] \"conspcfood_t2\"    \"conspcnonfood_t0\" \"conspcnonfood_t1\" \"conspcnonfood_t2\"\n",
            "[25] \"conspc_t0\"        \"conspc_t1\"        \"conspc_t2\"       \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table class=\"dataframe\">\n",
              "<caption>A data.frame: 6 × 27</caption>\n",
              "<thead>\n",
              "\t<tr><th></th><th scope=col>hhpiso</th><th scope=col>hhrooms</th><th scope=col>hhwater</th><th scope=col>hhwaterin</th><th scope=col>hhbano</th><th scope=col>hhownhouse</th><th scope=col>hhsize</th><th scope=col>hhelect</th><th scope=col>clus</th><th scope=col>headmale</th><th scope=col>⋯</th><th scope=col>index</th><th scope=col>conspcfood_t0</th><th scope=col>conspcfood_t1</th><th scope=col>conspcfood_t2</th><th scope=col>conspcnonfood_t0</th><th scope=col>conspcnonfood_t1</th><th scope=col>conspcnonfood_t2</th><th scope=col>conspc_t0</th><th scope=col>conspc_t1</th><th scope=col>conspc_t2</th></tr>\n",
              "\t<tr><th></th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>⋯</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
              "</thead>\n",
              "<tbody>\n",
              "\t<tr><th scope=row>1</th><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>5</td><td>1</td><td>1</td><td>1</td><td>⋯</td><td> 1.5410</td><td>260.224</td><td>374.0720</td><td>379.2080</td><td>106.18667</td><td>183.1493</td><td> 57.12800</td><td>366.4107</td><td>557.2213</td><td>436.3360</td></tr>\n",
              "\t<tr><th scope=row>2</th><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>5</td><td>1</td><td>1</td><td>1</td><td>⋯</td><td>-0.6615</td><td>265.360</td><td>574.3760</td><td>195.1680</td><td> 87.26666</td><td>160.0133</td><td>112.13600</td><td>352.6266</td><td>734.3893</td><td>307.3040</td></tr>\n",
              "\t<tr><th scope=row>3</th><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>4</td><td>1</td><td>1</td><td>1</td><td>⋯</td><td>-0.3240</td><td>604.550</td><td>433.3500</td><td>367.0100</td><td>348.81332</td><td>263.0833</td><td>123.32333</td><td>953.3633</td><td>696.4333</td><td>490.3333</td></tr>\n",
              "\t<tr><th scope=row>4</th><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>6</td><td>1</td><td>1</td><td>1</td><td>⋯</td><td> 1.1500</td><td>233.260</td><td>281.7667</td><td>260.4686</td><td>100.87778</td><td>140.2333</td><td> 36.32571</td><td>334.1378</td><td>422.0000</td><td>296.7943</td></tr>\n",
              "\t<tr><th scope=row>6</th><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>4</td><td>1</td><td>1</td><td>1</td><td>⋯</td><td>-0.8260</td><td>280.340</td><td>185.1100</td><td>364.8700</td><td>158.41666</td><td>201.1833</td><td> 68.00000</td><td>438.7567</td><td>386.2933</td><td>432.8700</td></tr>\n",
              "\t<tr><th scope=row>7</th><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>6</td><td>0</td><td>1</td><td>1</td><td>⋯</td><td> 0.8220</td><td>321.000</td><td>126.2600</td><td>278.9133</td><td> 65.58889</td><td>314.7600</td><td> 65.21333</td><td>386.5889</td><td>441.0200</td><td>344.1266</td></tr>\n",
              "</tbody>\n",
              "</table>\n"
            ],
            "text/markdown": "\nA data.frame: 6 × 27\n\n| <!--/--> | hhpiso &lt;int&gt; | hhrooms &lt;int&gt; | hhwater &lt;int&gt; | hhwaterin &lt;int&gt; | hhbano &lt;int&gt; | hhownhouse &lt;int&gt; | hhsize &lt;int&gt; | hhelect &lt;int&gt; | clus &lt;int&gt; | headmale &lt;int&gt; | ⋯ ⋯ | index &lt;dbl&gt; | conspcfood_t0 &lt;dbl&gt; | conspcfood_t1 &lt;dbl&gt; | conspcfood_t2 &lt;dbl&gt; | conspcnonfood_t0 &lt;dbl&gt; | conspcnonfood_t1 &lt;dbl&gt; | conspcnonfood_t2 &lt;dbl&gt; | conspc_t0 &lt;dbl&gt; | conspc_t1 &lt;dbl&gt; | conspc_t2 &lt;dbl&gt; |\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n| 1 | 1 | 1 | 1 | 1 | 1 | 0 | 5 | 1 | 1 | 1 | ⋯ |  1.5410 | 260.224 | 374.0720 | 379.2080 | 106.18667 | 183.1493 |  57.12800 | 366.4107 | 557.2213 | 436.3360 |\n| 2 | 1 | 1 | 1 | 0 | 0 | 1 | 5 | 1 | 1 | 1 | ⋯ | -0.6615 | 265.360 | 574.3760 | 195.1680 |  87.26666 | 160.0133 | 112.13600 | 352.6266 | 734.3893 | 307.3040 |\n| 3 | 1 | 1 | 0 | 0 | 1 | 1 | 4 | 1 | 1 | 1 | ⋯ | -0.3240 | 604.550 | 433.3500 | 367.0100 | 348.81332 | 263.0833 | 123.32333 | 953.3633 | 696.4333 | 490.3333 |\n| 4 | 0 | 1 | 0 | 0 | 1 | 0 | 6 | 1 | 1 | 1 | ⋯ |  1.1500 | 233.260 | 281.7667 | 260.4686 | 100.87778 | 140.2333 |  36.32571 | 334.1378 | 422.0000 | 296.7943 |\n| 6 | 1 | 1 | 1 | 0 | 1 | 1 | 4 | 1 | 1 | 1 | ⋯ | -0.8260 | 280.340 | 185.1100 | 364.8700 | 158.41666 | 201.1833 |  68.00000 | 438.7567 | 386.2933 | 432.8700 |\n| 7 | 1 | 1 | 0 | 0 | 1 | 1 | 6 | 0 | 1 | 1 | ⋯ |  0.8220 | 321.000 | 126.2600 | 278.9133 |  65.58889 | 314.7600 |  65.21333 | 386.5889 | 441.0200 | 344.1266 |\n\n",
            "text/latex": "A data.frame: 6 × 27\n\\begin{tabular}{r|lllllllllllllllllllll}\n  & hhpiso & hhrooms & hhwater & hhwaterin & hhbano & hhownhouse & hhsize & hhelect & clus & headmale & ⋯ & index & conspcfood\\_t0 & conspcfood\\_t1 & conspcfood\\_t2 & conspcnonfood\\_t0 & conspcnonfood\\_t1 & conspcnonfood\\_t2 & conspc\\_t0 & conspc\\_t1 & conspc\\_t2\\\\\n  & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & <int> & ⋯ & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl> & <dbl>\\\\\n\\hline\n\t1 & 1 & 1 & 1 & 1 & 1 & 0 & 5 & 1 & 1 & 1 & ⋯ &  1.5410 & 260.224 & 374.0720 & 379.2080 & 106.18667 & 183.1493 &  57.12800 & 366.4107 & 557.2213 & 436.3360\\\\\n\t2 & 1 & 1 & 1 & 0 & 0 & 1 & 5 & 1 & 1 & 1 & ⋯ & -0.6615 & 265.360 & 574.3760 & 195.1680 &  87.26666 & 160.0133 & 112.13600 & 352.6266 & 734.3893 & 307.3040\\\\\n\t3 & 1 & 1 & 0 & 0 & 1 & 1 & 4 & 1 & 1 & 1 & ⋯ & -0.3240 & 604.550 & 433.3500 & 367.0100 & 348.81332 & 263.0833 & 123.32333 & 953.3633 & 696.4333 & 490.3333\\\\\n\t4 & 0 & 1 & 0 & 0 & 1 & 0 & 6 & 1 & 1 & 1 & ⋯ &  1.1500 & 233.260 & 281.7667 & 260.4686 & 100.87778 & 140.2333 &  36.32571 & 334.1378 & 422.0000 & 296.7943\\\\\n\t6 & 1 & 1 & 1 & 0 & 1 & 1 & 4 & 1 & 1 & 1 & ⋯ & -0.8260 & 280.340 & 185.1100 & 364.8700 & 158.41666 & 201.1833 &  68.00000 & 438.7567 & 386.2933 & 432.8700\\\\\n\t7 & 1 & 1 & 0 & 0 & 1 & 1 & 6 & 0 & 1 & 1 & ⋯ &  0.8220 & 321.000 & 126.2600 & 278.9133 &  65.58889 & 314.7600 &  65.21333 & 386.5889 & 441.0200 & 344.1266\\\\\n\\end{tabular}\n",
            "text/plain": [
              "  hhpiso hhrooms hhwater hhwaterin hhbano hhownhouse hhsize hhelect clus\n",
              "1 1      1       1       1         1      0          5      1       1   \n",
              "2 1      1       1       0         0      1          5      1       1   \n",
              "3 1      1       0       0         1      1          4      1       1   \n",
              "4 0      1       0       0         1      0          6      1       1   \n",
              "6 1      1       1       0         1      1          4      1       1   \n",
              "7 1      1       0       0         1      1          6      0       1   \n",
              "  headmale ⋯ index   conspcfood_t0 conspcfood_t1 conspcfood_t2 conspcnonfood_t0\n",
              "1 1        ⋯  1.5410 260.224       374.0720      379.2080      106.18667       \n",
              "2 1        ⋯ -0.6615 265.360       574.3760      195.1680       87.26666       \n",
              "3 1        ⋯ -0.3240 604.550       433.3500      367.0100      348.81332       \n",
              "4 1        ⋯  1.1500 233.260       281.7667      260.4686      100.87778       \n",
              "6 1        ⋯ -0.8260 280.340       185.1100      364.8700      158.41666       \n",
              "7 1        ⋯  0.8220 321.000       126.2600      278.9133       65.58889       \n",
              "  conspcnonfood_t1 conspcnonfood_t2 conspc_t0 conspc_t1 conspc_t2\n",
              "1 183.1493          57.12800        366.4107  557.2213  436.3360 \n",
              "2 160.0133         112.13600        352.6266  734.3893  307.3040 \n",
              "3 263.0833         123.32333        953.3633  696.4333  490.3333 \n",
              "4 140.2333          36.32571        334.1378  422.0000  296.7943 \n",
              "6 201.1833          68.00000        438.7567  386.2933  432.8700 \n",
              "7 314.7600          65.21333        386.5889  441.0200  344.1266 "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "df <- read.csv(\"https://raw.githubusercontent.com/CausalAIBook/MetricsMLNotebooks/main/data/progresa.csv\", row.names=1)\n",
        "comp <- complete.cases(df)\n",
        "df <- df[comp,]\n",
        "print(\"Shape of Data:\")\n",
        "print(dim(df))\n",
        "print(\"Variable Names:\")\n",
        "print(colnames(df))\n",
        "head(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vGbvqQmpmoqV"
      },
      "source": [
        "The data set contains 1,944 observations for which full covariate information of 27 variables is available.\n",
        "\n",
        "We want to measure the local average treatment effect of program participation on four outcome variables. The outcome variables are food and non-food consumption of the recorded families at two points in time, one year and two years after the implementation of the program.\n",
        "\n",
        "The 85 baseline covariates, recorded prior to program implementation, include: the house-holds size, household head's age, sex, years of education and employment status, spouse's age and years of education, number of children not older than five years and their sex, house\n",
        "characteristics: whether the house has cement floors, water connection, water connection inside the house, a bathroom, electricity, number of rooms, pre-intervention consumption, and an identifier of the urban locality in which the house is located.\n",
        "\n",
        "The data fits to the pattern of a sharp RD design, namely, all individuals that were below the cut-off index received no intervention, and all individuals above the cut-off were eligible to join the *progresa* program and thus participated."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9yvX75wy98g9"
      },
      "source": [
        "## Estimation without Covariates"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bCueRzpuqNXn"
      },
      "source": [
        "First, we will perform a very simple RD estimation with a weighted linear regression. We use a triangular kernel, which assigns weights to observations based on their distance from the cutoff point. The weights decrease linearly as the distance from the cutoff point increases."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "1LAMZP540pLn"
      },
      "outputs": [],
      "source": [
        "triangular_kernel <- function(index, h) {\n",
        "  weights <- 1 - abs(index)/h\n",
        "  weights[weights < 0] <- 0\n",
        "  return(weights)\n",
        "}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N-I-EBps0ubO"
      },
      "source": [
        "The parameter `h` is the bandwidth that controls the range of observations that receive non-zero weights. We use the `IKbandwidth` function from the `rdd` package that implements the *Imbens-Kalyanaraman* method. Another standard approach would be to use the standard deviation of `index`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "bFuzAouP04lO"
      },
      "outputs": [],
      "source": [
        "h <- IKbandwidth(X=df$index, Y=df$conspcfood_t1, cutpoint = 0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J9kU7tQ207A3"
      },
      "source": [
        "We use the triangular kernel function to calculate weights for each observation. After that, we can fit two seperate linear regressions for both treatment and control groups."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "cjc7f7F6qM36"
      },
      "outputs": [],
      "source": [
        "weights <- triangular_kernel(df$index, h)\n",
        "model_treated <- lm(conspcfood_t1 ~ index, data = df[df$index > 0,], weights = weights[df$index > 0])\n",
        "model_control <- lm(conspcfood_t1 ~ index, data = df[df$index < 0,], weights = weights[df$index < 0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MC5vPB-I1jeH"
      },
      "source": [
        "The treatment effect at the cutoff point is estimated as the difference between the predictions of the two models at the cutoff point."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "279my1C8o9a3",
        "outputId": "90dc56c8-d724-43ec-9037-dda50e84c267"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<strong>1:</strong> -22.1048282127342"
            ],
            "text/markdown": "**1:** -22.1048282127342",
            "text/latex": "\\textbf{1:} -22.1048282127342",
            "text/plain": [
              "        1 \n",
              "-22.10483 "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "cutoff <- 0\n",
        "treatment_effect <- predict(model_treated, newdata = data.frame(index = cutoff)) -\n",
        "                    predict(model_control, newdata = data.frame(index = cutoff))\n",
        "treatment_effect"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uW6PYdz-BESB"
      },
      "source": [
        "We estimate that the participation in the program reduced food consumption by $22.1$ units in the first year after the intervention. We can repeat the estimation using the `rdd` package, which yields us an estimate as well as a confidence band calculated according to the formulas presented in the book. We look at all four targets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6rLo9c_YGWIq",
        "outputId": "775e7826-caa4-4663-b356-961b38d76120"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                   LATE     s.e.\n",
            "Food T_1     -22.170185 27.45233\n",
            "Non-Food T_1  -9.126375 21.89831\n",
            "Food T_2      54.886342 48.11563\n",
            "Non-Food T_2  43.759831 32.34627\n"
          ]
        }
      ],
      "source": [
        "result <- c()\n",
        "for (outcome in c(\"conspcfood_t1\", \"conspcnonfood_t1\", \"conspcfood_t2\", \"conspcnonfood_t2\")){\n",
        "  rdd_result <- rdrobust(df[[outcome]], df$index, c = cutoff, rho=1)\n",
        "  result <- rbind(result, c(rdd_result$coef[1], rdd_result$se[\"Robust\",]))\n",
        "}\n",
        "resframe <- as.data.frame(result)\n",
        "colnames(resframe) <- c(\"LATE\", \"s.e.\")\n",
        "rownames(resframe) <- c(\"Food T_1\", \"Non-Food T_1\", \"Food T_2\", \"Non-Food T_2\")\n",
        "print(resframe)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BzzCc3oWZycJ"
      },
      "source": [
        "while the effects in the first year after the intervention are negative, we observe significant positive effects in the second year after an individual or household was accepted in the *Progresa* program. This is in accordance to the previous analysis of this dataset. One possible explanation for this is that through the program households have more money and can thus afford more. This was the desired effect of the program to combat hunger and extreme poverty.\n",
        "\n",
        "The following plot visualizes the two weighted regressions at the cut-off for the last outcome variable (non-food consumption in `t2`). We can clearly see the \"jump\" at the cut-off, which is our LATE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "id": "gBbbIMxEZb6V",
        "outputId": "12bc7267-d2b2-4472-dc27-7d379c0e4830"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "plot without title"
            ],
            "image/png": "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"
          },
          "metadata": {
            "image/png": {
              "width": 420,
              "height": 420
            }
          }
        }
      ],
      "source": [
        "rdplot(df$conspcfood_t1, df$index, c=0, x.lim = c(-1,1), y.lim = c(250,400))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hDEf53bE-Aki"
      },
      "source": [
        "## Estimation with Covariates\n",
        "\n",
        "For the identification and estimation of the average treatment effect at the cutoff value no covariate information is required except the running variable, but nevertheless in many applications additional covariates are collected which might be exploited for the analysis.\n",
        "\n",
        "\n",
        "The standard approach is simply to take up the regressors in the weighted least squares regression."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "JRdUQ8gcsGCg",
        "outputId": "542d02c8-620f-4f36-e60e-efbab6456b92"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<strong>1:</strong> -23.7805170528987"
            ],
            "text/markdown": "**1:** -23.7805170528987",
            "text/latex": "\\textbf{1:} -23.7805170528987",
            "text/plain": [
              "        1 \n",
              "-23.78052 "
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "model_treated <- lm(conspcfood_t1 ~ index + hhownhouse + headage + heademp + headeduc, data = df[df$index > 0,], weights = weights[df$index > 0])\n",
        "model_control <- lm(conspcfood_t1 ~ index + hhownhouse + headage + heademp + headeduc, data = df[df$index < 0,], weights = weights[df$index < 0])\n",
        "prediction_treated <- predict(model_treated, newdata = data.frame(index = cutoff,\n",
        "                                                                  hhownhouse = weighted.mean(df[df$index > 0,]$hhownhouse, w =weights[df$index > 0]),\n",
        "                                                                  headage = weighted.mean(df[df$index > 0,]$headage, w =weights[df$index > 0]),\n",
        "                                                                  heademp = weighted.mean(df[df$index > 0,]$heademp, w =weights[df$index > 0]),\n",
        "                                                                  headeduc = weighted.mean(df[df$index > 0,]$headeduc, w =weights[df$index > 0])))\n",
        "prediction_control <- predict(model_control, newdata = data.frame(index = cutoff,\n",
        "                                                                  hhownhouse = weighted.mean(df[df$index < 0,]$hhownhouse, w = weights[df$index < 0]),\n",
        "                                                                  headage = weighted.mean(df[df$index < 0,]$headage, w = weights[df$index < 0]),\n",
        "                                                                  heademp = weighted.mean(df[df$index < 0,]$heademp, w = weights[df$index < 0]),\n",
        "                                                                  headeduc = weighted.mean(df[df$index < 0,]$headeduc, w = weights[df$index < 0])))\n",
        "treatment_effect <- prediction_treated - prediction_control\n",
        "treatment_effect"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8_-6oj93FYY-"
      },
      "source": [
        "Including these selected covariates does not have a significant impact on the LATE estimation.\n",
        "\n",
        "Again, we can also use `rdrobust` to repeat the estimation with all other outcomes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OYQuZcvjyYx6",
        "outputId": "03184f8a-6aa5-4a3b-944a-58d05141c0c4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                   LATE     s.e. % reduction\n",
            "Food T_1     -29.359238 21.86341  -20.358650\n",
            "Non-Food T_1  -6.494893 20.61773   -5.847859\n",
            "Food T_2      55.585665 44.35862   -7.808290\n",
            "Non-Food T_2  45.439977 29.75665   -8.005925\n"
          ]
        }
      ],
      "source": [
        "result <- c()\n",
        "for (outcome in c(\"conspcfood_t1\", \"conspcnonfood_t1\", \"conspcfood_t2\", \"conspcnonfood_t2\")){\n",
        "  rdd_result <- rdrobust(df[[outcome]], df$index, c = cutoff, rho=1, covs = df[,c(1:8,10:17,19,22)])\n",
        "  result <- rbind(result, c(rdd_result$coef[1], rdd_result$se[\"Robust\",]))\n",
        "}\n",
        "resframe_adj <- as.data.frame(result)\n",
        "colnames(resframe_adj) <- c(\"LATE\", \"s.e.\")\n",
        "rownames(resframe_adj) <- c(\"Food T_1\", \"Non-Food T_1\", \"Food T_2\", \"Non-Food T_2\")\n",
        "resframe_adj[\"% reduction\"] = (resframe_adj[\"s.e.\"] - resframe[,2]) * 100 / resframe[,2]\n",
        "print(resframe_adj)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5q8S0wNhabWy"
      },
      "source": [
        "Overall, the adjustment by only a few covariates has not changed the estimated coefficient much from the result without covariates. However, including covariates does reduce the standard deviation of the estimation."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9U8UkHmv-D-0"
      },
      "source": [
        "## Estimation using ML"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NiYSglH9E0Er"
      },
      "source": [
        "As discussed in the book, including many covariables in the RD estimation can be benefitial for multiple reasons:\n",
        "1. **Efficiency and power improvements**: Similar as in randomized control trials, using covariates can increase efficiency and improve power.\n",
        "2. **Auxiliary information**: In RDD the score determins the treatment assignment and measurement errors in the running variable can distort the results. Additional covariates can be exploited to overcome these issues or to deal with missing data problems.\n",
        "3. **Treatment effect heterogeneity**: Covariates can be used to define subgroups in which the treatment effects differ.\n",
        "4. **Other parameters of interest and extrapolation**: As the identified treatment effect in RDD is local at the cutoff, additional covariates might help for extrapolation of the treatment effects or identify other causal parameters.\n",
        "\n",
        "However, including a high number of covariates also comes with additional challenges, such as variables selection, non-linearities or interactions between covariates. The best way to overcome these is the use of modern ML methods.\n",
        "\n",
        "There are multiple ways to implement the estimators presented in the book, we will closely follow the analysis of [Noack et al. (2023)](https://arxiv.org/pdf/2107.07942.pdf). We set up running variable and outcome as above. The baseline covariates will be all the other variables in the given dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "n2uoMwzkCq4P"
      },
      "outputs": [],
      "source": [
        "# Running Variable and Outcome\n",
        "df_ml = df\n",
        "investigated_outcome = \"conspcfood_t1\"\n",
        "names(df_ml)[names(df_ml) == \"index\"] <- \"X\"\n",
        "names(df_ml)[names(df_ml) == investigated_outcome] <- \"Y\"\n",
        "\n",
        "# Baseline covariates including consumption\n",
        "b.covs <- names(df_ml[,c(1:8,10:17,19,22)])\n",
        "\n",
        "# Fixed effects for localities\n",
        "i.fe <- as.matrix(dummy_cols(df_ml$clus, remove_first_dummy = TRUE))\n",
        "\n",
        "# Flexible covariates including localities indicators\n",
        "f.covs <- as.matrix(model.matrix(~ .^2, data=df_ml[b.covs] ))[,-1]\n",
        "Z.lasso <- as.matrix(cbind(i.fe, f.covs))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2n8yvua4Ns_A"
      },
      "source": [
        "We will use the package `rdrobust` for the RD estimation. Before starting the DML procedure, we have to estimate a bandwidth to restrict the samples in the first stage estimation."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "VIO-PQEtOKob"
      },
      "outputs": [],
      "source": [
        "h.fs <- 2*rdrobust(df_ml$Y, df_ml$X, rho=1)$bws[[1]]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nm8BC6JTQnV7"
      },
      "source": [
        "The next chunk sets up the crossfitting and estimates the function $\\eta(Z)$, which we will use to adjust $Y$ for the second stage. We use Random Forest, a Boosting implementation, Linear Regression and Lasso with both a baseline and flexible covariate structure."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "y-tGMe5iQhVd"
      },
      "outputs": [],
      "source": [
        "first_stage <- function(){\n",
        "  # Set up the cross-fitting\n",
        "  n <- nrow(df_ml)\n",
        "  Kf <- 5 # Number of folds\n",
        "  sampleframe <- rep(1:Kf, ceiling(n/Kf))\n",
        "  cfgroup <- sample(sampleframe, size=n, replace = FALSE)\n",
        "\n",
        "  # Matrix to store eta predictions\n",
        "  eta.fit <- matrix(NA, n, 5)\n",
        "\n",
        "  # Create vector of observations to be considered in the first stage model\n",
        "  weights <- (abs(df_ml$X)<h.fs)\n",
        "\n",
        "  for (k in 1:Kf){\n",
        "    fold = (cfgroup == k)\n",
        "\n",
        "    data_treated <- df_ml[df_ml$X>0 & !fold & weights>0,]\n",
        "    data_control <- df_ml[df_ml$X<0 & !fold & weights>0,]\n",
        "\n",
        "    data_fold <- df_ml[fold,]\n",
        "\n",
        "    model <- as.formula(paste(\"Y~\", paste(b.covs, collapse = \"+\")))\n",
        "\n",
        "    rf1 <- randomForest(model, data = data_treated, mtry = 4, ntree = 1000)\n",
        "    rf0 <- randomForest(model, data = data_control, mtry = 4, ntree = 1000)\n",
        "    eta.fit[fold,1] <- (predict(rf1, data_fold) + predict(rf0, data_fold))/2\n",
        "\n",
        "    gbm1 <- gbm(model, data = data_treated, n.trees = 100, interaction.depth = 1,\n",
        "                shrinkage = .1, distribution=\"gaussian\")\n",
        "    gbm0 <- gbm(model, data = data_control, n.trees = 100, interaction.depth = 1,\n",
        "                shrinkage = .1, distribution=\"gaussian\")\n",
        "    eta.fit[fold,2] <- (predict(gbm1, data_fold, n.trees=100) + predict(gbm0, data_fold, n.trees=100))/2\n",
        "\n",
        "    lm1 <- lm(model, data = data_treated)\n",
        "    lm0 <- lm(model, data = data_control)\n",
        "    eta.fit[fold,3] <- (predict(lm1, data_fold) + predict(lm0, data_fold))/2\n",
        "\n",
        "    las_base1 <- rlasso(model, data = data_treated)\n",
        "    las_base0 <- rlasso(model, data = data_control)\n",
        "    eta.fit[fold,4] <- (predict(las_base1, data_fold) + predict(las_base0, data_fold))/2\n",
        "\n",
        "    data_treated_extended = cbind(Z.lasso[rownames(data_treated),], data_treated)\n",
        "    data_control_extended = cbind(Z.lasso[rownames(data_control),], data_control)\n",
        "    data_fold_extended = cbind(Z.lasso[rownames(data_fold),], data_fold)\n",
        "    model_flex <- as.formula(paste(\"Y~\", paste(c(b.covs, colnames(Z.lasso)), collapse = \"+\")))\n",
        "\n",
        "    las_flex1 <- rlasso(model_flex, data = data_treated_extended)\n",
        "    las_flex0 <- rlasso(model_flex, data = data_control_extended)\n",
        "    eta.fit[fold,5] <- (predict(las_flex1, data_fold_extended) + predict(las_flex0, data_fold_extended))/2\n",
        "  }\n",
        "  return(eta.fit)\n",
        "}\n",
        "\n",
        "eta.fit <- first_stage()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ybTRUohWi_xE"
      },
      "source": [
        "With the estimated $\\hat{\\eta}(Z)$ we can correct for confounding in $Y$ and now run the RD estimation as second stage again."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WdJkfePmx4iN",
        "outputId": "2f15c356-165d-4264-df8c-7909899b50b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                       LATE     s.e.\n",
            "Random Forest     -18.76745 22.69156\n",
            "Gradient Boosting -16.55583 22.05518\n",
            "Linear Regression -26.54316 22.60883\n",
            "Lasso Baseline    -26.33599 22.59536\n",
            "Lasso Flexible    -21.39515 21.04786\n"
          ]
        }
      ],
      "source": [
        "methods <- c(\"Random Forest\", \"Gradient Boosting\", \"Linear Regression\", \"Lasso Baseline\", \"Lasso Flexible\")\n",
        "\n",
        "second_stage <- function(eta.fit){\n",
        "  adj_results <- NULL\n",
        "\n",
        "  for(i in 1:length(methods)){\n",
        "    M.Y <- df_ml$Y - eta.fit[,i]\n",
        "    rdd_result <- rdrobust(M.Y, df$index, c = cutoff, rho=1)\n",
        "    adj_results <- rbind(adj_results, c(rdd_result$coef[1], rdd_result$se[\"Robust\",]))\n",
        "  }\n",
        "  return(adj_results)\n",
        "}\n",
        "\n",
        "adj_frame <- as.data.frame(second_stage(eta.fit))\n",
        "rownames(adj_frame) <- methods\n",
        "colnames(adj_frame) <- c(\"LATE\", \"s.e.\")\n",
        "print(adj_frame)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YTk3TdLgokSU"
      },
      "source": [
        "Finally, we create a small simulation study with only $R=20$ repetitions to show the variance reducing effect of the inclusion of ML-based estimators for the covariates. The next block runs up to ten minutes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "U8kFY0gzClWK"
      },
      "outputs": [],
      "source": [
        "estimates <- adj_frame[,1]\n",
        "std.err <- adj_frame[,2]\n",
        "R <- 19\n",
        "\n",
        "for (i in 1:R){\n",
        "  eta.fit <- first_stage()\n",
        "  adj_results <- second_stage(eta.fit)\n",
        "  estimates <- cbind(estimates, adj_results[,1])\n",
        "  std.err <- cbind(std.err, adj_results[,2])\n",
        "}"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We aggregate the median of the estimates, the mean of the standard errors and also calculate the mean reduction of standard error compared to the \"no covariates estimation. We see, that including covariates can reduce the standard error of estimation around 15-20%."
      ],
      "metadata": {
        "id": "gNVwChjU-UHF"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "LqHHecS-FtEI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d55b70e-a209-47ea-d1c4-2e34c4f6d2af"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                    LATE     s.e. % reduction\n",
            "Random Forest                  -19.89011 22.78052   -17.01789\n",
            "Gradient Boosting              -19.57536 22.60495   -17.65744\n",
            "Linear Regression              -28.29398 22.47213   -18.14126\n",
            "Lasso Baseline                 -26.29744 22.27391   -18.86330\n",
            "Lasso Flexible                 -22.60897 21.51795   -21.61702\n",
            "Linear Adjusted (no cross-fit) -29.35924 21.86341   -20.35865\n"
          ]
        }
      ],
      "source": [
        "med.est <- apply(estimates,  1, median)\n",
        "mean.se <- apply(std.err,  1, mean)\n",
        "adj_frame <- as.data.frame(cbind(med.est, mean.se))\n",
        "rownames(adj_frame) <- methods\n",
        "colnames(adj_frame) <- c(\"LATE\", \"s.e.\")\n",
        "adj_frame[\"% reduction\"] <- (adj_frame[\"s.e.\"] - resframe[1,2]) * 100 / resframe[1,2]\n",
        "adj_frame[\"Linear Adjusted (no cross-fit)\", ] = resframe_adj[1,]\n",
        "print(adj_frame)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "R",
      "name": "ir"
    },
    "language_info": {
      "name": "R"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}