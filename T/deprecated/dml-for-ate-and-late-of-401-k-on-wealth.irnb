{"cells":[{"metadata":{},"cell_type":"markdown","source":"# Inference on Predictive and Causal Effects in High-Dimensional Nonlinear Models"},{"metadata":{"trusted":true},"cell_type":"markdown","source":"## Impact of 401(k) on  Financial Wealth\n\nAs a practical illustration of the methods developed in this lecture, we consider estimation of the effect of 401(k) eligibility and participation \non accumulated assets. 401(k) plans are pension accounts sponsored by employers. The key problem in determining the effect of participation in 401(k) plans on accumulated assets is saver heterogeneity coupled with the fact that the decision to enroll in a 401(k) is non-random. It is generally recognized that some people have a higher preference for saving than others. It also seems likely that those individuals with high unobserved preference for saving would be most likely to choose to participate in tax-advantaged retirement savings plans and would tend to have otherwise high amounts of accumulated assets. The presence of unobserved savings preferences with these properties then implies that conventional estimates that do not account for saver heterogeneity and endogeneity of participation will be biased upward, tending to overstate the savings effects of 401(k) participation.\n\nOne can argue that eligibility for enrolling in a 401(k) plan in this data can be taken as exogenous after conditioning on a few observables of which the most important for their argument is income. The basic idea is that, at least around the time 401(k)â€™s initially became available, people were unlikely to be basing their employment decisions on whether an employer offered a 401(k) but would instead focus on income and other aspects of the job. "},{"metadata":{},"cell_type":"markdown","source":"### Data\n\nThe data set can be loaded from the `hdm` package for R by typing\n\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"library(hdm) \nlibrary(ggplot2)\ndata(pension)\ndata <- pension \ndim(data)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"See the \"Details\" section on the description of the data set, which can be accessed by \n"},{"metadata":{"trusted":true},"cell_type":"code","source":"help(pension)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"The data consist of 9,915 observations at the household level drawn from the 1991 Survey of Income and Program Participation (SIPP).  All the variables are referred to 1990. We use net financial assets (*net\\_tfa*) as the outcome variable, $Y$,  in our analysis. The net financial assets are computed as the sum of IRA balances, 401(k) balances, checking accounts, saving bonds, other interest-earning accounts, other interest-earning assets, stocks, and mutual funds less non mortgage debts. "},{"metadata":{},"cell_type":"markdown","source":"Among the $9915$ individuals, $3682$ are eligible to participate in the program. The variable *e401* indicates eligibility and *p401* indicates participation, respectively."},{"metadata":{"trusted":true},"cell_type":"code","source":"hist_e401 = ggplot(data, aes(x = e401, fill = factor(e401))) + geom_bar()\nhist_e401","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Eligibility is highly associated with financial wealth:"},{"metadata":{"trusted":true},"cell_type":"code","source":"dens_net_tfa = ggplot(data, aes(x = net_tfa, color = factor(e401), fill = factor(e401)) ) + \n                    geom_density() + xlim(c(-20000, 150000)) + \n                    facet_wrap(.~e401) \n                    \ndens_net_tfa","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"The unconditional APE of e401 is about $19559$:"},{"metadata":{"trusted":true},"cell_type":"code","source":"e1 <- data[data$e401==1,]\ne0 <- data[data$e401==0,]\nround(mean(e1$net_tfa)-mean(e0$net_tfa),0)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Among the $3682$ individuals that  are eligible, $2594$ decided to participate in the program. The unconditional APE of p401 is about $27372$:"},{"metadata":{"trusted":true},"cell_type":"code","source":"p1 <- data[data$p401==1,]\np0 <- data[data$p401==0,]\nround(mean(p1$net_tfa)-mean(p0$net_tfa),0)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"As discussed, these estimates are biased since they do not account for saver heterogeneity and endogeneity of participation."},{"metadata":{},"cell_type":"markdown","source":"## Double ML package"},{"metadata":{},"cell_type":"markdown","source":"We are interested in valid estimators of the average treatment effect of `e401` and `p401` on `net_tfa`. To get those estimators, we use the `DoubleML` package that internally builds on mlr3. You find additional information on the package on the package website https://docs.doubleml.org/ and the R documentation page https://docs.doubleml.org/r/stable/. "},{"metadata":{"trusted":true},"cell_type":"code","source":"# installing Double ML\nremotes::install_github(\"DoubleML/doubleml-for-r\",quiet=TRUE)\n\n\n# loading the packages\nlibrary(DoubleML)\nlibrary(mlr3learners)\nlibrary(mlr3)\nlibrary(data.table)\nlibrary(randomForest)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"As mentioned, in the tutorial we use the meta package `mlr3` to generate predictions with machine learning methods. A comprehensive introduction and description of the `mlr3` package is provided in the [mlr3book](https://mlr3book.mlr-org.com/). A list of all learners that you can use in `mlr3` can be found [here](https://mlr3extralearners.mlr-org.com/articles/learners/list_learners.html). The entry in the columns *mlr3 Package* and *Packages* indicate which packages must be installed/loaded in your R session. "},{"metadata":{},"cell_type":"markdown","source":"## Estimating the ATE of 401(k) Eligibility on Net Financial Assets"},{"metadata":{},"cell_type":"markdown","source":"We first look at the treatment effect of e401 on net total financial assets. We give estimates of the ATE and ATT that corresponds to the linear model\n\n\\begin{equation*}\nY = D \\alpha + f(X)'\\beta+ \\epsilon,\n\\end{equation*}\n\nwhere $f(X)$ includes indicators of marital status, two-earner status, defined benefit pension status, IRA participation status, and home ownership status, and  orthogonal polynomials of degrees 2, 4, 6 and 8 in family size, education, age and  income, respectively. The dimensions of $f(X)$ is 25. \n\nIn the first step, we report estimates of the average treatment effect (ATE) of 401(k) eligibility on net financial assets both in the partially linear regression (PLR) model and in the interactive regression model (IRM) allowing for heterogeneous treatment effects. \n"},{"metadata":{"trusted":true},"cell_type":"code","source":"# Constructing the data (as DoubleMLData)\nformula_flex = \"net_tfa ~ e401 + poly(age, 6, raw=TRUE) + poly(inc, 8, raw=TRUE) + poly(educ, 4, raw=TRUE) + poly(fsize, 2, raw=TRUE) + marr + twoearn + db + pira + hown\"\nmodel_flex = as.data.table(model.frame(formula_flex, pension))\nx_cols = colnames(model_flex)[-c(1,2)]\ndata_ml = DoubleMLData$new(model_flex, y_col = \"net_tfa\", d_cols = \"e401\", x_cols=x_cols)\n\n\np <- dim(model_flex)[2]-2\np\n\n# complex model with two-way interactions\n#data_interactions = fetch_401k(polynomial_features = TRUE, instrument = FALSE)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## Partially Linear Regression Models (PLR)"},{"metadata":{},"cell_type":"markdown","source":"We start using lasso to estimate the function $g_0$ and $m_0$ in the following PLR model:"},{"metadata":{},"cell_type":"markdown","source":"\\begin{eqnarray}\n &  Y = D\\theta_0 + g_0(X) + \\zeta,  &  E[\\zeta \\mid D,X]= 0,\\\\\n & D = m_0(X) +  V,   &  E[V \\mid X] = 0.\n\\end{eqnarray}"},{"metadata":{"trusted":true},"cell_type":"code","source":"# Estimating the PLR\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \nset.seed(123)\nlasso <- lrn(\"regr.cv_glmnet\",nfolds = 5, s = \"lambda.min\")\nlasso_class <- lrn(\"classif.cv_glmnet\", nfolds = 5, s = \"lambda.min\")\n\ndml_plr <- DoubleMLPLR$new(data_ml, ml_g = lasso, ml_m = lasso_class, n_folds=3)\ndml_plr$fit(store_predictions=TRUE)\ndml_plr$summary()\nlasso_plr <- dml_plr$coef\nlasso_std_plr <- dml_plr$se","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Let us check the predictive performance of this model."},{"metadata":{"trusted":true},"cell_type":"code","source":"dml_plr$params_names()\ng_hat <- as.matrix(dml_plr$predictions$ml_g) # predictions of g_o\nm_hat <- as.matrix(dml_plr$predictions$ml_m) # predictions of m_o","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# cross-fitted RMSE: outcome\ny <- as.matrix(pension$net_tfa) # true observations\ntheta <- as.numeric(dml_plr$coef) # estimated regression coefficient\nd <- as.matrix(pension$e401) \npredictions_y <- as.matrix(d*theta)+g_hat # predictions for y\nlasso_y_rmse <- sqrt(mean((y-predictions_y)^2)) \nlasso_y_rmse","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# cross-fitted RMSE: treatment\nd <- as.matrix(pension$e401) \nlasso_d_rmse <- sqrt(mean((d-m_hat)^2)) \nlasso_d_rmse\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Then, we repeat this procedure for various machine learning methods."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Random Forest\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \nrandomForest <- lrn(\"regr.ranger\")\nrandomForest_class <- lrn(\"classif.ranger\")\n\ndml_plr <- DoubleMLPLR$new(data_ml, ml_g = randomForest, ml_m = randomForest_class, n_folds=3)\ndml_plr$fit(store_predictions=TRUE) # set store_predictions=TRUE to evaluate the model\ndml_plr$summary()\nforest_plr <- dml_plr$coef\nforest_std_plr <- dml_plr$se","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"We can compare the accuracy of this model to the model that has been estimated with lasso."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Evaluation predictions\ng_hat <- as.matrix(dml_plr$predictions$ml_g) # predictions of g_o\nm_hat <- as.matrix(dml_plr$predictions$ml_m) # predictions of m_o\ntheta <- as.numeric(dml_plr$coef) # estimated regression coefficient\npredictions_y <- as.matrix(d*theta)+g_hat # predictions for y\nforest_y_rmse <- sqrt(mean((y-predictions_y)^2)) \nforest_y_rmse\n\n# cross-fitted RMSE: treatment\nforest_d_rmse <- sqrt(mean((d-m_hat)^2)) \nforest_d_rmse\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Trees\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \n\ntrees <- lrn(\"regr.rpart\")\ntrees_class <- lrn(\"classif.rpart\")\n\ndml_plr <- DoubleMLPLR$new(data_ml, ml_g = trees, ml_m = trees_class, n_folds=3)\ndml_plr$fit(store_predictions=TRUE)\ndml_plr$summary()\ntree_plr <- dml_plr$coef\ntree_std_plr <- dml_plr$se\n\n# Evaluation predictions\ng_hat <- as.matrix(dml_plr$predictions$ml_g) # predictions of g_o\nm_hat <- as.matrix(dml_plr$predictions$ml_m) # predictions of m_o\ntheta <- as.numeric(dml_plr$coef) # estimated regression coefficient\npredictions_y <- as.matrix(d*theta)+g_hat # predictions for y\ntree_y_rmse <- sqrt(mean((y-predictions_y)^2)) \ntree_y_rmse\n\n# cross-fitted RMSE: treatment\ntree_d_rmse <- sqrt(mean((d-m_hat)^2)) \ntree_d_rmse\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Boosting\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \nboost<- lrn(\"regr.xgboost\",objective=\"reg:squarederror\")\nboost_class <- lrn(\"classif.xgboost\",objective = \"binary:logistic\",eval_metric =\"logloss\")\n\ndml_plr <- DoubleMLPLR$new(data_ml, ml_g = boost, ml_m = boost_class, n_folds=3)\ndml_plr$fit(store_predictions=TRUE)\ndml_plr$summary()\nboost_plr <- dml_plr$coef\nboost_std_plr <- dml_plr$se\n\n# Evaluation predictions\ng_hat <- as.matrix(dml_plr$predictions$ml_g) # predictions of g_o\nm_hat <- as.matrix(dml_plr$predictions$ml_m) # predictions of m_o\ntheta <- as.numeric(dml_plr$coef) # estimated regression coefficient\npredictions_y <- as.matrix(d*theta)+g_hat # predictions for y\nboost_y_rmse <- sqrt(mean((y-predictions_y)^2)) \nboost_y_rmse\n\n# cross-fitted RMSE: treatment\nboost_d_rmse <- sqrt(mean((d-m_hat)^2)) \nboost_d_rmse\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Let's sum up the results:"},{"metadata":{"trusted":true},"cell_type":"code","source":"library(xtable)\ntable <- matrix(0, 4, 4)\ntable[1,1:4]   <- c(lasso_plr,forest_plr,tree_plr,boost_plr)\ntable[2,1:4]   <- c(lasso_std_plr,forest_std_plr,tree_std_plr,boost_std_plr)\ntable[3,1:4]   <- c(lasso_y_rmse,forest_y_rmse,tree_y_rmse,boost_y_rmse)\ntable[4,1:4]   <- c(lasso_d_rmse,forest_d_rmse,tree_d_rmse,boost_d_rmse)\nrownames(table) <- c(\"Estimate\",\"Std.Error\",\"RMSE Y\",\"RMSE D\")\ncolnames(table) <- c(\"Lasso\",\"Random Forest\",\"Trees\",\"Boosting\")\ntab<- xtable(table, digits = 2)\ntab","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"The best model with lowest RMSE in both equation is the PLR model estimated via lasso. It gives the following estimate:"},{"metadata":{"trusted":true},"cell_type":"code","source":"lasso_plr","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## Interactive Regression Model (IRM)"},{"metadata":{},"cell_type":"markdown","source":"Next, we consider estimation of average treatment effects when treatment effects are fully heterogeneous:"},{"metadata":{},"cell_type":"markdown","source":" \\begin{eqnarray}\\label{eq: HetPL1}\n & Y  = g_0(D, X) + U,  &  \\quad E[U \\mid X, D]= 0,\\\\\n  & D  = m_0(X) + V,  & \\quad  E[V\\mid X] = 0.\n\\end{eqnarray}"},{"metadata":{},"cell_type":"markdown","source":"To reduce the disproportionate impact of extreme propensity score weights in the interactive model\nwe trim the propensity scores which are close to the bounds."},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(123)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \ndml_irm = DoubleMLIRM$new(data_ml, ml_g = lasso, \n                          ml_m = lasso_class, \n                          trimming_threshold = 0.01, n_folds=3)\ndml_irm$fit(store_predictions=TRUE)\ndml_irm$summary()\nlasso_irm <- dml_irm$coef\nlasso_std_irm <- dml_irm$se\n\n\n# predictions\ndml_irm$params_names()\ng0_hat <- as.matrix(dml_irm$predictions$ml_g0) # predictions of g_0(D=0, X)\ng1_hat <- as.matrix(dml_irm$predictions$ml_g1) # predictions of g_0(D=1, X)\ng_hat <- d*g1_hat+(1-d)*g0_hat # predictions of g_0\nm_hat <- as.matrix(dml_irm$predictions$ml_m) # predictions of m_o\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# cross-fitted RMSE: outcome\ny <- as.matrix(pension$net_tfa) # true observations\nd <- as.matrix(pension$e401) \nlasso_y_irm <- sqrt(mean((y-g_hat)^2)) \nlasso_y_irm\n\n# cross-fitted RMSE: treatment\nlasso_d_irm <- sqrt(mean((d-m_hat)^2)) \nlasso_d_irm\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"##### forest #####\n\ndml_irm = DoubleMLIRM$new(data_ml, ml_g = randomForest, \n                          ml_m = randomForest_class, \n                          trimming_threshold = 0.01, n_folds=3)\ndml_irm$fit(store_predictions=TRUE)\ndml_irm$summary()\nforest_irm <- dml_irm$coef\nforest_std_irm <- dml_plr$se\n\n# predictions\ng0_hat <- as.matrix(dml_irm$predictions$ml_g0) # predictions of g_0(D=0, X)\ng1_hat <- as.matrix(dml_irm$predictions$ml_g1) # predictions of g_0(D=1, X)\ng_hat <- d*g1_hat+(1-d)*g0_hat # predictions of g_0\nm_hat <- as.matrix(dml_irm$predictions$ml_m) # predictions of m_o\n\n# cross-fitted RMSE: outcome\ny <- as.matrix(pension$net_tfa) # true observations\nd <- as.matrix(pension$e401) \nforest_y_irm <- sqrt(mean((y-g_hat)^2)) \nforest_y_irm\n\n# cross-fitted RMSE: treatment\nforest_d_irm <- sqrt(mean((d-m_hat)^2)) \nforest_d_irm\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)\n\n##### trees #####\n\ndml_irm <- DoubleMLIRM$new(data_ml, ml_g = trees, ml_m = trees_class, \n                           trimming_threshold = 0.01, n_folds=3)\ndml_irm$fit(store_predictions=TRUE)\ndml_irm$summary()\ntree_irm <- dml_irm$coef\ntree_std_irm <- dml_irm$se\n\n# predictions\ng0_hat <- as.matrix(dml_irm$predictions$ml_g0) # predictions of g_0(D=0, X)\ng1_hat <- as.matrix(dml_irm$predictions$ml_g1) # predictions of g_0(D=1, X)\ng_hat <- d*g1_hat+(1-d)*g0_hat # predictions of g_0\nm_hat <- as.matrix(dml_irm$predictions$ml_m) # predictions of m_o\n\n# cross-fitted RMSE: outcome\ny <- as.matrix(pension$net_tfa) # true observations\nd <- as.matrix(pension$e401) \ntree_y_irm <- sqrt(mean((y-g_hat)^2)) \ntree_y_irm\n\n# cross-fitted RMSE: treatment\ntree_d_irm <- sqrt(mean((d-m_hat)^2)) \ntree_d_irm\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)\n\n\n##### boosting #####\n\ndml_irm <- DoubleMLIRM$new(data_ml, ml_g = boost, ml_m = boost_class,\n                           trimming_threshold = 0.01, n_folds=3)\ndml_irm$fit(store_predictions=TRUE)\ndml_irm$summary()\nboost_irm <- dml_irm$coef\nboost_std_irm <- dml_irm$se\n\n# predictions\ng0_hat <- as.matrix(dml_irm$predictions$ml_g0) # predictions of g_0(D=0, X)\ng1_hat <- as.matrix(dml_irm$predictions$ml_g1) # predictions of g_0(D=1, X)\ng_hat <- d*g1_hat+(1-d)*g0_hat # predictions of g_0\nm_hat <- as.matrix(dml_irm$predictions$ml_m) # predictions of m_o\n\n# cross-fitted RMSE: outcome\ny <- as.matrix(pension$net_tfa) # true observations\nd <- as.matrix(pension$e401) \nboost_y_irm <- sqrt(mean((y-g_hat)^2)) \nboost_y_irm\n\n# cross-fitted RMSE: treatment\nboost_d_irm <- sqrt(mean((d-m_hat)^2)) \nboost_d_irm\n\n# cross-fitted ce: treatment\nmean(ifelse(m_hat > 0.5, 1, 0) != d)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"library(xtable)\ntable <- matrix(0, 4, 4)\ntable[1,1:4]   <- c(lasso_irm,forest_irm,tree_irm,boost_irm)\ntable[2,1:4]   <- c(lasso_std_irm,forest_std_irm,tree_std_irm,boost_std_irm)\ntable[3,1:4]   <- c(lasso_y_irm,forest_y_irm,tree_y_irm,boost_y_irm)\ntable[4,1:4]   <- c(lasso_d_irm,forest_d_irm,tree_d_irm,boost_d_irm)\nrownames(table) <- c(\"Estimate\",\"Std.Error\",\"RMSE Y\",\"RMSE D\")\ncolnames(table) <- c(\"Lasso\",\"Random Forest\",\"Trees\",\"Boosting\")\ntab<- xtable(table, digits = 2)\ntab","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Here, Random Forest gives the best prediction rule for $g_0$ and Lasso the best prediction rule for $m_0$, respectively. Let us fit the IRM model using the best ML method for each equation to get a final estimate for the treatment effect of eligibility."},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(123)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \ndml_irm = DoubleMLIRM$new(data_ml, ml_g = randomForest, \n                          ml_m = lasso_class, \n                          trimming_threshold = 0.01, n_folds=3)\ndml_irm$fit(store_predictions=TRUE)\ndml_irm$summary()\nbest_irm <- dml_irm$coef\nbest_std_irm <- dml_irm$se","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"These estimates that flexibly account for confounding are\nsubstantially attenuated relative to the baseline estimate (*19559*) that does not account for confounding. They suggest much smaller causal effects of 401(k) eligiblity on financial asset holdings. "},{"metadata":{},"cell_type":"markdown","source":"## Local Average Treatment Effects of 401(k) Participation on Net Financial Assets"},{"metadata":{},"cell_type":"markdown","source":"## Interactive IV Model (IIVM)"},{"metadata":{},"cell_type":"markdown","source":"Now, we consider estimation of local average treatment effects (LATE) of participation with the binary instrument `e401`. As before, $Y$ denotes the outcome `net_tfa`, and $X$ is the vector of covariates.  Here the structural equation model is:\n\n\\begin{eqnarray}\n& Y = g_0(Z,X) + U, &\\quad E[U\\mid Z,X] = 0,\\\\\n& D = r_0(Z,X) + V, &\\quad E[V\\mid Z, X] = 0,\\\\\n& Z = m_0(X) + \\zeta, &\\quad E[\\zeta \\mid X] = 0.\n\\end{eqnarray}"},{"metadata":{"trusted":true},"cell_type":"code","source":"# Constructing the data (as DoubleMLData)\nformula_flex2 = \"net_tfa ~ p401+ e401 + poly(age, 6, raw=TRUE) + poly(inc, 8, raw=TRUE) + poly(educ, 4, raw=TRUE) + poly(fsize, 2, raw=TRUE) + marr + twoearn + db + pira + hown\"\nmodel_flex2 = as.data.table(model.frame(formula_flex2, data))\nx_cols = colnames(model_flex2)[-c(1,2,3)]\ndata_IV = DoubleMLData$new(model_flex2, y_col = \"net_tfa\", d_cols = \"p401\", z_cols =\"e401\",x_cols=x_cols)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(123)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \ndml_MLIIVM = DoubleMLIIVM$new(data_IV, ml_g = lasso, \n                       ml_m = lasso_class, ml_r = lasso_class,n_folds=3, subgroups = list(always_takers = FALSE, \n                                         never_takers = TRUE))\ndml_MLIIVM$fit(store_predictions=TRUE)\ndml_MLIIVM$summary()\nlasso_MLIIVM <- dml_MLIIVM$coef\nlasso_std_MLIIVM <- dml_MLIIVM$se","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"The confidence interval for the local average treatment effect of participation is given by"},{"metadata":{"trusted":true},"cell_type":"code","source":"dml_MLIIVM$confint(level = 0.95)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Here we can also check the accuracy of the model:"},{"metadata":{"trusted":true},"cell_type":"code","source":"# variables\ny <- as.matrix(pension$net_tfa) # true observations\nd <- as.matrix(pension$p401) \nz <- as.matrix(pension$e401) \n\n# predictions\ndml_MLIIVM$params_names()\ng0_hat <- as.matrix(dml_MLIIVM$predictions$ml_g0) # predictions of g_0(z=0, X)\ng1_hat <- as.matrix(dml_MLIIVM$predictions$ml_g1) # predictions of g_0(z=1, X)\ng_hat <- z*g1_hat+(1-z)*g0_hat # predictions of g_0\nr0_hat <- as.matrix(dml_MLIIVM$predictions$ml_r0) # predictions of r_0(z=0, X)\nr1_hat <- as.matrix(dml_MLIIVM$predictions$ml_r1) # predictions of r_0(z=1, X)\nr_hat <- z*r1_hat+(1-z)*r0_hat # predictions of r_0\nm_hat <- as.matrix(dml_MLIIVM$predictions$ml_m) # predictions of m_o","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# cross-fitted RMSE: outcome\nlasso_y_MLIIVM <- sqrt(mean((y-g_hat)^2)) \nlasso_y_MLIIVM\n\n# cross-fitted RMSE: treatment\nlasso_d_MLIIVM <- sqrt(mean((d-r_hat)^2)) \nlasso_d_MLIIVM\n\n# cross-fitted RMSE: instrument\nlasso_z_MLIIVM <- sqrt(mean((z-m_hat)^2)) \nlasso_z_MLIIVM\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Again, we repeat the procedure for the other machine learning methods:"},{"metadata":{"trusted":true},"cell_type":"code","source":"### random forest ###\n\nset.seed(123)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \ndml_MLIIVM = DoubleMLIIVM$new(data_IV, ml_g = randomForest, \n                       ml_m = randomForest_class, ml_r = randomForest_class,n_folds=3, subgroups = list(always_takers = FALSE, \n                                         never_takers = TRUE))\ndml_MLIIVM$fit(store_predictions=TRUE)\ndml_MLIIVM$summary()\nforest_MLIIVM <- dml_MLIIVM$coef\nforest_std_MLIIVM <- dml_MLIIVM$se\n\n# predictions\ng0_hat <- as.matrix(dml_MLIIVM$predictions$ml_g0) # predictions of g_0(Z=0, X)\ng1_hat <- as.matrix(dml_MLIIVM$predictions$ml_g1) # predictions of g_0(Z=1, X)\ng_hat <- z*g1_hat+(1-z)*g0_hat # predictions of g_0\nr0_hat <- as.matrix(dml_MLIIVM$predictions$ml_r0) # predictions of r_0(Z=0, X)\nr1_hat <- as.matrix(dml_MLIIVM$predictions$ml_r1) # predictions of r_0(Z=1, X)\nr_hat <- z*r1_hat+(1-z)*r0_hat # predictions of r_0\nm_hat <- as.matrix(dml_MLIIVM$predictions$ml_m) # predictions of m_o\n\n# cross-fitted RMSE: outcome\nforest_y_MLIIVM <- sqrt(mean((y-g_hat)^2)) \nforest_y_MLIIVM\n\n# cross-fitted RMSE: treatment\nforest_d_MLIIVM <- sqrt(mean((d-r_hat)^2)) \nforest_d_MLIIVM\n\n# cross-fitted RMSE: instrument\nforest_z_MLIIVM <- sqrt(mean((z-m_hat)^2)) \nforest_z_MLIIVM\n\n### trees ###\n\ndml_MLIIVM = DoubleMLIIVM$new(data_IV, ml_g = trees, \n                       ml_m = trees_class, ml_r = trees_class,n_folds=3, subgroups = list(always_takers = FALSE, \n                                         never_takers = TRUE))\ndml_MLIIVM$fit(store_predictions=TRUE)\ndml_MLIIVM$summary()\ntree_MLIIVM <- dml_MLIIVM$coef\ntree_std_MLIIVM <- dml_MLIIVM$se\n\n# predictions\ng0_hat <- as.matrix(dml_MLIIVM$predictions$ml_g0) # predictions of g_0(Z=0, X)\ng1_hat <- as.matrix(dml_MLIIVM$predictions$ml_g1) # predictions of g_0(Z=1, X)\ng_hat <- z*g1_hat+(1-z)*g0_hat # predictions of g_0\nr0_hat <- as.matrix(dml_MLIIVM$predictions$ml_r0) # predictions of r_0(Z=0, X)\nr1_hat <- as.matrix(dml_MLIIVM$predictions$ml_r1) # predictions of r_0(Z=1, X)\nr_hat <- z*r1_hat+(1-z)*r0_hat # predictions of r_0\nm_hat <- as.matrix(dml_MLIIVM$predictions$ml_m) # predictions of m_o\n\n# cross-fitted RMSE: outcome\ntree_y_MLIIVM <- sqrt(mean((y-g_hat)^2)) \ntree_y_MLIIVM\n\n# cross-fitted RMSE: treatment\ntree_d_MLIIVM <- sqrt(mean((d-r_hat)^2)) \ntree_d_MLIIVM\n\n# cross-fitted RMSE: instrument\ntree_z_MLIIVM <- sqrt(mean((z-m_hat)^2)) \ntree_z_MLIIVM\n\n\n### boosting ###\ndml_MLIIVM = DoubleMLIIVM$new(data_IV, ml_g = boost, \n                       ml_m = boost_class, ml_r = boost_class,n_folds=3, subgroups = list(always_takers = FALSE, \n                                         never_takers = TRUE))\ndml_MLIIVM$fit(store_predictions=TRUE)\ndml_MLIIVM$summary()\nboost_MLIIVM <- dml_MLIIVM$coef\nboost_std_MLIIVM <- dml_MLIIVM$se\n\n# predictions\ng0_hat <- as.matrix(dml_MLIIVM$predictions$ml_g0) # predictions of g_0(Z=0, X)\ng1_hat <- as.matrix(dml_MLIIVM$predictions$ml_g1) # predictions of g_0(Z=1, X)\ng_hat <- z*g1_hat+(1-z)*g0_hat # predictions of g_0\nr0_hat <- as.matrix(dml_MLIIVM$predictions$ml_r0) # predictions of r_0(Z=0, X)\nr1_hat <- as.matrix(dml_MLIIVM$predictions$ml_r1) # predictions of r_0(Z=1, X)\nr_hat <- z*r1_hat+(1-z)*r0_hat # predictions of r_0\nm_hat <- as.matrix(dml_MLIIVM$predictions$ml_m) # predictions of m_o\n\n# cross-fitted RMSE: outcome\nboost_y_MLIIVM <- sqrt(mean((y-g_hat)^2)) \nboost_y_MLIIVM\n\n# cross-fitted RMSE: treatment\nboost_d_MLIIVM <- sqrt(mean((d-r_hat)^2)) \nboost_d_MLIIVM\n\n# cross-fitted RMSE: instrument\nboost_z_MLIIVM <- sqrt(mean((z-m_hat)^2)) \nboost_z_MLIIVM","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"library(xtable)\ntable <- matrix(0, 5, 4)\ntable[1,1:4]   <- c(lasso_MLIIVM,forest_MLIIVM,tree_MLIIVM,boost_MLIIVM)\ntable[2,1:4]   <- c(lasso_std_MLIIVM,forest_std_MLIIVM,tree_std_MLIIVM,boost_std_MLIIVM)\ntable[3,1:4]   <- c(lasso_y_MLIIVM,forest_y_MLIIVM,tree_y_MLIIVM,boost_y_MLIIVM)\ntable[4,1:4]   <- c(lasso_d_MLIIVM,forest_d_MLIIVM,tree_d_MLIIVM,boost_d_MLIIVM)\ntable[5,1:4]   <- c(lasso_z_MLIIVM,forest_z_MLIIVM,tree_z_MLIIVM,boost_z_MLIIVM)\nrownames(table) <- c(\"Estimate\",\"Std.Error\",\"RMSE Y\",\"RMSE D\",\"RMSE Z\")\ncolnames(table) <- c(\"Lasso\",\"Random Forest\",\"Trees\",\"Boosting\")\ntab<- xtable(table, digits = 2)\ntab","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"We report results based on four ML methods for estimating the nuisance functions used in\nforming the orthogonal estimating equations. We find again that the estimates of the treatment effect are stable across ML methods. The estimates are highly significant, hence we would reject the hypothesis\nthat the effect of 401(k) participation has no effect on financial health."},{"metadata":{},"cell_type":"markdown","source":"We might rerun the model using the best ML method for each equation to get a final estimate for the treatment effect of participation:"},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(123)\nlgr::get_logger(\"mlr3\")$set_threshold(\"warn\") \ndml_MLIIVM = DoubleMLIIVM$new(data_IV, ml_g = randomForest, \n                       ml_m = lasso_class, ml_r = lasso_class,n_folds=3, subgroups = list(always_takers = FALSE, \n                                         never_takers = TRUE))\ndml_MLIIVM$fit(store_predictions=TRUE)\ndml_MLIIVM$summary()\nbest_MLIIVM <- dml_MLIIVM$coef\nbest_std_MLIIVM <- dml_MLIIVM$se","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"3.6.3"}},"nbformat":4,"nbformat_minor":4}