{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"3.6.3"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"This notebook contains an example for teaching.","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle"}},{"cell_type":"markdown","source":"# The Effect of Gun Ownership on Gun-Homicide Rates using DML for neural nets","metadata":{}},{"cell_type":"markdown","source":"In this lab, we estimate the effect of gun ownership on the homicide rate using a neural network.","metadata":{}},{"cell_type":"code","source":"library(keras)\nlibrary(lfe)","metadata":{"execution":{"iopub.status.busy":"2021-07-21T15:35:37.524493Z","iopub.execute_input":"2021-07-21T15:35:37.526726Z","iopub.status.idle":"2021-07-21T15:35:37.537939Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"First, we need to load and preprocess the data.","metadata":{}},{"cell_type":"code","source":"# read in dataset\ndata <- read.csv(\"../input/gun-example/gun_clean.csv\") \n\n\n################## Find Variable Names from the Dataset ###################\n\nvarlist <- function (df=NULL,type=c(\"numeric\",\"factor\",\"character\"), pattern=\"\", exclude=NULL) {\n  vars <- character(0)\n  if (any(type %in% \"numeric\")) {\n    vars <- c(vars,names(df)[sapply(df,is.numeric)])\n  }\n  if (any(type %in% \"factor\")) {\n    vars <- c(vars,names(df)[sapply(df,is.factor)])\n  }  \n  if (any(type %in% \"character\")) {\n    vars <- c(vars,names(df)[sapply(df,is.character)])\n  }  \n  vars[(!vars %in% exclude) & grepl(vars,pattern=pattern)]\n}\n\n########################### Create Variables ##############################\n\n# dummy variables for year and county fixed effects\nfixed  <- grep(\"X_Jfips\", names(data), value=TRUE, fixed=TRUE)\nyear   <- varlist(data, pattern=\"X_Tyear\")\n\n# census control variables\ncensus     <- NULL\ncensus_var <- c(\"^AGE\", \"^BN\", \"^BP\", \"^BZ\", \"^ED\", \"^EL\",\"^HI\", \"^HS\", \"^INC\", \"^LF\", \"^LN\", \"^PI\", \"^PO\", \"^PP\", \"^PV\", \"^SPR\", \"^VS\")\n\nfor(i in 1:length(census_var)){\n  census  <- append(census, varlist(data, pattern=census_var[i]))\n}\n\n############################### Variables #################################\n\n# treatment variable\nd     <- \"logfssl\"\n\n# outcome variable\ny     <- \"logghomr\"\n\n# other control variables\nX1    <- c(\"logrobr\", \"logburg\", \"burg_missing\", \"robrate_missing\")\nX2    <- c(\"newblack\", \"newfhh\", \"newmove\", \"newdens\", \"newmal\")\n\n######################  Partial-out Fixed Effects #########################\n\n# new dataset for partialled-out variables\nrdata <- as.data.frame(data$CountyCode) \ncolnames(rdata) <- \"CountyCode\"\n\n# variables to partial-out\nvarlist <- c(y, d,X1, X2, census)\n\n# partial out year and county fixed effects from variables in varlist\nfor(i in 1:length(varlist)){\n  form <- as.formula(paste(varlist[i], \"~\", paste(paste(year,collapse=\"+\"),  paste(fixed,collapse=\"+\"), sep=\"+\")))\n  rdata[, varlist[i]] <- lm(form, data)$residuals\n}","metadata":{"execution":{"iopub.status.busy":"2021-07-21T15:35:37.540945Z","iopub.execute_input":"2021-07-21T15:35:37.542431Z","iopub.status.idle":"2021-07-21T15:36:00.091892Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# DML for neural nets\n","metadata":{}},{"cell_type":"markdown","source":"The following algorithm consumes $Y$,$D$ and $Z$, and learns the residuals $\\tilde{Y}$ and $\\tilde{D}$ via a neural network, where the residuals are obtained by cross-validation (cross-fitting). Then, it prints the estimated coefficient $\\beta$ and the clustered standard error from the final OLS regression.","metadata":{}},{"cell_type":"code","source":"DML2.for.NN <- function(z, d, y, nfold=2, clu, num_epochs, batch_size) {\n  nobs <- nrow(z) # number of observations\n  foldid <- rep.int(1:nfold,times = ceiling(nobs/nfold))[sample.int(nobs)] # define folds indices\n  I <- split(1:nobs, foldid)  # split observation indices into folds  \n  ytil <- dtil <- rep(NA, nobs)\n  cat(\"fold: \")\n  for(b in 1:length(I)){\n  # normalize the data\n  mean <- apply(z[-I[[b]],], 2, mean)\n  std <- apply(z[-I[[b]],], 2, sd)\n  z[-I[[b]],] <- scale(z[-I[[b]],], center = mean, scale = std)\n  z[I[[b]],] <- scale(z[I[[b]],], center = mean, scale = std)\n  # building the model with 3 layers, the ReLU activation function, mse loss and rmsprop optimizer                  \n  build_model <- function(){\n  model <- keras_model_sequential() %>% \n    layer_dense(units = 16, activation = \"relu\", \n                input_shape = dim(z[-I[[b]],][2]))%>% \n    layer_dense(units = 16, activation = \"relu\") %>% \n    layer_dense(units = 1) \n  \n    model %>% compile(\n    optimizer = \"rmsprop\", \n    loss = \"mse\", \n    metrics = c(\"mae\")\n    )  \n   }\n  model.Y <- build_model()\n  model.D <- build_model()                       \n  # fitting the model                   \n  model.D %>% fit(z[-I[[b]],], d[-I[[b]]],\n                    epochs = num_epochs, batch_size = batch_size, verbose = 0)                       \n  model.Y %>% fit(z[-I[[b]],], y[-I[[b]]],\n                    epochs = num_epochs, batch_size = batch_size, verbose = 0)\n  dhat <- model.D %>% predict(z[I[[b]],])\n  yhat <- model.Y %>% predict(z[I[[b]],])   \n  dtil[I[[b]]] <- (d[I[[b]]] - dhat) # record residual for the left-out fold\n  ytil[I[[b]]] <- (y[I[[b]]] - yhat) # record residial for the left-out fold                  \n  cat(b,\" \")\n        }\n  #rfit <- lm(ytil ~ dtil) # estimate the main parameter by regressing one residual on the other\n  data <- data.frame(cbind(ytil, dtil, as.matrix(clu)))\n  rfit <- felm(ytil ~ dtil|0|0|CountyCode,data=data)\n  coef.est <- coef(rfit)[2] # extract the coefficient\n  #HC <- vcovHC(rfit)\n  se    <- summary(rfit,robust=T)$coefficients[2,2] # record robust standard error by county\n  cat(sprintf(\"\\ncoef (se) = %g (%g)\\n\", coef.est , se)) # print the output\n  return( list(coef.est =coef.est , se=se, dtil=dtil, ytil=ytil, rfit=rfit) ) # save the output and residuals \n}","metadata":{"execution":{"iopub.status.busy":"2021-07-21T15:36:00.09759Z","iopub.execute_input":"2021-07-21T15:36:00.102569Z","iopub.status.idle":"2021-07-21T15:36:00.11961Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Estimating the effect with DML for neural nets","metadata":{}},{"cell_type":"code","source":"# treatment variable\nD <- rdata[which(colnames(rdata) == d)]\n# outcome variable\nY <- rdata[which(colnames(rdata) == y)]\n# construct matrix Z\nZ <- rdata[which(colnames(rdata) %in% c(X1,X2,census))]\n\n# inputs\ny_nn <- as.matrix(Y)\nd_nn <- as.matrix(D)\nz_nn <- as.matrix(Z)\nclu <- rdata[which(colnames(rdata) == \"CountyCode\")]","metadata":{"execution":{"iopub.status.busy":"2021-07-21T15:36:00.125236Z","iopub.execute_input":"2021-07-21T15:36:00.129708Z","iopub.status.idle":"2021-07-21T15:36:00.176196Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# DML with a NN\nset.seed(123)\nDML2.nn = DML2.for.NN(z_nn, d_nn, y_nn, nfold=2, clu, 100, 10)","metadata":{"execution":{"iopub.status.busy":"2021-07-21T15:36:00.178624Z","iopub.execute_input":"2021-07-21T15:36:00.179316Z","iopub.status.idle":"2021-07-21T15:38:23.530542Z"},"trusted":true},"execution_count":null,"outputs":[]}]}