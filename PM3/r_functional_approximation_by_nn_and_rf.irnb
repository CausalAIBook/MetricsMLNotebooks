{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0",
   "metadata": {
    "id": "elegant-proxy",
    "papermill": {
     "duration": 0.011489,
     "end_time": "2021-03-30T21:54:42.895419",
     "exception": false,
     "start_time": "2021-03-30T21:54:42.883930",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Functional Approximations by Trees and Neural Networks\n",
    "\n",
    "Here we show how the function\n",
    "$$\n",
    "x \\mapsto exp(4 x)\n",
    "$$\n",
    "can be easily approximated by a tree-based methods (Trees, Random Forest) and a neural network (2 Layered Neural Network)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1",
   "metadata": {
    "id": "NULYR1oB9aWz",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "install.packages(\"randomForest\")\n",
    "install.packages(\"rpart\")\n",
    "install.packages(\"gbm\")\n",
    "install.packages(\"keras\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "library(randomForest)\n",
    "library(rpart)\n",
    "library(gbm)\n",
    "library(keras)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3",
   "metadata": {
    "id": "widespread-mention",
    "papermill": {
     "duration": 0.009467,
     "end_time": "2021-03-30T21:54:42.915858",
     "exception": false,
     "start_time": "2021-03-30T21:54:42.906391",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Function Approximation by a Tree\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4",
   "metadata": {
    "id": "C4WFqJKmC25Z"
   },
   "source": [
    "We play around with the penalty level $cp$ below to illustrate how it affects the complexity of tree. Recall we may use this to prune the tree to improve predictive performance and lessen the noise in our final estimate. A simple penalty would be the number of leaves times a penalty level $\\alpha$.\n",
    "\n",
    "Specifics on the penalty can be found [here](https://cran.r-project.org/web/packages/rpart/rpart.pdf)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5",
   "metadata": {
    "id": "registered-correction",
    "papermill": {
     "duration": 0.694812,
     "end_time": "2021-03-30T21:54:43.620078",
     "exception": false,
     "start_time": "2021-03-30T21:54:42.925266",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "set.seed(1)\n",
    "x_train <- matrix(runif(1000), 1000, 1)\n",
    "y_train <- exp(4 * x_train) # Noiseless case  Y=g(X)\n",
    "dim(x_train)\n",
    "\n",
    "\n",
    "# shallow tree\n",
    "TreeModel <- rpart(y_train ~ x_train, cp = .01) # cp is penalty level\n",
    "pred_tm <- predict(TreeModel, newx = x_train)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_tm, col = 3, pch = 19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6",
   "metadata": {
    "id": "banner-sleeve",
    "papermill": {
     "duration": 0.294088,
     "end_time": "2021-03-30T21:54:43.926159",
     "exception": false,
     "start_time": "2021-03-30T21:54:43.632071",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "set.seed(1)\n",
    "x_train <- matrix(runif(1000), 1000, 1)\n",
    "y_train <- exp(4 * x_train) # Noiseless case  Y=g(X)\n",
    "dim(x_train)\n",
    "\n",
    "\n",
    "TreeModel <- rpart(y_train ~ x_train, cp = .0005) # cp is penalty level\n",
    "pred_tm <- predict(TreeModel, newx = x_train)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_tm, col = 3, pch = 19)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7",
   "metadata": {
    "id": "local-saturn",
    "papermill": {
     "duration": 0.013444,
     "end_time": "2021-03-30T21:54:43.953303",
     "exception": false,
     "start_time": "2021-03-30T21:54:43.939859",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Functional Approximation by RF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8",
   "metadata": {
    "id": "international-serum",
    "papermill": {
     "duration": 0.01351,
     "end_time": "2021-03-30T21:54:43.980273",
     "exception": false,
     "start_time": "2021-03-30T21:54:43.966763",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here we show how the function\n",
    "$$\n",
    "x \\mapsto exp(4 x)\n",
    "$$\n",
    "can be easily approximated by a tree-based method (Random Forest) and a neural network (2 Layered Neural Network)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9",
   "metadata": {
    "id": "further-siemens",
    "papermill": {
     "duration": 1.170101,
     "end_time": "2021-03-30T21:54:45.163992",
     "exception": false,
     "start_time": "2021-03-30T21:54:43.993891",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "RFmodel <- randomForest(y_train ~ x_train)\n",
    "pred_rf <- predict(RFmodel, newdata = x_train)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_rf, col = 4, pch = 19)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10",
   "metadata": {
    "id": "infrared-belgium",
    "papermill": {
     "duration": 0.015474,
     "end_time": "2021-03-30T21:54:45.201078",
     "exception": false,
     "start_time": "2021-03-30T21:54:45.185604",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Boosted Trees"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11",
   "metadata": {
    "id": "naval-twenty",
    "papermill": {
     "duration": 1.40312,
     "end_time": "2021-03-30T21:54:46.619828",
     "exception": false,
     "start_time": "2021-03-30T21:54:45.216708",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "data_train <- as.data.frame(cbind(x_train, y_train))\n",
    "BoostTreemodel <- gbm(y_train ~ x_train,\n",
    "  distribution = \"gaussian\", n.trees = 100, shrinkage = .01,\n",
    "  interaction.depth = 3\n",
    ")\n",
    "\n",
    "# shrinkage is \"learning rate\"\n",
    "# n.trees is the number of boosting steps\n",
    "# interaction.depth is the max depth of each tree\n",
    "pred_bt <- predict(BoostTreemodel, newdata = data_train, n.trees = 100)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_bt, col = 4, pch = 19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12",
   "metadata": {
    "id": "listed-michigan",
    "papermill": {
     "duration": 0.411341,
     "end_time": "2021-03-30T21:54:47.050501",
     "exception": false,
     "start_time": "2021-03-30T21:54:46.639160",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "data_train <- as.data.frame(cbind(x_train, y_train))\n",
    "BoostTreemodel <- gbm(y_train ~ x_train,\n",
    "  distribution = \"gaussian\", n.trees = 1000, shrinkage = .01,\n",
    "  interaction.depth = 3\n",
    ")\n",
    "# shrinkage is \"learning rate\"\n",
    "# n.trees is the number of boosting steps\n",
    "# interaction.depth is the max depth of each tree\n",
    "pred_bt <- predict(BoostTreemodel, newdata = data_train, n.trees = 1000)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_bt, col = 4, pch = 19)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "id": "psychological-venice",
    "papermill": {
     "duration": 0.018291,
     "end_time": "2021-03-30T21:54:47.087924",
     "exception": false,
     "start_time": "2021-03-30T21:54:47.069633",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Same Example with a Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14",
   "metadata": {
    "id": "behind-redhead",
    "papermill": {
     "duration": 0.195046,
     "end_time": "2021-03-30T21:54:47.301402",
     "exception": false,
     "start_time": "2021-03-30T21:54:47.106356",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "build_model <- function() {\n",
    "\n",
    "  model <- keras_model_sequential() %>%\n",
    "    layer_dense(\n",
    "      units = 200, activation = \"relu\",\n",
    "      input_shape = 1\n",
    "    ) %>%\n",
    "    layer_dense(units = 20, activation = \"relu\") %>%\n",
    "    layer_dense(units = 1)\n",
    "\n",
    "  model %>% compile(\n",
    "    optimizer = optimizer_adam(lr = 0.01),\n",
    "    loss = \"mse\",\n",
    "    metrics = c(\"mae\"),\n",
    "  )\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15",
   "metadata": {
    "id": "modified-monitor",
    "papermill": {
     "duration": 7.599438,
     "end_time": "2021-03-30T21:54:54.919929",
     "exception": false,
     "start_time": "2021-03-30T21:54:47.320491",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "model <- build_model()\n",
    "summary(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16",
   "metadata": {
    "id": "early-savannah",
    "papermill": {
     "duration": 1.37161,
     "end_time": "2021-03-30T21:54:56.310872",
     "exception": false,
     "start_time": "2021-03-30T21:54:54.939262",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "num_epochs <- 1\n",
    "model %>% fit(x_train, y_train,\n",
    "  epochs = num_epochs, batch_size = 10, verbose = 0\n",
    ")\n",
    "pred_nn <- model %>% predict(x_train)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_nn, col = 4, pch = 19, )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17",
   "metadata": {
    "id": "answering-ready",
    "papermill": {
     "duration": 13.865941,
     "end_time": "2021-03-30T21:55:10.197721",
     "exception": false,
     "start_time": "2021-03-30T21:54:56.331780",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "num_epochs <- 100\n",
    "model %>% fit(x_train, y_train,\n",
    "  epochs = num_epochs, batch_size = 10, verbose = 0\n",
    ")\n",
    "pred_nn <- model %>% predict(x_train)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_nn, col = 4, pch = 19, )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18",
   "metadata": {
    "id": "RAE1DNS1TL8K"
   },
   "source": [
    "### Using Early Stopping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19",
   "metadata": {
    "id": "_cyeRToRTORV",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# Define the neural network architecture\n",
    "model <- keras_model_sequential() %>%\n",
    "  layer_dense(units = 200, activation = \"relu\", input_shape = 1) %>%\n",
    "  layer_dense(units = 20, activation = \"relu\") %>%\n",
    "  layer_dense(units = 1) # Output layer with 1 unit for regression task\n",
    "\n",
    "# Compile the model\n",
    "model %>% compile(\n",
    "  optimizer = optimizer_adam(lr = 0.01),\n",
    "  loss = \"mse\",\n",
    "  metrics = c(\"mae\"),\n",
    ")\n",
    "\n",
    "summary(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20",
   "metadata": {
    "id": "FuBqP_e7Te5Y",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "num_epochs <- 100\n",
    "\n",
    "# Define early stopping based on validation set (20%) performance\n",
    "# Patience set to 5 epochs (default in skorch is 5)\n",
    "early_stopping <- callback_early_stopping(monitor = \"val_loss\", patience = 5)\n",
    "\n",
    "# Train the model\n",
    "model %>% fit(\n",
    "  x_train, y_train,\n",
    "  epochs = num_epochs,\n",
    "  batch_size = 10,\n",
    "  validation_split = 0.2, # 20% validation set\n",
    "  verbose = 0,\n",
    "  callbacks = list(early_stopping)\n",
    ")\n",
    "\n",
    "pred_nn <- model %>% predict(x_train)\n",
    "plot(x_train, y_train, type = \"p\", pch = 19, xlab = \"z\", ylab = \"g(z)\")\n",
    "points(x_train, pred_nn, col = 4, pch = 19)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 30.682213,
   "end_time": "2021-03-30T21:55:10.531019",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-03-30T21:54:39.848806",
   "version": "2.3.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
