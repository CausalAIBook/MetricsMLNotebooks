{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0",
   "metadata": {
    "id": "martial-negative",
    "papermill": {
     "duration": 0.024232,
     "end_time": "2021-04-03T12:55:25.038730",
     "exception": false,
     "start_time": "2021-04-03T12:55:25.014498",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Sensitivity Analysis for Unobserved Confounder with DML and Sensmakr\n",
    "\n",
    "Here we experiment with using package \"sensemakr\" in conjunction with debiased ML."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1",
   "metadata": {
    "id": "criminal-workplace",
    "papermill": {
     "duration": 0.019939,
     "end_time": "2021-04-03T12:55:25.120184",
     "exception": false,
     "start_time": "2021-04-03T12:55:25.100245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Partially Linear SEM\n",
    "\n",
    "Consider the SEM\n",
    "\\begin{align}\n",
    "Y :=~& \\alpha D + \\delta A + f_Y(X) + \\epsilon_Y,  \\\\\n",
    "D :=~& \\gamma A + f_D(X) + \\epsilon_D, \\\\\n",
    "A :=~& f_A(X) + \\epsilon_A, \\\\\n",
    "X :=~&  \\epsilon_X,\n",
    "\\end{align}\n",
    "where, conditional on $X$, $\\epsilon_Y, \\epsilon_D, \\epsilon_A$ are mean zero\n",
    "and mutually uncorrelated. We further normalize\n",
    "$$\n",
    "E[\\epsilon_A^2] =1.\n",
    "$$\n",
    "The key structural\n",
    "parameter is $\\alpha$: $$\\alpha = \\partial_d Y(d)$$\n",
    "where $$Y(d) := (Y: do (D=d)).$$\n",
    "\n",
    "To give context to our example, we can interpret $Y$ as earnings,\n",
    "$D$ as education, $A$ as ability, and $X$ as a set of observed background variables. In this example, we can interpret $\\alpha$ as the returns to schooling.\n",
    "\n",
    "We start by applying the partialling out operator to get rid of the $X$'s in all of the equations. Define the partialling out operation of any random vector $V$ with respect to another random vector $X$ as the residual that is left after subtracting the best predictor of $V$ given $X$:\n",
    "$$\\tilde V = V - E [V \\mid X].$$  \n",
    "If $f$'s are linear, we can replace $E [V \\mid X]$\n",
    "by linear projection.  After partialling out, we have a simplified system:\n",
    "\\begin{align}\n",
    "\\tilde Y :=~& \\alpha \\tilde D + \\delta \\tilde A + \\epsilon_Y,  \\\\\n",
    "\\tilde D :=~& \\gamma \\tilde A + \\epsilon_D, \\\\\n",
    "\\tilde A :=~& \\epsilon_A,\n",
    "\\end{align}\n",
    "where $\\epsilon_Y$, $\\epsilon_D$, and $\\epsilon_A$ are uncorrelated.\n",
    "\n",
    "Then the projection of $\\tilde Y$ on $\\tilde D$ recovers\n",
    "$$\n",
    "\\beta = E [\\tilde Y \\tilde D]/ E [\\tilde D^2] = \\alpha +  \\phi,\n",
    "$$\n",
    "where\n",
    "$$\n",
    "\\phi =  \\delta \\gamma/ E \\left[(\\gamma^2 + \\epsilon^2_D)\\right],\n",
    "$$\n",
    "is the omitted confounder bias or omitted variable bias.\n",
    "\n",
    "The formula follows from inserting the expression for $\\tilde D$ into the definition of $\\beta$ and then simplifying the resulting expression using the assumptions on the $\\epsilon$'s.\n",
    "\n",
    "We can use this formula to bound $\\phi$ directly by making assumptions on the size of $\\delta$\n",
    "and $\\gamma$.  An alternative approach can be based on the following characterization,\n",
    "based on partial $R^2$'s.  This characterization essentially follows\n",
    "from Cinelli and Hazlett, with the slight difference that we have adapted\n",
    "the result to the partially linear model.\n",
    "\n",
    "*Theorem* [Omitted Confounder Bias in Terms of Partial $R^2$'s]\n",
    "\n",
    "In the partially linear SEM setting above,\n",
    "$$\n",
    "\\phi^2 = \\frac{R^2_{\\tilde Y \\sim \\tilde A \\mid \\tilde D} R^2_{\\tilde D \\sim \\tilde A} }{ (1 - R^2_{\\tilde D \\sim \\tilde A}) } \\\n",
    "\\frac{E \\left[ (\\tilde Y - \\beta \\tilde D)^2 \\right] }{E \\left[ ( \\tilde D )^2 \\right]},\n",
    "$$\n",
    "where $R^2_{V \\sim W \\mid X}$ denotes the population $R^2$ in the linear regression of $V$ on $W$, after partialling out $X$ from $V$ and $W$ linearly.\n",
    "\n",
    "\n",
    "Therefore, if we place bounds on how much of the variation in $\\tilde Y$ and in $\\tilde D$\n",
    "the unobserved confounder $\\tilde A$ is able to explain, we can bound the omitted confounder bias by $$\\sqrt{\\phi^2}.$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2",
   "metadata": {
    "id": "continuous-marshall",
    "papermill": {
     "duration": 0.020014,
     "end_time": "2021-04-03T12:55:25.160190",
     "exception": false,
     "start_time": "2021-04-03T12:55:25.140176",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Empirical Example\n",
    "\n",
    "We consider an empirical example based on data surrounding the Darfur war. Specifically, we are interested in the effect of having experienced direct war violence on attitudes towards peace. Data is described here\n",
    "https://cran.r-project.org/web/packages/sensemakr/vignettes/sensemakr.html\n",
    "\n",
    "The main outcome is attitude towards peace -- ``peacefactor``.\n",
    "The key variable of interest is whether the responders were directly harmed (``directlyharmed``).\n",
    "We want to know if being directly harmed in the conflict causes people to support peace-enforcing measures.\n",
    "The measured confounders include dummy variables ``female``, ``farmer``, ``herder``, ``pastvoted``, along with ``age`` and household size (``hhsize``).\n",
    "There is also a village indicator. We deal with village by and partialling out a full set of village dummy variables before conducting\n",
    "the analysis. The standard errors will be clustered at the village level."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3",
   "metadata": {
    "id": "oW_mOo_wcpmV"
   },
   "source": [
    "\n",
    "## Outline\n",
    "\n",
    "We will:\n",
    "- mimic the partialling out procedure with machine learning tools;\n",
    "- invoke Sensmakr to compute $\\phi^2$ and plot sensitivity results.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4",
   "metadata": {
    "_execution_state": "idle",
    "_uuid": "051d70d956493feee0c6d64651c6a088724dca2a",
    "id": "spanish-queue",
    "papermill": {
     "duration": 13.050132,
     "end_time": "2021-04-03T12:55:38.230528",
     "exception": false,
     "start_time": "2021-04-03T12:55:25.180396",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# load package\n",
    "install.packages(\"sensemakr\")\n",
    "install.packages(\"lfe\")\n",
    "install.packages(\"hdm\")\n",
    "install.packages(\"randomForest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5",
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "library(sensemakr)\n",
    "library(lfe)\n",
    "library(hdm)\n",
    "library(randomForest)\n",
    "\n",
    "set.seed(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6",
   "metadata": {
    "id": "zipYYvHdl60m",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "file <- \"https://raw.githubusercontent.com/CausalAIBook/MetricsMLNotebooks/main/data/darfur.csv\"\n",
    "data <- read.csv(file)\n",
    "dim(data)\n",
    "attach(darfur)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7",
   "metadata": {
    "id": "hidden-packing",
    "papermill": {
     "duration": 0.021289,
     "end_time": "2021-04-03T12:55:38.319389",
     "exception": false,
     "start_time": "2021-04-03T12:55:38.298100",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Preprocessing\n",
    "Take out village fixed effects and run basic linear analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8",
   "metadata": {
    "id": "authorized-transformation",
    "papermill": {
     "duration": 2.339638,
     "end_time": "2021-04-03T12:55:40.680306",
     "exception": false,
     "start_time": "2021-04-03T12:55:38.340668",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# get rid of village fixed effects\n",
    "peacefactorR <- lm(peacefactor ~ village)$res\n",
    "directlyharmedR <- lm(directlyharmed ~ village)$res\n",
    "femaleR <- lm(female ~ village)$res\n",
    "ageR <- lm(age ~ village)$res\n",
    "farmerR <- lm(farmer_dar ~ village)$res\n",
    "herderR <- lm(herder_dar ~ village)$res\n",
    "pastvotedR <- lm(pastvoted ~ village)$res\n",
    "hhsizeR <- lm(hhsize_darfur ~ village)$res\n",
    "\n",
    "\n",
    "# Preliminary linear model analysis\n",
    "summary(felm(peacefactorR ~ directlyharmedR + femaleR +\n",
    "               ageR + farmerR + herderR + pastvotedR + hhsizeR | 0 | 0 | village))\n",
    "\n",
    "# here we are clustering standard errors at the village level\n",
    "summary(felm(peacefactorR ~ femaleR +\n",
    "               ageR + farmerR + herderR + pastvotedR + hhsizeR | 0 | 0 | village))\n",
    "\n",
    "summary(felm(directlyharmedR ~ femaleR +\n",
    "               ageR + farmerR + herderR + pastvotedR + hhsizeR | 0 | 0 | village))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9",
   "metadata": {
    "id": "dpvDjIKNw7Nk"
   },
   "source": [
    "For benchmarking, we want to understand the \"partial $R^2$\" of the controls on the outcome after partialling out the variable of interest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10",
   "metadata": {
    "id": "ck8nzqQbv8dz",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# partial out variable of interest\n",
    "peacefactorR2 <- lm(peacefactorR ~ directlyharmedR)$res\n",
    "femaleR2 <- lm(femaleR ~ directlyharmedR)$res\n",
    "ageR2 <- lm(ageR ~ directlyharmedR)$res\n",
    "farmerR2 <- lm(farmerR ~ directlyharmedR)$res\n",
    "herderR2 <- lm(herderR ~ directlyharmedR)$res\n",
    "pastvotedR2 <- lm(pastvotedR ~ directlyharmedR)$res\n",
    "hhsizeR2 <- lm(hhsizeR ~ directlyharmedR)$res\n",
    "\n",
    "\n",
    "# R^2 of controls after partialling out variable of interest\n",
    "summary(lm(peacefactorR2 ~ femaleR2 +\n",
    "             ageR2 + farmerR2 + herderR2 + pastvotedR2 + hhsizeR2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11",
   "metadata": {
    "id": "careful-dollar",
    "papermill": {
     "duration": 0.041148,
     "end_time": "2021-04-03T12:55:40.762964",
     "exception": false,
     "start_time": "2021-04-03T12:55:40.721816",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Lasso for partialling out controls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12",
   "metadata": {
    "id": "remarkable-mozambique",
    "papermill": {
     "duration": 0.310314,
     "end_time": "2021-04-03T12:55:41.103965",
     "exception": false,
     "start_time": "2021-04-03T12:55:40.793651",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "resY <- rlasso(peacefactorR ~ (femaleR + ageR + farmerR + herderR + pastvotedR + hhsizeR)^3,\n",
    "               post = FALSE)$res\n",
    "\n",
    "resD <- rlasso(directlyharmedR ~ (femaleR + ageR + farmerR + herderR + pastvotedR + hhsizeR)^3,\n",
    "               post = FALSE)$res\n",
    "\n",
    "print(c(\"Controls explain the following fraction of variance of Outcome\", 1 - var(resY) / var(peacefactorR)))\n",
    "print(c(\"Controls explain the following fraction of variance of Treatment\", 1 - var(resD) / var(directlyharmedR)))\n",
    "\n",
    "dml_darfur_model <- felm(resY ~ resD | 0 | 0 | village) # cluster SEs by village\n",
    "\n",
    "summary(dml_darfur_model, robust = TRUE) # cluster SE by village\n",
    "\n",
    "dml_darfur_model <- lm(resY ~ resD) # linear model to use as input in sensemakr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13",
   "metadata": {
    "id": "built-enlargement",
    "papermill": {
     "duration": 0.02335,
     "end_time": "2021-04-03T12:55:41.169602",
     "exception": false,
     "start_time": "2021-04-03T12:55:41.146252",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Manual Bias Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14",
   "metadata": {
    "id": "respective-sister",
    "papermill": {
     "duration": 0.380639,
     "end_time": "2021-04-03T12:55:41.573999",
     "exception": false,
     "start_time": "2021-04-03T12:55:41.193360",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# Main estimate\n",
    "beta <- dml_darfur_model$coef[2]\n",
    "\n",
    "# Hypothetical values of partial R2s\n",
    "r2_yc <- .13\n",
    "r2_dc <- .01\n",
    "\n",
    "# Elements of the bias equation\n",
    "kappa <- (r2_yc * r2_dc) / (1 - r2_dc)\n",
    "varianceRatio <- mean(dml_darfur_model$res^2) / mean(resD^2)\n",
    "\n",
    "# Compute square bias\n",
    "BiasSq <- kappa * varianceRatio\n",
    "\n",
    "# Compute absolute value of the bias\n",
    "print(cat(\"absolute value of the bias:\", sqrt(BiasSq)[1]))\n",
    "\n",
    "# plotting\n",
    "gridr2_dc <- seq(0, .3, by = .001)\n",
    "gridr2_yc <- kappa * (1 - gridr2_dc) / gridr2_dc\n",
    "gridr2_yc <- ifelse(gridr2_yc > 1, 1, gridr2_yc)\n",
    "plot(gridr2_dc, gridr2_yc,\n",
    "  type = \"l\", col = 4, xlab = \"Partial R2 of Treatment with Confounder\",\n",
    "  ylab = \"Partial R2 of Outcome with Confounder\",\n",
    "  main = paste(\"Combination of R2 such that |Bias| < \", round(sqrt(BiasSq), digits = 4))\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15",
   "metadata": {
    "id": "sorted-hands",
    "papermill": {
     "duration": 0.025659,
     "end_time": "2021-04-03T12:55:41.626309",
     "exception": false,
     "start_time": "2021-04-03T12:55:41.600650",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Bias Analysis with Sensemakr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16",
   "metadata": {
    "id": "proper-accessory",
    "papermill": {
     "duration": 0.572625,
     "end_time": "2021-04-03T12:55:42.224511",
     "exception": false,
     "start_time": "2021-04-03T12:55:41.651886",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "dml_darfur_sensitivity <- sensemakr(\n",
    "  model = dml_darfur_model,\n",
    "  treatment = \"resD\"\n",
    ")\n",
    "summary(dml_darfur_sensitivity)\n",
    "plot(dml_darfur_sensitivity, nlevels = 15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17",
   "metadata": {
    "id": "charged-mauritius",
    "papermill": {
     "duration": 0.030825,
     "end_time": "2021-04-03T12:55:42.286467",
     "exception": false,
     "start_time": "2021-04-03T12:55:42.255642",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Random Forest for partialling out"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18",
   "metadata": {
    "id": "charitable-placement",
    "papermill": {
     "duration": 0.030332,
     "end_time": "2021-04-03T12:55:42.347072",
     "exception": false,
     "start_time": "2021-04-03T12:55:42.316740",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The following code does DML with clustered standard errors by village"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19",
   "metadata": {
    "id": "collect-neutral",
    "papermill": {
     "duration": 0.050776,
     "end_time": "2021-04-03T12:55:42.428137",
     "exception": false,
     "start_time": "2021-04-03T12:55:42.377361",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "dml2_for_plm <- function(x, d, y, dreg, yreg, nfold = 2, clusterID) {\n",
    "  nobs <- nrow(x) # number of observations\n",
    "  foldid <- rep.int(1:nfold, times = ceiling(nobs / nfold))[sample.int(nobs)] # define folds indices\n",
    "  I <- split(1:nobs, foldid) # split observation indices into folds\n",
    "  ytil <- dtil <- rep(NA, nobs)\n",
    "  cat(\"fold: \")\n",
    "  for (b in seq_along(I)) {\n",
    "    dfit <- dreg(x[-I[[b]], ], d[-I[[b]]]) # take a fold out\n",
    "    yfit <- yreg(x[-I[[b]], ], y[-I[[b]]]) # take a foldt out\n",
    "    dhat <- predict(dfit, x[I[[b]], ], type = \"response\") # predict the left-out fold\n",
    "    yhat <- predict(yfit, x[I[[b]], ], type = \"response\") # predict the left-out fold\n",
    "    dtil[I[[b]]] <- (d[I[[b]]] - dhat) # record residual for the left-out fold\n",
    "    ytil[I[[b]]] <- (y[I[[b]]] - yhat) # record residial for the left-out fold\n",
    "    cat(b, \" \")\n",
    "  }\n",
    "  rfit <- felm(ytil ~ dtil | 0 | 0 | clusterID) # get clustered standard errors using felm\n",
    "  rfitSummary <- summary(rfit)\n",
    "  coef_est <- rfitSummary$coef[2] # extract coefficient\n",
    "  se <- rfitSummary$coef[2, 2] # record robust standard error\n",
    "  cat(sprintf(\"\\ncoef (se) = %g (%g)\\n\", coef_est, se)) # printing output\n",
    "  return(list(coef_est = coef_est, se = se, dtil = dtil, ytil = ytil)) # save output and residuals\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20",
   "metadata": {
    "id": "d8eMyN7NRhYO",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "x <- model.matrix(~ femaleR + ageR + farmerR + herderR + pastvotedR + hhsizeR)\n",
    "dim(x)\n",
    "\n",
    "d <- directlyharmedR\n",
    "y <- peacefactorR\n",
    "# DML with Random Forest:\n",
    "dreg <- function(x, d) {\n",
    "  randomForest(x, d)\n",
    "} # ML method=Forest\n",
    "yreg <- function(x, y) {\n",
    "  randomForest(x, y)\n",
    "} # ML method=Forest\n",
    "\n",
    "dml2_rf <- dml2_for_plm(x, d, y, dreg, yreg, nfold = 10, clusterID = village)\n",
    "\n",
    "resY <- dml2_rf$ytil\n",
    "resD <- dml2_rf$dtil\n",
    "\n",
    "print(c(\"Controls explain the following fraction of variance of Outcome\",\n",
    "        max(1 - var(resY) / var(peacefactorR), 0)))\n",
    "print(c(\"Controls explain the following fraction of variance of Treatment\",\n",
    "        max(1 - var(resD) / var(directlyharmedR), 0)))\n",
    "\n",
    "dml_darfur_model <- lm(resY ~ resD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21",
   "metadata": {
    "id": "cUxDc1mYdMHH"
   },
   "source": [
    "## Bias Analysis with Sensemakr\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22",
   "metadata": {
    "id": "obvious-there",
    "papermill": {
     "duration": 40.040643,
     "end_time": "2021-04-03T12:56:22.614312",
     "exception": false,
     "start_time": "2021-04-03T12:55:42.573669",
     "status": "completed"
    },
    "tags": [],
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "dml_darfur_sensitivity <- sensemakr(\n",
    "  model = dml_darfur_model,\n",
    "  treatment = \"resD\"\n",
    ")\n",
    "summary(dml_darfur_sensitivity)\n",
    "\n",
    "plot(dml_darfur_sensitivity, nlevels = 15)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 60.897772,
   "end_time": "2021-04-03T12:56:22.764591",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2021-04-03T12:55:21.866819",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
