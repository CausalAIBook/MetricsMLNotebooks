{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dYwg9btt1wJH"
      },
      "source": [
        "# BERT\n",
        "\n",
        "**Bidirectional Encoder Representations from Transformers.**\n",
        "\n",
        "_ | _\n",
        "- | -\n",
        "![alt](https://pytorch.org/assets/images/bert1.png) | ![alt](https://pytorch.org/assets/images/bert2.png)\n",
        "\n",
        "\n",
        "### **Overview**\n",
        "\n",
        "BERT was released together with the paper [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/abs/1810.04805) by Jacob Devlin *et al.* The model is based on the Transformer architecture introduced in [Attention Is All You Need](https://arxiv.org/abs/1706.03762) by Ashish Vaswani *et al.* and has led to significant improvements in a wide range of natural language tasks.\n",
        "\n",
        "At the highest level, BERT maps from a block of text to a numeric vector which summarizes the relevant information in the text.\n",
        "\n",
        "What is remarkable is that numeric summary is sufficiently informative that, for example, the numeric summary of a paragraph followed by a reading comprehension question contains all the information necessary to satisfactorily answer the question.\n",
        "\n",
        "#### **Transfer Learning**\n",
        "\n",
        "BERT is a great example of a paradigm called *transfer learning*, which has proved very effective in recent years. In the first step, a network is trained on an unsupervised task using massive amounts of data. In the case of BERT, it was trained to predict missing words and to detect when pairs of sentences are presented in reversed order using all of Wikipedia. This was initially done by Google, using intense computational resources.\n",
        "\n",
        "Once this network has been trained, it is then used to perform many other supervised tasks using only limited data and computational resources: for example, sentiment classification in tweets or quesiton answering. The network is re-trained to perform these other tasks in such a way that only the final, output parts of the network are allowed to adjust by very much, so that most of the \"information'' originally learned the network is preserved. This process is called *fine tuning*."
      ],
      "id": "dYwg9btt1wJH"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wNjNs3ViKTiO"
      },
      "source": [
        "##Getting to know BERT\n",
        "\n",
        "BERT, and many of its variants, are made avialable to the public by the open source [Huggingface Transformers](https://huggingface.co/transformers/) project. This is an amazing resource, giving researchers and practitioners easy-to-use access to this technology.\n",
        "\n",
        "In order to use BERT for modeling, we simply need to download the pre-trained neural network and fine tune it on our dataset, which is illustrated below."
      ],
      "id": "wNjNs3ViKTiO"
    },
    {
      "cell_type": "code",
      "source": [
        "install.packages(\"remotes\")\n",
        "remotes::install_github(\"rstudio/tensorflow\")\n",
        "install.packages(\"dplyr\")\n",
        "install.packages(\"DBI\")\n",
        "install.packages(\"ggplot2\")\n",
        "install.packages(\"reticulate\")\n",
        "install.packages(\"readr\")\n",
        "install.packages(\"stringr\")\n",
        "install.packages(\"tidyr\")\n",
        "install.packages(\"purrr\")\n",
        "install.packages(\"glmnet\")\n",
        "install.packages(\"caret\")\n",
        "install.packages(\"keras\")"
      ],
      "metadata": {
        "id": "9rooQWVdri1m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8d7baf0-1420-4405-d5d5-c63466fbbcdd",
        "collapsed": true
      },
      "id": "9rooQWVdri1m",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Downloading GitHub repo rstudio/tensorflow@HEAD\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rlang       (1.1.3  -> 1.1.4 ) [CRAN]\n",
            "png         (NA     -> 0.1-8 ) [CRAN]\n",
            "here        (NA     -> 1.0.1 ) [CRAN]\n",
            "RcppTOML    (NA     -> 0.2.2 ) [CRAN]\n",
            "Rcpp        (NA     -> 1.0.12) [CRAN]\n",
            "cli         (3.6.2  -> 3.6.3 ) [CRAN]\n",
            "backports   (1.4.1  -> 1.5.0 ) [CRAN]\n",
            "reticulate  (NA     -> 1.38.0) [CRAN]\n",
            "rstudioapi  (0.15.0 -> 0.16.0) [CRAN]\n",
            "tidyselect  (1.2.0  -> 1.2.1 ) [CRAN]\n",
            "whisker     (0.4    -> 0.4.1 ) [CRAN]\n",
            "config      (NA     -> 0.3.2 ) [CRAN]\n",
            "tfautograph (NA     -> 0.3.2 ) [CRAN]\n",
            "tfruns      (NA     -> 1.5.3 ) [CRAN]\n",
            "processx    (3.8.3  -> 3.8.4 ) [CRAN]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing 15 packages: rlang, png, here, RcppTOML, Rcpp, cli, backports, reticulate, rstudioapi, tidyselect, whisker, config, tfautograph, tfruns, processx\n",
            "\n",
            "Installing packages into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[36m──\u001b[39m \u001b[36mR CMD build\u001b[39m \u001b[36m─────────────────────────────────────────────────────────────────\u001b[39m\n",
            "* checking for file ‘/tmp/Rtmpa90Uuv/remotesb13c88dc59/rstudio-tensorflow-b68aa4a/DESCRIPTION’ ... OK\n",
            "* preparing ‘tensorflow’:\n",
            "* checking DESCRIPTION meta-information ... OK\n",
            "* checking for LF line-endings in source and make files and shell scripts\n",
            "* checking for empty or unneeded directories\n",
            "* building ‘tensorflow_2.16.0.9000.tar.gz’\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "also installing the dependencies ‘iterators’, ‘foreach’, ‘shape’, ‘RcppEigen’\n",
            "\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "also installing the dependencies ‘listenv’, ‘parallelly’, ‘future’, ‘globals’, ‘future.apply’, ‘numDeriv’, ‘progressr’, ‘SQUAREM’, ‘diagram’, ‘lava’, ‘prodlim’, ‘proxy’, ‘clock’, ‘gower’, ‘hardhat’, ‘ipred’, ‘timeDate’, ‘e1071’, ‘ModelMetrics’, ‘plyr’, ‘pROC’, ‘recipes’, ‘reshape2’\n",
            "\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "also installing the dependency ‘zeallot’\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TgWpXdSIl5KL"
      },
      "source": [
        "##Getting to know BERT\n",
        "\n",
        "BERT, and many of its variants, are made avialable to the public by the open source [Huggingface Transformers](https://huggingface.co/transformers/) project. This is an amazing resource, giving researchers and practitioners easy-to-use access to this technology.\n",
        "\n",
        "In order to use BERT for modeling, we simply need to download the pre-trained neural network and fine tune it on our dataset, which is illustrated below."
      ],
      "id": "TgWpXdSIl5KL"
    },
    {
      "cell_type": "code",
      "source": [
        "library(reticulate)\n",
        "library(ggplot2)\n",
        "library(DBI)\n",
        "library(dplyr)\n",
        "theme_set(theme_bw())"
      ],
      "metadata": {
        "id": "ppJlcoIatlAw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a5cbcea-04c9-4c67-ccb1-1b45e691ccf8",
        "collapsed": true
      },
      "id": "ppJlcoIatlAw",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n",
            "Attaching package: ‘dplyr’\n",
            "\n",
            "\n",
            "The following objects are masked from ‘package:stats’:\n",
            "\n",
            "    filter, lag\n",
            "\n",
            "\n",
            "The following objects are masked from ‘package:base’:\n",
            "\n",
            "    intersect, setdiff, setequal, union\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "use_python(\"/usr/bin/python3\", required = TRUE)  # Adjust the path as needed"
      ],
      "metadata": {
        "id": "GmOhRKEG4jEy"
      },
      "id": "GmOhRKEG4jEy",
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "py_run_string('\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from transformers import BertTokenizer, TFBertModel\n",
        "import warnings\n",
        "warnings.simplefilter(\"ignore\")\n",
        "')"
      ],
      "metadata": {
        "id": "bUEb1TDIs4TK"
      },
      "id": "bUEb1TDIs4TK",
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check GPU availability\n",
        "# py_run_string('\n",
        "# device_name = tf.test.gpu_device_name()\n",
        "# if device_name != \"/device:GPU:0\":\n",
        "#   raise SystemError(\"GPU device not found\")\n",
        "# print(\"Found GPU at:\", device_name)\n",
        "# ')"
      ],
      "metadata": {
        "id": "A7HTpjkA4u54",
        "collapsed": true
      },
      "id": "A7HTpjkA4u54",
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ssq <- function(x) sum(x * x)\n",
        "\n",
        "get_r2 <- function(y, yhat) {\n",
        "  resids <- yhat - y\n",
        "  flucs <- y - mean(y)\n",
        "  rss <- ssq(resids)\n",
        "  tss <- ssq(flucs)\n",
        "  cat(sprintf(\"RSS: %f, TSS + MEAN^2: %f, TSS: %f, R^2: %f\", rss, tss + mean(y)^2, tss, 1 - rss/tss))\n",
        "}"
      ],
      "metadata": {
        "id": "hZaltj7Fv5Gh"
      },
      "id": "hZaltj7Fv5Gh",
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "py_run_string('\n",
        "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
        "bert = TFBertModel.from_pretrained(\"bert-base-uncased\")\n",
        "')"
      ],
      "metadata": {
        "id": "CB3ur5xF41o-"
      },
      "id": "CB3ur5xF41o-",
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "26mRwUFwardQ"
      },
      "source": [
        "### Tokenization\n",
        "\n",
        "The first step in using BERT (or any similar text embedding tool) is to *tokenize* the data. This step standardizes blocks of text, so that meaningless differences in text presentation don't affect the behavior of our algorithm.\n",
        "\n",
        "Typically the text is transformed into a sequence of 'tokens,' each of which corresponds to a numeric code."
      ],
      "id": "26mRwUFwardQ"
    },
    {
      "cell_type": "code",
      "source": [
        "py_run_string('\n",
        "s = \"What happens to this string?\"\n",
        "tensors = tokenizer.encode_plus(s, add_special_tokens = True, return_tensors = \"tf\")\n",
        "output = bert(tensors)\n",
        "')"
      ],
      "metadata": {
        "id": "cER5mL4fMSCr"
      },
      "id": "cER5mL4fMSCr",
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's try it out!\n",
        "s <- \"What happens to this string?\"\n",
        "py_run_string\n",
        "input_ids <- py$tensors$input_ids\n",
        "attention_mask <- py$tensors$attention_mask\n",
        "token_type_ids <- py$tensors$token_type_ids\n",
        "\n",
        "print(sprintf('Original String: \"%s\"', s))\n",
        "print(\"Numeric encoding: \")\n",
        "print(list(\n",
        "  input_ids = input_ids,\n",
        "  attention_mask = attention_mask,\n",
        "  token_type_ids = token_type_ids\n",
        "))\n",
        "# What does this mean?\n",
        "py_run_string('tokens = tokenizer.convert_ids_to_tokens(tensors[\"input_ids\"].numpy().flatten().tolist())')\n",
        "tokens <- py$tokens\n",
        "print(\"Actual tokens:\")\n",
        "print(tokens)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "id": "KVETer7w5euE",
        "outputId": "3b7b87f7-69f4-4727-bccf-3bd8d6162e00"
      },
      "id": "KVETer7w5euE",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<pre class=language-r><code>function (code, local = FALSE, convert = TRUE) \n",
              "{\n",
              "<span style=white-space:pre-wrap>    invisible(py_run_string_impl(code, local, convert))</span>\n",
              "}</code></pre>"
            ],
            "text/markdown": "```r\nfunction (code, local = FALSE, convert = TRUE) \n{\n    invisible(py_run_string_impl(code, local, convert))\n}\n```",
            "text/latex": "\\begin{minted}{r}\nfunction (code, local = FALSE, convert = TRUE) \n\\{\n    invisible(py\\_run\\_string\\_impl(code, local, convert))\n\\}\n\\end{minted}",
            "text/plain": [
              "function (code, local = FALSE, convert = TRUE) \n",
              "{\n",
              "    invisible(py_run_string_impl(code, local, convert))\n",
              "}\n",
              "<bytecode: 0x56cf0e623640>\n",
              "<environment: namespace:reticulate>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1] \"Original String: \\\"What happens to this string?\\\"\"\n",
            "[1] \"Numeric encoding: \"\n",
            "$input_ids\n",
            "<tf.Tensor: shape=(1, 8), dtype=int32, numpy=array([[ 101, 2054, 6433, 2000, 2023, 5164, 1029,  102]], dtype=int32)>\n",
            "\n",
            "$attention_mask\n",
            "<tf.Tensor: shape=(1, 8), dtype=int32, numpy=array([[1, 1, 1, 1, 1, 1, 1, 1]], dtype=int32)>\n",
            "\n",
            "$token_type_ids\n",
            "<tf.Tensor: shape=(1, 8), dtype=int32, numpy=array([[0, 0, 0, 0, 0, 0, 0, 0]], dtype=int32)>\n",
            "\n",
            "[1] \"Actual tokens:\"\n",
            "[1] \"[CLS]\"   \"what\"    \"happens\" \"to\"      \"this\"    \"string\"  \"?\"      \n",
            "[8] \"[SEP]\"  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JJaz6eEocefa"
      },
      "source": [
        "### BERT in a nutshell\n",
        "\n",
        "Once we have our numeric tokens, we can simply plug them into the BERT network and get a numeric vector summary. Note that in applications, the BERT summary will be \"fine tuned\" to a particular task, which hasn't happened yet."
      ],
      "id": "JJaz6eEocefa"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "Q1ODAgBMa3Zg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7ccd4481-6489-4830-c86b-a3c40cb1c37c",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input: \"What happens to this string?\"\n",
            "\n",
            "Output type: <class 'tensorflow.python.framework.ops.EagerTensor'>\n",
            "\n",
            "Output shape: (1, 768)\n",
            "\n",
            "Output preview: array([[-0.969214  , -0.5247471 , -0.921133  ,  0.91463196,  0.51964986,\n",
            "        -0.32456928,  0.9706122 ,  0.49300137, -0.82831514, -0.99999857,\n",
            "        -0.3816222 ,  0.9569837 ,  0.9913891 ,  0.70681006,  0.98294646,\n",
            "        -0.9001979 , -0.6150293 , -0.7787723 ,  0.46308163, -0.82709247,\n",
            "         0.8457982 ,  0.9999907 ,  0.08221605,  0.5372562 ,  0.6345672 ,\n",
            "         0.9896697 , -0.87372965,  0.9743809 ,  0.98041123,  0.8377358 ,\n",
            "        -0.87578595,  0.34426346, -0.9932326 , -0.32497373, -0.9177454 ,\n",
            "        -0.99635667,  0.5514211 , -0.8553031 , -0.14537612, -0.15756267,\n",
            "        -0.94222736,  0.3940587 ,  0.9999956 , -0.15938273,  0.56559354,\n",
            "        -0.49784598, -1.        ,  0.45159677, -0.94606155,  0.9138866 ,\n",
            "         0.894105  ,  0.8145405 ,  0.34917742,  0.6689711 ,  0.63060194,\n",
            "        -0.44194648,  0.07209369,  0.25390887, -0.41195402, -0.73743373,\n",
            "        -0.75841326,  0.607392  , -0.8874512 , -0.9479397 ,  0.9202822 ,\n",
            "         0.8419094 , -0.27363837, -0.4571576 , -0.30537918,  0.13075443,\n",
            "         0.966184  ,  0.33864886, -0.19612612, -0.9207082 ,  0.7088074 ,\n",
            "         0.45681113, -0.77244145,  1.        , -0.79896045, -0.9872875 ,\n",
            "         0.776911  ,  0.8458453 ,  0.71652466, -0.41961768,  0.6352247 ,\n",
            "        -1.        ,  0.67543024, -0.20674996, -0.99473673,  0.45124725,\n",
            "         0.56537026, -0.35305175,  0.5736773 ,  0.7470167 , -0.7259696 ,\n",
            "        -0.6088721 , -0.47434014, -0.8264615 , -0.36119705, -0.46513397,\n",
            "         0.17759693, -0.42618233, -0.5134769 , -0.5112346 ,  0.507512  ,\n",
            "        -0.6803123 , -0.78912073,  0.56096   ,  0.31418112,  0.8256635 ,\n",
            "         0.6137928 , -0.48744348,  0.63172615, -0.97583294,  0.804665  ,\n",
            "        -0.5379689 , -0.9944425 , -0.7640108 , -0.9945089 ,  0.79497546,\n",
            "        -0.5527532 , -0.38338676,  0.9836922 , -0.21038826,  0.5786874 ,\n",
            "        -0.4175546 , -0.90507156, -1.        , -0.80496746, -0.67468506,\n",
            "        -0.33667699, -0.44921163, -0.9891523 , -0.9734636 ,  0.7879726 ,\n",
            "         0.98081094,  0.34198916,  0.99997675, -0.47837928,  0.96807194,\n",
            "        -0.31762508, -0.6842363 ,  0.6482304 , -0.62070376,  0.851923  ,\n",
            "         0.5820076 , -0.8776717 ,  0.3753403 , -0.43739372,  0.38933575,\n",
            "        -0.84821516, -0.42670748, -0.8712478 , -0.9629567 , -0.5227983 ,\n",
            "         0.9735279 , -0.58774203, -0.9501498 , -0.04851773, -0.4030671 ,\n",
            "        -0.6616436 ,  0.937181  ,  0.8399379 ,  0.5786255 , -0.53851986,\n",
            "         0.608611  ,  0.5894956 ,  0.6932158 , -0.9471889 , -0.08071883,\n",
            "         0.61745256, -0.48077726, -0.85866666, -0.9854245 , -0.54912895,\n",
            "         0.70028615,  0.99461323,  0.8898859 ,  0.47220692,  0.83854306,\n",
            "        -0.50452465,  0.7651799 , -0.9775896 ,  0.98937917, -0.292829  ,\n",
            "         0.3849252 , -0.320667  ,  0.42379427, -0.93404233,  0.20117493,\n",
            "         0.9306183 , -0.5900559 , -0.8919762 , -0.2591962 , -0.56046534,\n",
            "        -0.6167952 , -0.7926062 ,  0.67214435, -0.43549895, -0.51297027,\n",
            "        -0.20104748,  0.9576271 ,  0.9956705 ,  0.87649155,  0.2149536 ,\n",
            "         0.81554365, -0.9258257 , -0.7148402 ,  0.3126772 ,  0.4378628 ,\n",
            "         0.21117692,  0.9972139 , -0.6545783 , -0.34187165, -0.97159296,\n",
            "        -0.9917849 ,  0.13874346, -0.95807856, -0.24090737, -0.8362934 ,\n",
            "         0.83134925, -0.02485377,  0.5902031 ,  0.66127837, -0.9960211 ,\n",
            "        -0.9039419 ,  0.57700354, -0.6185345 ,  0.6124113 , -0.4798829 ,\n",
            "         0.7660803 ,  0.9616995 , -0.7682784 ,  0.9197671 ,  0.9530273 ,\n",
            "        -0.86191773, -0.8475627 ,  0.94052964, -0.4518577 ,  0.9570647 ,\n",
            "        -0.7576784 ,  0.99691117,  0.9099429 ,  0.8641262 , -0.96159774,\n",
            "        -0.75002694, -0.9515814 , -0.8360319 , -0.13117565,  0.2420047 ,\n",
            "         0.9326485 ,  0.7831623 ,  0.55954635,  0.29953393, -0.7969798 ,\n",
            "         0.999857  , -0.8307854 , -0.9768555 ,  0.11506277, -0.3768013 ,\n",
            "        -0.9939753 ,  0.91130793,  0.42434266,  0.27517143, -0.6154874 ,\n",
            "        -0.86753005, -0.98156863,  0.9588888 ,  0.36419028,  0.99798036,\n",
            "        -0.5174248 , -0.9825296 , -0.76033354, -0.96041787,  0.01664599,\n",
            "        -0.38303357, -0.28204   , -0.07684401, -0.97971845,  0.67197174,\n",
            "         0.7270586 ,  0.6505339 , -0.863773  ,  0.99991965,  1.        ,\n",
            "         0.9831044 ,  0.95112723,  0.9671731 , -0.9999366 , -0.47617579,\n",
            "         0.9999995 , -0.9957464 , -1.        , -0.9702093 , -0.7724236 ,\n",
            "         0.5686776 , -1.        , -0.44194952, -0.19867025, -0.9511127 ,\n",
            "         0.7548529 ,  0.98874015,  0.99917936, -1.        ,  0.9133393 ,\n",
            "         0.9748863 , -0.78451705,  0.9694428 , -0.60926914,  0.98597527,\n",
            "         0.73211765,  0.6097775 , -0.41699415,  0.5658006 , -0.9509543 ,\n",
            "        -0.94915485, -0.69839555, -0.7952085 ,  0.99812067,  0.37889785,\n",
            "        -0.9252992 , -0.95140046,  0.60411584, -0.2677717 , -0.19147323,\n",
            "        -0.97972316, -0.28978664,  0.7013556 ,  0.8766078 ,  0.25837412,\n",
            "         0.47869623, -0.86088717,  0.36461812,  0.08905052,  0.5959429 ,\n",
            "         0.80502397, -0.9765572 , -0.82025707, -0.05646016, -0.20963307,\n",
            "        -0.7015158 , -0.9814151 ,  0.981326  , -0.58565354,  0.88929856,\n",
            "         1.        ,  0.45330504, -0.94868374,  0.7073493 ,  0.45062408,\n",
            "        -0.5440919 ,  1.        ,  0.8821116 , -0.9873539 , -0.7220794 ,\n",
            "         0.75933313, -0.76312953, -0.7806591 ,  0.999871  , -0.45650977,\n",
            "        -0.7414432 , -0.62843347,  0.9847614 , -0.9941429 ,  0.9960819 ,\n",
            "        -0.9639135 , -0.98231494,  0.9804208 ,  0.966725  , -0.7936699 ,\n",
            "        -0.7981794 ,  0.37011516, -0.8434755 ,  0.46403134, -0.9849263 ,\n",
            "         0.8601775 ,  0.75816876, -0.2712624 ,  0.9483012 , -0.9555475 ,\n",
            "        -0.7290788 ,  0.5245557 , -0.7172286 , -0.16985686,  0.9483513 ,\n",
            "         0.68013823, -0.39875364,  0.24682792, -0.4570932 , -0.579493  ,\n",
            "        -0.99015033,  0.51719975,  1.        , -0.31598833,  0.7676579 ,\n",
            "        -0.6707193 , -0.21699165,  0.03049472,  0.68588054,  0.74038446,\n",
            "        -0.43400556, -0.9253986 ,  0.7652241 , -0.9887925 , -0.9929267 ,\n",
            "         0.8894325 ,  0.3060767 , -0.5071547 ,  1.        ,  0.6168672 ,\n",
            "         0.34638077,  0.4324086 ,  0.98720336,  0.16241549,  0.73432744,\n",
            "         0.90731424,  0.991909  , -0.40463305,  0.716668  ,  0.94364953,\n",
            "        -0.94109166, -0.47788474, -0.8124714 ,  0.08105253, -0.9579067 ,\n",
            "        -0.13010952, -0.97531664,  0.98324805,  0.92016804,  0.6030984 ,\n",
            "         0.41097453,  0.5904851 ,  1.        , -0.5345653 ,  0.7872861 ,\n",
            "        -0.6765484 ,  0.9543399 , -0.9998312 , -0.946341  , -0.54018164,\n",
            "        -0.23017377, -0.8565407 , -0.46756762,  0.47398734, -0.9830405 ,\n",
            "         0.81026053,  0.6330656 , -0.9979726 , -0.9962177 , -0.12355503,\n",
            "         0.9419812 ,  0.26598173, -0.9904067 , -0.8542188 , -0.69247544,\n",
            "         0.74725544, -0.51003075, -0.9649188 , -0.25007054, -0.4905193 ,\n",
            "         0.63271457, -0.37441203,  0.70345974,  0.8695898 ,  0.5029391 ,\n",
            "        -0.5380263 , -0.33281726, -0.23805283, -0.9059604 ,  0.95224476,\n",
            "        -0.9431482 , -0.89280534, -0.42554915,  1.        , -0.7899458 ,\n",
            "         0.9125757 ,  0.9127243 ,  0.8982813 , -0.35490638,  0.4078732 ,\n",
            "         0.9253425 ,  0.38586822, -0.85559326, -0.9025214 , -0.9011115 ,\n",
            "        -0.60153526,  0.85533476,  0.59665257,  0.81345993,  0.8964449 ,\n",
            "         0.7443972 ,  0.27125114, -0.20871066,  0.27481025,  0.99998266,\n",
            "        -0.2840492 , -0.29991323, -0.7458876 , -0.20509811, -0.5339975 ,\n",
            "        -0.7270546 ,  1.        ,  0.48854077,  0.64012146, -0.99460614,\n",
            "        -0.8695033 , -0.9664111 ,  1.        ,  0.905261  , -0.88474786,\n",
            "         0.8443341 ,  0.595781  , -0.3124752 ,  0.93808615, -0.33896095,\n",
            "        -0.41890037,  0.46116385,  0.2836125 ,  0.9736608 , -0.73128635,\n",
            "        -0.9826918 , -0.7349575 ,  0.6490712 , -0.98314494,  0.9999535 ,\n",
            "        -0.72397393, -0.523643  , -0.5632338 , -0.30314294,  0.7867379 ,\n",
            "         0.07749737, -0.99158907, -0.32926816,  0.31927675,  0.978824  ,\n",
            "         0.44623816, -0.74046755, -0.9677978 ,  0.7664044 ,  0.81417197,\n",
            "        -0.931385  , -0.95153093,  0.9802107 , -0.99172   ,  0.7891608 ,\n",
            "         1.        ,  0.49714422, -0.12492784,  0.36447287, -0.7481762 ,\n",
            "         0.49326956, -0.25167897,  0.8847678 , -0.976958  , -0.49024653,\n",
            "        -0.34821123,  0.40166238, -0.31271335, -0.24131863,  0.80776453,\n",
            "         0.28327364, -0.71646124, -0.7461512 , -0.36569625,  0.65089214,\n",
            "         0.95127594, -0.4239073 , -0.3882214 ,  0.33418632, -0.3306449 ,\n",
            "        -0.97719604, -0.49457264, -0.60294574, -0.99999803,  0.85043633,\n",
            "        -1.        ,  0.47601175,  0.28597838, -0.42246222,  0.925224  ,\n",
            "         0.45430136,  0.75456715, -0.8798291 , -0.8653055 ,  0.33285752,\n",
            "         0.8717118 , -0.47331586, -0.51333266, -0.8749331 ,  0.5257795 ,\n",
            "        -0.22822788,  0.32426873, -0.60738736,  0.87474453, -0.44259733,\n",
            "         1.        ,  0.37895727, -0.8666054 , -0.992649  ,  0.33378804,\n",
            "        -0.4953156 ,  1.        , -0.9816087 , -0.9676157 ,  0.57130563,\n",
            "        -0.87143755, -0.9153314 ,  0.4464076 ,  0.21691309, -0.82991815,\n",
            "        -0.94637966,  0.9853671 ,  0.97283095, -0.72234654,  0.62565166,\n",
            "        -0.51548594, -0.72417736,  0.12238231,  0.8079959 ,  0.9913893 ,\n",
            "         0.56857324,  0.972528  ,  0.18605296, -0.332497  ,  0.9861151 ,\n",
            "         0.38999626,  0.7957976 ,  0.2695957 ,  1.        ,  0.54275763,\n",
            "        -0.95341367,  0.15813261, -0.99422103, -0.36610997, -0.9807028 ,\n",
            "         0.45175987,  0.43771988,  0.95341367, -0.3477924 ,  0.9871621 ,\n",
            "        -0.80394137,  0.13630904, -0.7316009 , -0.42436185,  0.5563093 ,\n",
            "        -0.9603625 , -0.99102366, -0.9926393 ,  0.7987094 , -0.60799867,\n",
            "        -0.2829846 ,  0.34003675,  0.30692574,  0.5922452 ,  0.55965894,\n",
            "        -1.        ,  0.9650474 ,  0.586469  ,  0.9308493 ,  0.97693413,\n",
            "         0.81679493,  0.6935902 ,  0.3594853 , -0.99401385, -0.99560463,\n",
            "        -0.4776145 , -0.44716814,  0.8899843 ,  0.80234253,  0.9501147 ,\n",
            "         0.60127044, -0.6393888 , -0.53501534, -0.5651595 , -0.5560495 ,\n",
            "        -0.9964298 ,  0.5939859 , -0.7229713 , -0.9930243 ,  0.9788234 ,\n",
            "        -0.06926313, -0.31818512, -0.08477148, -0.81810784,  0.9833096 ,\n",
            "         0.88363856,  0.6447559 ,  0.24477816,  0.69223064,  0.94665855,\n",
            "         0.9869473 ,  0.9916134 , -0.8412526 ,  0.92761016, -0.6290666 ,\n",
            "         0.6587624 ,  0.7275249 , -0.96384245,  0.25654906,  0.6279618 ,\n",
            "        -0.62836856,  0.43710572, -0.43389598, -0.9941003 ,  0.7835287 ,\n",
            "        -0.42459017,  0.7451301 , -0.55962986, -0.12343442, -0.5661953 ,\n",
            "        -0.33871347, -0.8647836 , -0.8123264 ,  0.7892974 ,  0.678103  ,\n",
            "         0.92779475,  0.7987918 , -0.17816365, -0.85906523, -0.33404765,\n",
            "        -0.84278965, -0.94070536,  0.9852418 , -0.30863348, -0.5421796 ,\n",
            "         0.6880254 ,  0.07184966,  0.81081134,  0.2298809 , -0.56959224,\n",
            "        -0.53890955, -0.8816053 ,  0.9449031 , -0.5475274 , -0.73295534,\n",
            "        -0.73966575,  0.7808232 ,  0.4786223 ,  0.99999666, -0.82445186,\n",
            "        -0.915314  , -0.42598093, -0.48665914,  0.5250293 , -0.6174287 ,\n",
            "        -1.        ,  0.655752  , -0.3137039 ,  0.77189934, -0.7153862 ,\n",
            "         0.8287944 , -0.7801402 , -0.994018  , -0.4000655 ,  0.52331597,\n",
            "         0.784202  , -0.6928701 , -0.7076483 ,  0.75868523, -0.11197665,\n",
            "         0.9726137 ,  0.9263615 , -0.5616764 ,  0.07877975,  0.78827417,\n",
            "        -0.7552874 , -0.82799286,  0.96749127]], dtype=float32)\n"
          ]
        }
      ],
      "source": [
        "# Load the reticulate library\n",
        "library(reticulate)\n",
        "\n",
        "input_text <- \"What happens to this string?\"\n",
        "\n",
        "\n",
        "cat(sprintf(\"Input: \\\"%s\\\"\\n\\n\", input_text))\n",
        "\n",
        "py_run_string(sprintf('\n",
        "tensors_tf = tokenizer(\"%s\", return_tensors=\"tf\")\n",
        "output = bert(tensors_tf)\n",
        "', input_text))\n",
        "\n",
        "output <- py$output\n",
        "\n",
        "py_run_string('\n",
        "from pprint import pformat\n",
        "output_type = str(type(output[\"pooler_output\"]))\n",
        "output_shape = output[\"pooler_output\"].shape\n",
        "output_preview = pformat(output[\"pooler_output\"].numpy())\n",
        "')\n",
        "\n",
        "output_type <- py$output_type\n",
        "output_shape <- py$output_shape\n",
        "output_preview <- py$output_preview\n",
        "\n",
        "cat(sprintf(\n",
        "\"Output type: %s\\n\\nOutput shape: %s\\n\\nOutput preview: %s\\n\",\n",
        "output_type,\n",
        "paste(output_shape, collapse=\", \"),\n",
        "output_preview\n",
        "))\n"
      ],
      "id": "Q1ODAgBMa3Zg"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y_CnEClsl_1p"
      },
      "source": [
        "# A practical introduction to BERT\n",
        "\n",
        "In the next part of the notebook, we are going to explore how a tool like BERT may be useful for causal inference.\n",
        "\n",
        "In particular, we are going to apply BERT to a subset of data from the Amazon marketplace consisting of roughly 10,000 listings for products in the toy category. Each product comes with a text description, a price, and a number of times reviewed (which we'll use as a proxy for demand / market share).\n",
        "\n",
        "For more information on the dataset, checkout the [Dataset README](https://github.com/CausalAIBook/MetricsMLNotebooks/blob/main/data/amazon_toys.md).\n",
        "\n",
        "**For thought**:\n",
        "What are some issues you may anticipate when using number of reviews as a proxy for demand or market share?\n",
        "\n",
        "### Getting to know the data\n",
        "\n",
        "First, we'll download and clean up the data, and do some preliminary inspection."
      ],
      "id": "y_CnEClsl_1p"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_d5eA3xyzdtb"
      },
      "id": "_d5eA3xyzdtb",
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "library(readr)\n",
        "library(stringr)\n",
        "library(tidyr)\n",
        "library(purrr)\n",
        "data_url <- \"https://github.com/CausalAIBook/MetricsMLNotebooks/raw/main/data/amazon_toys.csv\"\n",
        "data <- read_csv(data_url, show_col_types = FALSE)\n",
        "problems(data)\n",
        "\n",
        "data <- data %>%\n",
        "  mutate(\n",
        "    number_of_reviews = as.numeric(str_replace_all(number_of_reviews, \",\", \"\"))\n",
        "  )\n"
      ],
      "metadata": {
        "id": "5kzXygwH0BKw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 247
        },
        "outputId": "f368dd28-317f-4815-d05b-a0c2ce7f05d6"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Warning message:\n",
            "“\u001b[1m\u001b[22mOne or more parsing issues, call `problems()` on your data frame for details,\n",
            "e.g.:\n",
            "  dat <- vroom(...)\n",
            "  problems(dat)”\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<table class=\"dataframe\">\n",
              "<caption>A tibble: 2 × 5</caption>\n",
              "<thead>\n",
              "\t<tr><th scope=col>row</th><th scope=col>col</th><th scope=col>expected</th><th scope=col>actual</th><th scope=col>file</th></tr>\n",
              "\t<tr><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th></tr>\n",
              "</thead>\n",
              "<tbody>\n",
              "\t<tr><td>8874</td><td>6</td><td>a double</td><td>1,040</td><td></td></tr>\n",
              "\t<tr><td>9317</td><td>6</td><td>a double</td><td>1,399</td><td></td></tr>\n",
              "</tbody>\n",
              "</table>\n"
            ],
            "text/markdown": "\nA tibble: 2 × 5\n\n| row &lt;int&gt; | col &lt;int&gt; | expected &lt;chr&gt; | actual &lt;chr&gt; | file &lt;chr&gt; |\n|---|---|---|---|---|\n| 8874 | 6 | a double | 1,040 | <!----> |\n| 9317 | 6 | a double | 1,399 | <!----> |\n\n",
            "text/latex": "A tibble: 2 × 5\n\\begin{tabular}{lllll}\n row & col & expected & actual & file\\\\\n <int> & <int> & <chr> & <chr> & <chr>\\\\\n\\hline\n\t 8874 & 6 & a double & 1,040 & \\\\\n\t 9317 & 6 & a double & 1,399 & \\\\\n\\end{tabular}\n",
            "text/plain": [
              "  row  col expected actual file\n",
              "1 8874 6   a double 1,040      \n",
              "2 9317 6   a double 1,399      "
            ]
          },
          "metadata": {}
        }
      ],
      "id": "5kzXygwH0BKw"
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "1Su5vOGhD3Df",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "577bbbd9-1a7d-4f7e-d9bd-decd46830dc0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[90m# A tibble: 6 × 4\u001b[39m\n",
            "  text                                        ln_p   ln_q amazon_category_and_…¹\n",
            "  \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m                                      \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m  \u001b[3m\u001b[90m<dbl>\u001b[39m\u001b[23m \u001b[3m\u001b[90m<chr>\u001b[39m\u001b[23m                 \n",
            "\u001b[90m1\u001b[39m Hornby 2014 Catalogue | Hornby | Product …  1.23  -\u001b[31m8\u001b[39m\u001b[31m.\u001b[39m\u001b[31m69\u001b[39m Hobbies > Model Train…\n",
            "\u001b[90m2\u001b[39m FunkyBuys® Large Christmas Holiday Expres…  2.83 -\u001b[31m10\u001b[39m\u001b[31m.\u001b[39m\u001b[31m7\u001b[39m  Hobbies > Model Train…\n",
            "\u001b[90m3\u001b[39m CLASSIC TOY TRAIN SET TRACK CARRIAGES LIG…  2.30  -\u001b[31m8\u001b[39m\u001b[31m.\u001b[39m\u001b[31m56\u001b[39m Hobbies > Model Train…\n",
            "\u001b[90m4\u001b[39m HORNBY Coach R4410A BR Hawksworth Corrido…  3.69 -\u001b[31m11\u001b[39m\u001b[31m.\u001b[39m\u001b[31m4\u001b[39m  Hobbies > Model Train…\n",
            "\u001b[90m5\u001b[39m Hornby 00 Gauge 0-4-0 Gildenlow Salt Co. …  3.47 -\u001b[31m10\u001b[39m\u001b[31m.\u001b[39m\u001b[31m3\u001b[39m  Hobbies > Model Train…\n",
            "\u001b[90m6\u001b[39m 20pcs Model Garden Light Double Heads Lam…  1.94 -\u001b[31m10\u001b[39m\u001b[31m.\u001b[39m\u001b[31m7\u001b[39m  Hobbies > Model Train…\n",
            "\u001b[90m# ℹ abbreviated name: ¹​amazon_category_and_sub_category\u001b[39m\n",
            "99% \n",
            "316 \n"
          ]
        }
      ],
      "source": [
        "data <- data %>%\n",
        "  mutate(\n",
        "    number_of_reviews = as.numeric(str_replace_all(number_of_reviews, \"\\\\D+\", \"\")),\n",
        "    price = as.numeric(str_extract(price, \"\\\\d+\\\\.?\\\\d*\"))\n",
        "  ) %>%\n",
        "  filter(number_of_reviews > 0) %>%\n",
        "  mutate(\n",
        "    ln_p = log(price),\n",
        "    ln_q = log(number_of_reviews / sum(number_of_reviews)),\n",
        "    text = str_c(product_name, manufacturer, product_description, sep = \" | \")\n",
        "  ) %>%\n",
        "  select(text, ln_p, ln_q, amazon_category_and_sub_category) %>%\n",
        "  drop_na()\n",
        "print(head(data))\n",
        "data$text_num_words <- str_split(data$text, \"\\\\s+\") %>% map_int(length)\n",
        "print(quantile(data$text_num_words, 0.99, na.rm = TRUE))"
      ],
      "id": "1Su5vOGhD3Df"
    },
    {
      "cell_type": "code",
      "source": [
        "ggplot(data, aes(x = text_num_words)) +\n",
        "  geom_density() +\n",
        "  labs(title = \"Density Plot of Text Lengths in Words\")"
      ],
      "metadata": {
        "id": "lovFEHaWp4lC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "outputId": "2c191aaa-d7ed-4b62-ef28-c513fabfab05"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "plot without title"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAMAAADKOT/pAAADAFBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dISEhJSUlKSkpLS0tM\nTExNTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1e\nXl5fX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29w\ncHBxcXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGC\ngoKDg4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OU\nlJSVlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWm\npqanp6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrKzs7O0tLS1tbW2tra3t7e4\nuLi5ubm6urq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnK\nysrLy8vMzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc\n3Nzd3d3e3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u\n7u7v7+/w8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7////i\nsF19AAAACXBIWXMAABJ0AAASdAHeZh94AAAgAElEQVR4nO2deYBN5f/HPzMMwlgKyZKkEhE1\nfRUViUrZE4oQUqIiKopCiiylKEmlfaONSr5CRV/RYikRWQvFNWMWM5Yx8/zuucvcc5dzzznP\n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"
          },
          "metadata": {
            "image/png": {
              "width": 420,
              "height": 420
            }
          }
        }
      ],
      "id": "lovFEHaWp4lC"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CDlHPQZfcv7I"
      },
      "source": [
        "Let's make a two-way scatter plot of prices and (proxied) market shares."
      ],
      "id": "CDlHPQZfcv7I"
    },
    {
      "cell_type": "code",
      "source": [
        "p1 <- ggplot(data, aes(x = ln_p, y = ln_q)) +\n",
        "  geom_point() +\n",
        "  geom_smooth(method = \"lm\", color = \"red\") +\n",
        "  labs(title = \"Scatter Plot with Regression Line\")\n",
        "print(p1)"
      ],
      "metadata": {
        "id": "dNujhir1q_0N",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "outputId": "06ba2da1-4ffc-4dc4-d762-f0bd6cdc039c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`geom_smooth()` using formula = 'y ~ x'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "plot without title"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzdZ0BTV9gH8BMCIWGDIA4cKC5wCw7EPRBtq1gVARUVW9FqVcSqVaugIFZE\nrNZRFbeideDeigMcqCAi4BYcqOw9QpL3w33fNG8SIECSm4T/71Py5Nx7ntwbkoc7zmEIBAIC\nAAAAAOpPi+4EAAAAAEA+UNgBAAAAaAgUdgAAAAAaAoUdAAAAgIZAYQcAAACgIVDYAQAAAGgI\nFHYAAAAAGgKFnSZYvnw5g8HYsmULvWksWbKEwWBs3769sgbBwcEMBiMkJESZWamjarekMqlU\nMgAAUDX1LuwSExNnz57drVu3Ro0a6ejoGBoaduzYcdasWcnJyYro7sCBA2fOnKk6Ii/x8fEM\nCSwWy8rKasKECXfu3Kl7F3JP3tTUtEWLFoaGhvLtQuqmYDAYenp67du3/+WXX16/fl3HLlSN\n5JZUEGrb2tjYqEIyAABQdwz1nXni0KFD06ZN43K5Xbp06datm56e3rdv32JiYj5//qyrq3vq\n1CkXFxf59ti4ceNRo0bt2rWrioi8xMfHd+vWzcDAYNSoUcJgdnZ2SkrKhw8fGAxGWFjYr7/+\nSsWXL18eGBi4efPmOXPmyN6F4pKvrIvg4OClS5euX7/ez89P9pVI3RQCgeDr168JCQk5OTkc\nDufMmTNDhw6Vc/b1ALVtW7durXnFMQBA/aRNdwK1lJeXN3PmTD6ff/z48R9//FEY5/P5a9as\nWblypY+Pz5s3b7S15fYG3759++XLl6ojcmdpaRkRESEa4fP5W7dunTt37qJFi1xdXZs1a1a7\nNSshefl2IbkpCCHFxcV+fn7btm3z9vZ+9+6dlpZ6H4EGAACoI3X9IYyLiysqKnJwcBCt6ggh\nWlpaf/zxh5eX17hx4zIyMoRxqh5ycHAwMDAwNDQcMmTI7du3RRfMz89funRphw4dOByOrq5u\nmzZtFi1alJ+fT706bty41q1bE0J2797NYDCcnJwkI1RLgUCwa9euPn36GBoacjicDh06rFix\noqioSNjRsmXLGAzGmTNntm7d2rRpUxMTkxq9cS0trTlz5gwePLi8vPzChQuVNeNyuZs2bXJw\ncDA0NGSz2TY2NnPmzPn8+XNlb0dyDU2bNuVwOOXl5cJIbGwsdQ7006dPwmBGRoaWlpaDgwP5\n/xdjVdEFk8lMSkr67rvvTE1NORxO165djx49WqONIKSnp7dlyxYjI6O0tLRnz54J49XuBUJI\nWlqah4eHhYWFnp6eg4PDyZMns7OzGQxGr169qAaV7SlZVn78+PHBgwebmZmxWKwmTZq4uLhc\nvHhR9gaSl7VVvUMJIStWrKCyff78uaura8OGDdlsdteuXY8cOVK7bVtZMjJ2JMtWAgAAuVPX\nI3bGxsaEkOzsbD6fL3mcZu/evWIRNze348eP29raenl55eXlnT59esCAAfv37588eTIhhMvl\nfvfdd3fu3OnRo8ecOXO4XO6lS5dCQkJu3bp17949JpM5bdo0Q0PDvXv39u7d283NrWnTpnp6\nemIRqqMpU6YcPHiwcePGM2fO1NXVvXHjxpo1a86dO3f79m3qKiUWi0UIuXXr1vbt20ePHm1g\nYFCLt9+2bdsbN258+/ZN6qt8Pn/06NEXL15s3769t7e3kZHRo0eP/v7775MnT967d69FixaS\nb0dyJcOGDdu3b9/Dhw+FNdnNmzdZLFZ5efmtW7c8PDyoYFRUlEAgcHZ2Flu8ii4+ffrUt2/f\nnj17ent7v3r16syZM+7u7ubm5kOGDKnFptDS0mrYsGF+fn5ZWZkwWO1eyMrKcnJy+vDhQ9++\nfYcOHfrx40dPT8/ly5cTQthsNrWSyvZUtSvfuXPnzz//bGFhMWHChIYNG3769CkyMnLUqFH7\n9u2jPm/VNhBT7Q4VZhsXFzdlypRevXpNmjTp5cuX58+f9/DwsLS0HDx4cC22rVQydlTtVgIA\nAIUQqCcul9u+fXtCyPDhw588eVJ1Y+pYgouLS0VFBRVJSUnR09PT19cvKCgQCAQnTpwghPTu\n3VvYoKysjFr/mTNnqMi///5LCPH29hauVjJCHXnq0aNHfn4+FeHz+dR1b0uWLKEiQUFBhBBj\nY+PLly9XkXNcXBwhpHXr1lJfHThwICEkPDycerps2TJCyObNm6mn//zzDyGkT58+paWlwkWo\nqmXChAmVJS/m4MGDhJDAwEBhxNnZuU+fPi1atPj555+FwdmzZxNCbt++LRAIFi9eTAjZtm1b\nZV2sXbuWEMJisQ4cOCAM/vbbb4SQKVOm1G5TvHjxQktLS0dHJzc3l4rIsheoLTZ+/HjheqKj\nozkcDiFkwIABVETqnpJl5Z06dSKEvH79WrjUhw8fDA0Ne/fuLWMDsS0pyw6Vum2paxm9vLxq\nt22lJiNLR7JsJQAAUAR1PRWrra196tQpW1vbK1eudO/evWXLlpMmTdq6davo+TihPXv2EEJ+\n//13JpNJRdq1axcYGOjj40Md9OrevfvJkyc3b94sbMBisUaPHk0ISUhIkD2rnTt3EkLWrl0r\nPCbBYDBWr16to6Ozb98+YYQQ0qFDh+HDh9fijQsEgh07dkRFRenr63/33XdS21B9rVixQldX\nVxhctGgRi8WKjIwsKSmRpaOhQ4cyGAzhCWsul3v37t0+ffrY29vfunVL2OzmzZuGhoZ9+vSR\n/S307t170qRJwqeurq6EkNTUVNnXQPn69eupU6dGjRrF5/N//vln6iAukW0vnD17lhCyaNEi\n4docHR0nTpwoun6pe0qWlefm5jIYDH19feFSVlZWmZmZ9+7dk7GBGNl3qIODg+i2HT9+PCHk\n5cuX0rdgHVTdkSxbCQAAFEFdCztCSPv27RMSEo4ePTphwoSysrJDhw798ssvnTt3bt68eWBg\noOiJuejoaEJIjx49RBefP39+SEhIq1atCCEtW7Z0dXW1t7cnhBQUFHz58uXLly96enqEEBnL\nIMr9+/cJIY6OjqJBExOTjh07pqenp6WlCYMyVkJfv36dKGLkyJGtW7f28fHR0dHZtWuXhYWF\n5CICgeDx48eSaRgZGbVr1668vPz58+eydG1padm5c+eYmBgej0cIefjwYVFRkaOjY//+/V+8\nePH161dCyLdv35KTk4cMGVKjm1R69+4t+tTMzIwQkpeXV/VSb968ERvupFGjRmPHjn39+rW3\nt3doaKiwZbV7gc/np6SkaGlpde3aVbSN6F23QmJ7SpZd/P333wsEgkGDBoWHhwtvH6HOYFKq\nbSCqRjtUbNuampqSGn6GZVR1R7L/IQAAgHyp6zV2FCaTOWHChAkTJhBC3r59Gx0dfe7cufPn\nzy9fvvzMmTN37txhsVhFRUVFRUVsNps60VaZyMjIkJCQx48fl5aW1i6ZkpKSwsJCQkhll819\n+vSpefPm1GOpNZmkwsJC0RsLtLW1LS0tPT09/fz8xIoS0UVKS0tZLJbwCJYQ1WlmZqYsXRNC\nhg0bFhISEhcXZ29vf/PmTQaDMWDAgA8fPhBCbt26NWHChKioKEKI5AV2VRN779QlkoLqht0R\nG+7k06dPd+/ebd++/cmTJzt06CCMy7IXTExMysvLjY2NdXR0RF+iLlarIlsZd3FYWBiPxwsP\n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\n3am1tfWzZ8/Wrl374MEDY2NjFxeXX3/9VTm1SLViYmJCQ0Ml48uXL5d60y69Zs+eTVV1QlFR\nUQcPHlTORQIGBgZS44aGhkroHTSQQN1kZ2d7eHhU0SAjIyMnJ0dp+dCipKSkqKiI7iwUKy8v\nLyMjg8/n052IAlVUVOTm5tKdhWIVFxdnZGSUlZUprovnz5/LMqIvm82u9V/N+fPne/XqxWaz\nmzVrNn/+fMm9FhgYKNmjgYFBeXm5sE1ZWZnYAZhu3boVFxfX/p3LrKysLC4u7vHjx7Xujsvl\nZmRkFBYWytI4Ly9P8nCdlpZWQECACv5Fl5eXS70xdubMmcpJgMfjSQ4oaGxs/PXrV0V0l5mZ\nmZ2drYg1qw7N/oksLy//4Ycfqmigcv85AQDUyOHDh0tKSqptVlpampaWVov1nz17dtSoUQ8e\nPCgtLf3w4UNYWNgPP/zA4/FE24wbN070yBxlxIgR69ev37lz5+fPnwkhISEhYldNxcXFrV69\nuhYp1cjJkydbtmzZrVu3Hj16WFlZVTYeihxdvXr148ePYkE+n+/m5qZSY4tQtLS0pB7mVNpg\n11paWocPH27QoIEwwuFwdu/e3bBhQ+UkABoGhR0AqDfJi9ukYjAYtRhXRSAQzJ07Vyx4+/bt\nY8eOiUbMzc1PnjzZpk0b0cjx48eXLVv2888/t2vX7t9//6Uu+BNz8eLFmqZUI48fP/b09ExP\nT6eeZmdnT5s27ZqCZ76vbI/UZXZgxWEymcOGDZOMjxgxQmk5dOvW7eXLl6GhobNmzQoKCkpK\nSvrxxx+V1jtoGBR2AKDeRMspIckLuUaPHi16UERMSUmJv79/q1at2Gx2165dDx8+TMWzs7NT\nU1Ml2z9+/Fgs4ujomJiYGBsbe/78+REjRohOw1pYWDh9+nTJsT+I4gekDQ0NFbt6jBASHBys\n0E4r2yNS46pg27ZtYkX/9OnTR40aJRrJysp6+PDh169fFZSDmZnZggULtm7dunTpUnndUQT1\nEwo7AFBv06dPb9asmVhw7ty5ZmZmwqe9evXauXNn1StZtWrVu3fvysrKnj596unpuW3bNkII\nm82WerG/np6eZJDFYtnb2zs5OV25ckXspcLCQqnXwiv6tkepM9wretr7gQMHSg786+PjI3m2\nWkW0aNEiOTl5xYoVI0aMcHd3//fff3fv3i18NT8/38vLy8LColevXo0aNRozZoziyjuAukNh\nBwDqzczM7Pz588LbbI2MjEJDQ11cXGS/nOvu3bsRERFiwUWLFhUXF+vr6w8dOlRykR9++KGy\nteXm5vL5fMl4jx49xApQS0vLNWvWyJhk7TRq1EgyqOgBiplMZkREhPBkora29rx58zZs2KDQ\nTuuoQYMGAQEBx44d27dvn+hQi4QQHx+f/fv3C/5vOOjTp0+7u7tL3cUAqgCFHQCovU6dOt27\nd+/Lly9JSUmZmZnu7u4eHh5ZWVnCBg8ePPj5558rW/zJkyeSwaKiohcvXhBCdu7c2bRpU9GX\n1qxZU8Usq40bNzYyMpKMd+/enUrDxsamdevW06ZNe/TokaIPYvn4+EgGZ8+erdBOCSGNGjU6\nfvx4bm5uYmJifn5+WFgYm82uxXqys7OLiorkm1txcbHoZ6Nqb9++PXLkiFjw5s2b0dHR8s0K\nQF5Q2AGAhrC0tOzQoYOOjs7p06ezs7PFXo2MjBS97k2U1POqwnjz5s1TUlJCQ0OnTJni5+cX\nExOzbNkyqkFmZua1a9du3rxZUFAgXEpHR0dywLyuXbuOHz++cePGO3bsePXq1evXr8PDw6UO\n4Stfw4cP37Bhg3A4GF1d3eXLl3t4eCi6X4qxsbGdnZ0sg9FIOn/+fLt27Ro0aGBoaOjk5BQf\nH1/3fBITEwcNGmRoaGhubm5jY3Pq1KlqF3nz5k2N4gC0wwDFAKBppN6VKRAIMjMzzc3NJV8a\nPny4np6e2CxStra2bdu2pR4bGBgsWLBAbKnQ0NAVK1ZQSxkbG4eFhQlnwp0/f35FRUVQUFBu\nbq6Wltb333+/efNmXV1dsTXcvXs3OjqayWQOHjy4e/futXmrMvD19Z04cWJMTAyPx+vdu3eL\nFi3qvs6ysrKTJ0++ePGiadOmY8aMqcXtxlWLjo7+7rvvqMcCgSA6OnrYsGHx8fFih05rJCMj\nY/jw4cIbhN+8eTN27NirV69KPdUuJPVcNlH86WyA2lPKcHryhAGKBZo++iIFAxRrBiUMUCxJ\n8oI5Ut0Axbt37xadBMLU1PTJkydVdCH1YM/du3dF2/B4vNTUVKmd8ng8scNm8+fPr/X7FZWR\nkbFixYrRo0fPmDHjwoULclmn4P8PUPzmzRsbGxth5iYmJhcvXpRXRxSpP0jwRQAAIABJREFU\nM97OmzevLusUHmcV5eDgINomPz9fdExpgUDA5/MdHR3FlmrXrl1JSUldkqERBihWd9UOUIzC\nTi1p9qeWgsJOM9BS2JWWlnbp0kXsx/iPP/6oeqlnz54tWbJk8uTJQUFBGRkZVTeWvOuTEDJh\nwgQZMwwLC5NcPCIiQsbFK/Py5UvRe4EJIX5+ftRLx48fHzBgQLNmzfr163f48OGq/7L4fH5e\nXp5oRLSwk7yT19zc/PPnzyEhIQ4ODi1atBg5cmR0dHRd3ojUSw+HDRtWl3WOHTtWcp16enqi\nbSQLO4FA8O7du65duwoXadOmzdOnT+uSCb1Q2Kk7FHaaSbM/tRQUdpqBlsJOIBC8e/dOOMAs\nm81etmwZl8uV4/pbtWolWSX07t1bxsWl3nsxatQoGRcvLS2Ni4t7+PCh2Bxf/fv3l1zttm3b\nJGc8CwgIkLrmrKysGTNmUBcXNmnSZPPmzdTfoLCwe/36tWQXhJBevXqJRepyGE9yii1CiJub\nW61XKBAIpk+fLrlOKysr0TZSCzuBQFBRUXH9+vXt27dfunRJ+R9m+UJhp+6qLexwjR0AaKCW\nLVtevHgxOzs7PT29TZs2oqdZ5cLKyurt27diwebNm8u4eE5OjmRQ8oYPqU6fPj179mxqmjIT\nE5Pg4OCZM2cSQgoLC+/cuSPZftasWZLBgIAALy8vsYT5fP64ceNu3rxJPf38+fPcuXPLy8t9\nfX2rzpwQ8uDBA7HIzJkz379/L3XQGS6Xe+PGjffv37dq1WrQoEHa2v/9Er1+/frevXsdO3ZM\nSUkRW8rT01Nq1zLy8PAIDw8XC06aNEmWZanrIAcPHlyXBACURGk1przgiJ1A0/8doeCInWag\n64idop08eVLy61TsGrsqiM1qQPH29q52wfj4eMmbTM+ePSsQCGSsC4WOHTsmtvKzZ89KNtPX\n1y8uLhYescvJyZF9EtXU1FTJt5CUlCR6QM7Ozu7ly5fUS0uWLBGW4GLjQi9ZskTGbVsFf39/\n0XUOHz68tLRUtEFlR+w0CY7Yqbtqj9hhuBMAUGmFhYWBgYFjxoyZOHHinj17VGRgWFdX15CQ\nEOE4KcbGxnv27Onbt6+Mi/v7+4uN62ZkZLR06dJqFwwLCyspKRELrlu3jhBiamoqvI1XFpJH\nMZ8/fy7ZrKioSPTYpImJyeLFi8XatG7dWsYuuFyum5ub6NG458+fu7m58Xi8Q4cOBQcHl5eX\nU3FqR3t6ev7555/x8fFr166V6V1V6Y8//nj27FlISEhAQMClS5cuX74seasygLrDqVgAUF1Z\nWVkODg7CKbCOHj16/Pjxs2fPSp3mS8kWLlzo5eUVFxfHZDJbtWpVo/k9e/Tocfr06fnz5ycn\nJxNC7O3tN2/eXFl5JOr9+/eSQWHhtW3btiFDhsiSgIGBgZOTE4/HYzKZwqCxsbHUxiYmJqJP\nV65cyWKxQkJC8vPzdXR0PD09J02aJDloSJcuXSTHCrl3796zZ8/EgnFxcbGxsVLnfMvJyVm0\naJEs70hGHTt27NixoxxXCKBq6P9yBACozKJFi8QmNr1w4YLklVJ0MTc3HzZs2ODBg6VONVG1\n4cOHJyUlZWVl5ebmxsbGCqdEq5rU4dOEo7sNHjw4Ojp6xIgR1Y4JPHr0aAcHBx0dnRYtWqxZ\nsyYlJaWkpGTUqFEGBgZiLfv37y82epy2tvaKFStyc3M/fvxYVFS0Z8+eIUOGiB1uNDAw2Lt3\nr2S/3759k5rP5cuXJa/SI4RgVlaAmkJhBwByxuPxEhMTo6Kivnz5UsdVXb58WTJ46dKlOq5W\ndZiZmVV2nEwq6j4JMaK3Rzg6Om7dulX0dgQhe3t7Z2fnmTNnTps27dChQ+/evRMIBGlpaStW\nrOjQoYOBgcHSpUtDQ0NFi0Jra+t9+/ZJzYTBYDRt2lR4vV1QUNCFCxe8vLxGjBjh5+eXkpIi\nOkSIkNS7iQkhq1atKi0tlYyLDpgHALLAqVgAkKe4uDgvLy/h6bYZM2YEBATUem1cLlfGYD0x\nYMCAzZs3L168mJrxgsViLViwYNq0aaJt/vjjD9Epzig2Njb37t3T1tb+/Pmz1Lt3+Xz+oUOH\nkpOTAwIC3r17p6enZ2dnN3HiRNnneHVxcXFxcam6jUAgMDQ0FEvP2Ng4Ly9PsrGOjk7Xrl3T\n0tJkv90YAFDYAYDc5ObmjhkzJi0tTRjZtWsXh8MJCQmp3Qr79Olz5swZsaDkTAD1ypw5c8aP\nHx8dHc3lcnv27GltbS3W4OnTp5JLGRkZUYfxEhISeDxeZSt/8uTJkydPCCFdu3b18fGRvaqT\nRU5Ojqurq1hVZ2tr++LFC6ntuVzu0qVLV61atWzZshUrVsgxE6ny8/OPHDlCjY/j6upa2QzC\nACoOhR0AyM2xY8dEqzrKzp0716xZU7uR5EJDQ2/evClaCnTq1GnevHl1ylI2t27dunTpUklJ\nSc+ePd3c3ERvMqCdpaWl1HkUKJLXyYkGpb4qKT4+3t3d/d69e3J84xERER8+fBALvn//nsPh\nFBYWVrZUWVnZH3/8YWtr++OPP8orE0kPHjwYM2aM8OKBZs2anTt3rnPnzorrEUBBcI0dAMhN\namqqZLC0tLSyS+ar1bp16ydPnnh6erZq1apjx44LFy68ffu2fA8jSTV37tyBAwcGBwdv2rTJ\n09PT0dGxqKhI0Z3Ki9SaT1gVOTg4NGvWTJb1xMbGPnr0SI6JSf14FBcXC+cIqcL27dvlmImY\nkpKSiRMnil4S+uHDh4kTJ1ZUVCiuUwAFQWEHAHLTpEkTySCLxTI3N6/1Om1sbA4ePPjmzRtq\nBDKxoTcU4fTp01u2bBGNPHz40M7ObvDgwUuWLMnKylJ0AnW0YMECsWvdfvjhhzlz5lCPdXV1\nDx48KONtvOnp6XJMTOrHg81mb9682dbWtuplqZk2FOTOnTuS48gkJyfHxsYqrlMABUFhBwBy\nM2HChIYNG4oFPT091etypRMnTkgGU1NTb968uW7duk6dOtX9bl+FYjKZ58+fP3ny5Lx58+bP\nn3/69OnTp0+LjvzXv3//Fy9erFu3zs3Nreqa29fXd9CgQTt27CgoKAgJCRk0aFDnzp29vb2l\nDqdXLTc3NwsLC7HgjBkzGjVqFBcXt3v37lmzZi1ZsmTAgAGSy8oyyF+tVTZpR00n8wBQCcqZ\nAUOOMKWYQNPnS6FgSjE1devWrRYtWgi/YVxdXdPS0tRrSjFXV9eqvzYnTpwotkhWVhYtqdZd\neXn5yZMng4KCqr6eTKwgMzIyevXqVS26i4qKEr3Fdfz48cXFxWJtYmJiJBO4c+eOPN6udHFx\ncVLf9Zs3bxTXKV0wpZi6w5RiAKBU/fv3T0lJuXHjRkRExPPnzw8dOlTtYLlyV1ZWVpfFu3Tp\nUnWDa9eu1WX9qqO4uNjf39/X19ff318gEDg4OFTWMiMjQ/Rpfn7+r7/+WoseBwwYkJKScv36\n9aNHjyYlJR07dkzy49GnT5+IiAhLS0vqacOGDQ8fPuzk5FSL7mTUtWvX8ePHiwVnzJhR2ah7\nAKoMd8UCgJyx2exBgwZRjyUnNlWc9PT0RYsWnT17tqioyM7Obs2aNd9//30t1jN//vygoCDh\npKWSVGS+2rrz9PSMjIykHlNDDwYFBbVv376KW26F7ty5U7tOORzO4MGDq27j5ubm6uqalJQk\nEAhsbW2VMKPrrl27LCwsdu3aVV5ezmazZ8+evXr1akV3CqAIOGIHAJqgtLTU2dn50KFD+fn5\nPB4vISHhhx9+uHDhQi1WZWxs7OHhUUWD/v371zZNFXLt2jVhVSf0xx9/SJ0xQpKix39hsVhd\nu3bt1q2bEqo6QoiRkdHff/+dnp7+5s2bgoKCDRs2VHFh6NevX6XOkwGgClDYAYAm2L17t+Ts\n8gsWLKjd2kJDQ0WvFBRlamoaFhZWu9WqjpycnOvXr0vGKyoqLl++XO09qoSQYcOGKSAvmuno\n6DRr1kzqhGyU8PDwJk2aNGrUyMDAYOTIkW/evFFmegCyQGEHAJogISFBMvjy5cvanQs2NTV9\n/PjxggULevTo0a1bN0dHR3t7+y5duvz0009Pnz6trOZTnJKSktevX1dxdlh2sbGxDg4OZmZm\nwcHBUhu8e/duz549YoMFtmzZUvSpubn52rVr656MVBUVFdRhMwWtv9YiIiK8vb2pIWB4PN7F\nixdHjBihgnlCPYfCDgA0gaGhoWSQzWbX+kRegwYNQkNDHz169OTJk+jo6NjY2Pj4+H/++UfG\n0X3lJTs728vLy8DAoE2bNoaGhr6+vnW5bPHDhw8jRoyoethhKysrOzu78+fPz5w5s1+/fuPH\njz9x4kRycvKff/45YsSI5s2bM5nMzMzMdu3aTZo0KTMzs9bJSOLxeAEBASYmJjY2NsbGxmPG\njPn48aMc119HS5cuFYu8fv169+7dtCQDUBkUdgCgCaRe7z927FjR8dvUjkAgmDx58v79/8Pe\necZFsTQLf8ggIEmSgIKAAgZQQTCimBAUFQzgUYIo5pwjHrOeY/agPh4DKgYMSFBRgmJAgqgg\nSFJyznmBXXbeD3PfuXOnZ2cDC8o+/f/gz+2p7q6ZHWZqq7uqbmHhGu3t7WfOnOF9fbm6ujo/\nPx9FUbzl9OnTXHOzbdq0SUFBYfLkyTdv3hw9evTt27ednZ0lJSW9vLwMDAwKCgqwUrNsNjsg\nIMDNzY0YStLY2JiTk0NTixakvb39x48fmLV67NgxX19frMgHiqLBwcFz5swRip+y8zAYDMrs\nfd+/f+92XSAQOnrwIw8CgUBwxowZQwpjlJOT8/b2/lX6CIWPHz+C8R//+c9/wIqrJJKSkqys\nrPr06aOvr9+3b9/bt29j7RkZGVwnxc2ytra2kydP7ty5E/tYWVl55coVknBkZGRMTAyCIPn5\n+TNnzuzdu7ehoaGysvLRo0e5xg4zGIxNmzYpKipizsglS5YcPXoUPJGgoCCuOncDMjIylOEU\nqqqq3a8MBEIDNOwgEIiIMHz4cOJHBoOxcOHCLi1F1dVkZWWBjSiKZmZm0vQqLS2dOHEivt5a\nVlbm7u4eFhaGIIiamhoor6SkRDPahQsXsCR2ubm5lLZaZmZma2urg4PDs2fPsJampqY9e/b8\n9ddfNMMiCLJ58+azZ89iDrmOjo47d+5QrjJzOtmmpibhLgTTIy4uDsZKy8rKurq6dpsOEAgv\nQMMOAoGICL6+vqSWqqqqc+fOdX7k9vZ2bH2wi2Cz2fX19WA7pR2GAHUgSCxbtqypqYnUuGfP\nHgRBlixZAsrTZ+7o6OjIzs5GEERFRYVSoE+fPvfv3wdXJH19fWkyRRcVFYH+P07jk1qSk5PH\njx/fu3dvdXV1Q0PDbnPpnT59evTo0fhHGRmZ06dP85gdBgLpNqBhB4FARARK/xa9c4srqamp\nkydPlpeXV1RUNDc3j4iI6MxoIBUVFZ6engoKCsrKyrq6upcvXyYetbOzIxbgwhgxYgRN+S8U\nRaOjo8H29PR0BEGmT59+4MAB0iGuhTowO9LY2HjUqFGkQzo6OtOmTQsODgZ7tbW10ZSUxSqS\n0c+LIIiysvKcOXOILWVlZdOmTXv//j3WPScnx9nZOTo6uhu24ikqKn748CE0NPTPP/88f/58\namrqqlWrOAn/JlsDIf+FQMMOAoGICJT+Lfoi9/SUlZVNnjw5OjqaxWKhKIolPY6Pj++Ejv8H\nFos1d+5cf39/bAmyuLh41apVfn5+uIC8vPz9+/e1tbXxFmNj43v37omJiXEas6GhgdIDh6cv\n8fX1xbx3PDJu3DhjY2Ps/9euXRs0aBB+SFNT8969e7179+YUqEtjMnJyRhKreKmoqNy+fbtv\n375EgTNnzlRUVJB62dvby8jI9OvX76+//mKxWLQn1CnExMRmzpy5f//+devWGRkZUcoEBASY\nmJjIycmpqamtWbOGa7QKBCJcoGEHgUBEBA8PD7DR3d1d4AH//vtvkg3R2toK5rwQmKdPn4IF\n73fv3k109lhaWq5du1ZbW1tKSqp///7bt2/HzSxK5OXlpaSkwPYRI0bg/6+treVRQzMzszt3\n7uAfDQwMvn379uTJk+PHjwcEBAQFBZ04cUJVVfXDhw9gXzExMdDdiDN06NCRI0eSGvv16/fl\ny5ewsLCTJ0/6+/tnZWXNnDmTJEMZ/8FkMhEEKSws3L59uxC/IAHw9/dfvHhxZmYmm82uqanx\n8/NzdnbmK0wYAuksaE+jpqZm0aJFNAKVlZW1tbXdps8vgcFgNDc3/2otupb6+vrKyko2m/2r\nFelCWCxWXV3dr9aia2lpaamsrGxra+MqyWKx/Pz8rKys+vbta2dn9+zZM37nam9vnzt3Lv5w\nk5GR+fvvvwXS+n+wt7cHn5nq6uqgZHV1tQDjg6uiGD9+/MBlVq9eTTp6/Phx+mG9vLxIXSQk\nJFJSUnABSo+djIyMv7//yZMnAwMDAwICTpw48fTp0/b2dqwLk8msrKxsamrCB8nKylJQUKB5\nuTg4ONDrmZmZSTRStbW1Y2NjuV40SvOdiLi4eEFBAddxKGloaMBPWQCYTCalhzgwMFDgMYVO\nVVVVTU3Nr9aiaxHtV2R7e7uTkxONAMfCKRAIBNKdbNiw4Z9//sH+X1JSEh0dfePGDU9PT95H\nkJKSevLkSWxsbFxcHJaJzdDQsDMqUYaLKisrd2ZMruOLiYnhU6SmphJXZjH279+/bNkyTkuZ\nCILs2bPnzp07mBMLHzMsLMzU1BQrluXs7Hzs2DFSiOuMGTP48m7u2LEDDNHAGT58+M2bN+lH\nGDhwYGpqalhYWHZ2dv/+/R0dHSmzTJP4448//P39aQTYbHZKSorAeaRTUlJOnTqVnp6uqam5\naNGiJUuW0Cx8kygpKaEM1E1OTp4/f75g+kAg/AINOwgE8uv5+vUrbtXhrF+/fsGCBTS12CkZ\nM2bMmDFjhKKVq6vrgwcPSI1ubm5CGRxBECcnpz179rS0tBAbp06dihttnz9/Bnu1t7enpKRM\nmjSJ07B//fUX0apDEITFYu3evTs2NjYkJERMTCwuLg5MXMJv6hBK3UxMTJYsWTJ06FAHBwcJ\nCQmug0hLS1NmlqZh6tSpvr6+f/75J40MLwYigiAsFuvatWtRUVHt7e02Njbr1q2LiYlxcXHB\nl8JfvnwZHx8P3pmcUFBQEBMTQ4GgEB71gUCEQ3f5DoUGXIpFRd3PjAGXYkUDHpdiL126RPmA\nio+P7x49OUEq8zB9+nTKpTrBlmJRFL116xax6JmhoWFRURF+NDAwkPKyxMXF0Yxpbm7O6YF/\n//59FEUpk57IyMjQ/LmBS7EmJibgII6OjoJdB3759u3b6dOn9+3bByZh6devX2trK9cRWCyW\nnZ0dsaOxsbGuri54UrwsEOOQxkQQRFZWNj09vRPnKmTgUmxPh+tSLAyegEAgvx5paWm+2ruN\n06dPx8fHHzlyZM+ePc+fPw8PD6cMTRCY2tpaYuhoU1MT0YE3ceLE3r17k7rIyMgMGTKEZkxs\nvZWSN2/eIAhCeQpSUlK8rzkiCOLk5AQ2zp49G0EQFov16NEjX19fPz+/goIC3sfkHVVVVTk5\nOTExsdWrVxO3+ikrKwcEBPBSIPjSpUukvDDZ2dmUpWmxi8Yj169fJ4aMSEtLnz59mtIIhkC6\nCLgUC4FAfj12dnaysrKkPB16enr0Fkz3MGrUKH19/ffv39fW1mZlZQ0cOFBYI6enp+/YsYPY\nUl5e7unpiQeZqqurm5mZxcXFEWWwSl+c1iJLS0tpbCmscq69vf3169dJh2bMmMGX8gcOHHj9\n+nViYiLeMnfu3GXLllVUVEyZMuXbt29Y47Zt265evQrWbOgMQUFBHh4ejY2N2EdDQ8N169bV\n19cPGDBgyZIlGhoavAzy8uVLHqfjq9xw//7909PTb926lZqaqqGh4eLiMnjwYN67QyBCoNuc\nh8ICLsWiou5nxoBLsaIB71Gx58+fJz6aZGVlo6Oju0FDrly7do3oE1q9ejV4Wwq2FMup6FZZ\nWRkmkJeXR+lFGzx4MKcx6e2zR48eYWKkQlg6OjqlpaU0qoJLsVjjtWvXvL29V6xY8fjxY+yy\nYE47IvLy8sQ4305SXFwMBp3Y2dnxO8706dPB60Pp7Pzl+wGEC1yK7enAqFgIBNIzWLdu3ciR\nI/39/YuKigYNGrR27VpirtpfRWJi4po1a4iuRD8/P2Nj440bN3Z+cFLYBA5evuzSpUsoVXkG\nrHgrSHV1dXh4OKfpnJ2dXVxcsP/fvXt39uzZYWFhjY2NVlZW69ato68YS4mkpOTSpUuXLl2K\ntzQ0NISGhpLEmpubg4KCtm7dyu/4lISGhoLl16Kjo0tKSkipjOkZM2YM6LQbO3ZsXFwccXF8\n48aNYL0NCOR3Bhp2EAjkd0GIAa3C4t9//wULOVy6dEkoht3w4cPBxj59+uCbtMrLyyk7ampq\nUrZjDmCw3cjIaNu2bd7e3niLmJiYq6ur0AvY19fXg/G2CIIIsfoCp+zKtbW1fBl2W7ZsuXfv\nHjHdsYqKyqVLl1gs1pkzZ75//66lpeXm5rZw4cLOagyBdC8weAICgUA4UlZWBjaWlpZSCpeX\nl/v4+BgaGurp6c2fP5+ydi2RmTNngguCZ8+exRcEx44dS9lx7969lO26urqUmTW2bNni4+PD\nS/6RTqKtrU2Z50+I+8zMzMzARjk5OQMDA77GkZeX//Dhw8aNG4cMGWJkZOTh4fH582ddXV0T\nE5Pr16/HxcU9ffoUWnWQHkk3rQkLD7jHDhX1DQQYcI+daMD7Hrvfkw0bNoCPTXNzc5JYdXV1\nfX09KR9y7969f/78ST9+Q0PD1q1b9fT0pKSkhg8fju+Bw2AymcRCsRgDBw6kGfD06dOgwtra\n2hUVFYJdAYyCgoJVq1ZNmjTJ3t5+ypQpkyZNcnd3f/PmDSh58eJF0uwjR44U4g3AYrHGjRtH\nmuLYsWNCGbyTlSd6BHCPXU+H6x47aNj1SET7rsWAhp1o0NMNu+zsbNAH9uDBA5JYdXU1pRfN\n2dm5kwrk5+fj7i4xMbGxY8fS3zNsNtvGxgbUZPXq1bjMt2/fjh07tm3btoCAACaTyVWH9PR0\nTjvwzpw5Aypw7tw5dXV1BEGkpKTmz59fXFws2Llzory8fPHixVjSFlVV1ZMnT3Z0dAhlZGjY\niQai/YqEhp1oItp3LQY07ESDnm7YoSgaERGBh3H07t377NmzoEx1dfW0adNAu0dHR0coOrS2\ntn758oXFYvEiPGzYMFCTkSNHYkdPnz5NzA44dOhQriG948ePp7TqEASRkZHJzc2l7FVSUtKl\n33t7e7vQTUZo2IkGov2KhAmKIRAIpFNMmTIlMzMzLS0tISGhpKSEcnEWQRDKpLiysrJC0UFG\nRsbCwoLHTXI0mnz+/Hnz5s14ySwEQb59+7Z27Vqa0VpaWt6/f8/paFtbW3BwMOUhbW3tLs0v\nLSUlxVe0RDfT1NSEFRH51YpA/uuAhh0EAoFwQVJS0szMzMrKSl5enpOMo6Mjj41dDY0mjx49\nAg89fvyYVFuWCOY1p5lu48aN+vr6QUFB/Gsqmvz8+XP69OmKiop6enrq6urgpkMIpEuBhh0E\nAhFB4uLiHB0d+/fvb2lpefLkSaKPqotYvny5g4MDsWXIkCFHjhzp6nlBdu7caW1tTWwZN24c\nlkauoaEBlG9vb2cwGJxGU1BQoCk+i5Gfn+/s7BwTEyOQvnxTV1e3ZcuWYcOGGRoaLlq0KDs7\nu3vm5YWmpiYHB4dXr15hH6urq9etW3ft2rVfqxXkvwqYxw4CgYgakZGRU6dOxf5fUFCQlJQU\nFxf35MkTSmE2mx0QEPD+/XsxMbFJkyYtWLCAr5KpOOLi4qGhoXfv3o2MjGxtbR07dqyPjw8v\nRUsTExMfPnxYVlY2ZMgQHx8fynQhfCEjI/P+/fvr16/HxMRgJ+Xh4YGlUKEs0aasrLx27Vod\nHR13d3dTU1NQ4PLlyxMnTiSm7aVk+fLlEyZMkJWVnTZtGmUlWaHQ2tpqa2ubkpKCfczJyQkL\nC0tKSjI2Nu6iGfni1q1bYJqbbdu2JScnNzU1WVlZLV26lJe7AgIRnG7a7Cc8YPAEKuo7QzFg\n8IRo0G3BE1lZWffu3QsODq6oqCClHcEIDQ0Fe7W3t9va2hLF7O3teYxRICJYSTEUyE6ioaGR\nmZkp2FC8wGAwhg4dyul1ICMjc/v2bcqOnz9/dnJyokySRwn9U5oXWlpaIiIi/P39ExMTURRt\nbW2NjIz09/dft24dOJ2joyObzf748aO/v39kZKTA91vngyco1SNiamr6a2MXYPBETwdGxYom\non3XYkDDrsfBZDLBZGndYNix2Wzi25ST8bFr1y6w7+HDh0HJ06dP86uDYIZdWloaGF1hY2Mj\nwOytra08ChcVFbm6usrJySEIgmUMIaKgoEAZaspkMi9fvkxvspC4desWvyeC8/HjR319fXyo\nUaNG0deXU1ZWJobuGhsbf/78WYB5O2/YHThwgOuV8fLy6swUnQQadj0d0awVi6IozVZfXgR6\nOh0dHWw2W7TPEUVRBEGYTKZg62I9AsxsFYHvsby8fPv27Y8fP25vb1dXV9+5c+fatWuxL66j\nowP7t+tO8+LFixcuXMA/NjY2UopJSkqCOjx9+hSUDAoKog8UBRHsewwNDQXrlcXFxRUWFmpp\nafEyQlBQ0M6dO3NzcyUkJCZNmnTmzJlBgwbRd9HQ0Lh161ZHR0dSUhKY6bepqenly5eLFy8m\ntXd0dNBUoeWkm2Aly+rq6ubNm1dcXIy3JCQk0HdhMBjv3r3DP2ZnZ7u4uHz+/Jkm2IUSNpvN\nYrH46kLC2dn5xIkTNHsWEQR5+vTplStXOjNLJxGNxw4NWF5DUT1HLPckjUDPM+xQFGWz2eDT\nkAhXgZ4OdteK/DkiCMJ1W0+Phpeb+feHxWK5uLjgr97KysotW7ZEUWPzAAAgAElEQVQwmczV\nq1cj//97bG9v7+T7kgYePUm2trbgpW5ubgYlm5qaBPhSBOhCGcqAIEh9fT0vO+2ioqLwmlcd\nHR2RkZFjxowZOnSotLT0uHHj1q5d26tXL6I8iqKPHj16/PhxVVWVqanp5MmTOc0OnguKovTG\nCohglxFBkKCgIKJVxwvggyI3NzcsLGz27Nl8jdPR0dHJe1VfX//UqVNbtmyhuVwMBuMX/tVj\nNkFPf+zQgz126K2fnosIGnZiYmISEhI0Wz3a2troBUSA1tZWNptNemqLGNiaiIKCggh77Do6\nOpqamnr6vfro0SPQoXLkyJGNGzfKyMgwGAwWiyUnJ9eZlGZsNvv58+dpaWnq6uoODg4kb1Z5\neTnYRVJSkvh63rZtG6UdY2VllZ6eTmq0trbm90upqanh1CU9Pf3169cMBmPMmDGjR48mHhoz\nZgwor6GhYWpqykvKuoMHD5JaGhsbY2NjEQR58+ZNcHBwfHw8tuSKsWbNGj8/P+z/CQkJd+/e\nlZaWBuOFx40bB54Li8UyNzd/+fIlV61wbGxsBLu36+rq+JLX1tamrN5bW1vLrwKNjY2ysrLg\nCjVfrFq1ytHRMTw8vKqqKicnBwyJHTly5C/8q29vbxcXF+/pjx16RPsVyWQyxcVpU5p02Spw\nVwH32KGivoEAA+6x6ymA5gVGVlYWKow9dlVVVZaWlviwioqKgYGBRAELCwtw9qVLl+7YscPB\nwcHDwyMsLIzT4Pn5+SoqKsSOGhoapaWl/CrJaY/dgQMHiBatq6srMTKDzWaTMqQgCHLv3j0e\nJ+UaXLlv3z5c+PXr1/TCGFOmTKGci8lk5uTkGBgYcOpIetMYGBgIfG8/ePCAq55iYmKzZ892\ncnI6cuRIdnY25c8/mu+dE0KvPNHc3GxmZkbUSlZWNiEhQYhT8AvcY9fTgcEToolo37UY0LDr\nKZw/f57yvYsFUnTesJs/fz5pcAUFBWIZq3v37oECvMeWpqenz549W0VFRVVVdd68ednZ2QIo\nSWnYvXjxArwyx48fJ8o0Njbu3LnTwMBAVlbWysrq6dOnvE/K1SEhLS0dEBBQW1vr7e3N5Sf+\n/0dFRYXSrmUymZWVlVlZWe7u7ljmFBKjR4/G6sMiCCIlJbVjxw6B67eeOHGCq8Ny2bJlxC6e\nnp4kgZEjRwpw13VFSbGysjJvb29tbW0FBQU7O7uPHz8Kd3x+gYZdTwcadqKJaN+1GNCw6ynk\n5eUpKCiQXqvTp0/HjnbSsGtsbKR8x//1119EsdOnT+M66Ovrv3z5srNnxSeUhp2bmxuouamp\nqbAmpTSwQPT09HgRw7l8+TI4F2bYNTU1oSh67NgxsBcxiBXj5MmTApwUvlhMxMXFhRjn4enp\niWmC09jY6O7ujgtMmjSJUwVbeoiGXWlp6YYNG8aNGzd9+vQLFy5gG5tEAGjY9XREMyoWAoH8\nPvTv3//q1ave3t4tLS1Yi4mJibBS7dfV1WH7oElUV1cjCNLU1BQREVFSUjJs2LDi4uL09HQ5\nOTlTU9NO7pEiUVtbGxUVVVlZOXjw4AkTJvDeEVOSRFVVlVC0Sk1N5XGPf2FhIV8jU6pNZNu2\nbfHx8cSA4hkzZoDuyYMHD65fv57renFSUtKnT5+UlJQmTJigpaXl6+sLykyePHnVqlU5OTnF\nxcWDBg3S0NAgCSgoKPj7+588eTIrK0tXV5dmyZhH8vPzR4wYUVNTg318+fJlWFjY8+fPeXR8\nQiC/EGjYQSCQzuLq6jp27Njg4ODy8vLBgwe7uLgIy7TS1NRUUlKqr68ntZuYmLx//97V1RUP\nn7SysgoJCeExSwjvvHjxwt3dHbfGbG1tnz59ymNxiEGDBuGlpXBMTEyEohhY3kBYcNVQQkIi\nKCgoKirq48ePUlJSkydPDgkJAQ27pqam4uJimvxzLBZr8eLF+I46eXn5I0eOVFZWgpKZmZkI\nggwYMIA+m52mpqampia98jyybt063KrDePny5a1bt8A1Xwjkt6PbnIfCAi7FoqLuZ8aAS7Gi\nQef32JFqMyAIMnTo0NLS0r59+5La7e3thag5iqLFxcWk0AoEQf744w9QElyK9ff3B1cnEQSJ\njo4Wim5v3rwR2muAwKhRoyg3mRGXYkHOnj0LDiUuLk5/e+/fv5/UhVNE6qFDh4Ry0biCL8WC\nuwsQBFmyZEn3qNGlwKXYng7XpVjoVYZAIL81GzduPH78eO/evREEERMTc3R0DAkJiY6OLikp\nIUmGh4fzu+xIz+PHj2tra0mN9+/f55R/DufmzZseHh55eXnExn79+gUGBlZXV69Zs2bVqlX3\n7t1js9kC6zZ69OiBAweSGrW1tXnpiwfqmpmZeXh4YFl8xcXFXVxcgoKCBPC2Tp06FVyjHD9+\nvJKSUk5Ozv79+z09PQ8ePEjKTvfvv/+SurS2toLl4Hr16rVgwQJ+VeokKFWeMMpGCOS3o5ss\nTOEBPXaoqP8cwYAeO9FAWCXFWCxWTk5OQ0MD9vHMmTOUD7TFixd3WuX/Ze/evZSz5OTkkCSJ\nHjsWi9WnTx+w17179xwdHYktdnZ2nYnB/PLlCzEwon///l+/fuUaUmpgYJCamlpcXFxWVoaN\nw2Qyf/78yckbh8vQeOwoU95YWloGBwcTE+kpKCgQHZaUwR9z584dO3YssUtAQACPF6S6uvrT\np0+VlZXgofb29tTU1KysLPpCwLjHDkxDgyDI1atXedTkdwZ67Ho6MCpWNBHtuxYDGnaiQRfV\nig0JCeFkuERGRgprlhs3boDjy8vLg4VZiYZdQUEBpWJTp04FGw8fPtwZDZubmx88eHD06NEH\nDx7gz4SkpCSSZWloaHj9+vWjR48GBgYyGAwBJqI37ObNmweemqysrKqqKqmxb9++uAKUm/n2\n7NnDZrNfvnx58uTJf//9l7JwLUh9fb2Hhweezc7Z2bm8vBw/eufOHTzeon///s+ePeM0Dm7Y\n/fjxQ0lJiajYpEmT6I3CngI07Ho60LATTUT7rsWAhp1o0EWGXXt7+6hRoyjtp7Vr1wprlubm\nZtD4OHjwIChJNOwoK2EgCEK58d/S0jIoKGjhwoWTJk1au3atYEk6QGpqarZv325tbW1jY7Nr\n1y7ibZaQkODp6Wlra+vp6RkfH8/jgPSGnZeXF3hqnEJMYmJisF4BAQGkQ3369CkqKhLgfMGi\ntFOmTMES6UVFRZEOycnJpaSkUI5DTHdSUFCwYsWK4cOH29ranjx5ErTmeyi4YSfYndAjEO1X\nJDTsRBPRvmsxoGEnGnSRYYeiaE5ODmW9AS8vLyHOkpWVZWtri40sIyOze/duSrcN0bALCwuj\nNGhIFQgw1NTUSDZHl5YluH37NkmBGzdu/Pjx4/nz5ykpKTQphekNu+fPn4OnZm9vT3kdnj9/\njnc8f/487hgbNmxYXFycACeVnZ1NOdGHDx9QFJ0yZQp4iFMYRFckKP7dwAw78E64efPmr1ZN\naIj2KxIGT0AgENHEwMDA3NwcbB85cqQQZzE2Nn7z5k1paWlycnJtbe2RI0e4FkXIycmhbKdc\neSQljWMwGB4eHgJrS09dXd3q1atJjcuWLTMyMnJwcBg2bNjo0aM5GUn0zJgxY+vWrcQWa2tr\nyjzGEhISxBJw69atq6ioSE1NzcvLS05Otra2FmB2Thf8x48fCIL8/PkTPETZ+N9DfX09eCes\nXbuWawpDSI8AGnYQCKSnAmbZsLCwWLZsmdAn0tLSGjZsGDEOgAYwfS7Gzp078aJbGLKysqBY\nenp6UVGRAEpyJS4urrGxkdRIzP+ckJDg4uLS1tbG78goig4fPnzMmDF9+/Y1MzM7ceKEl5fX\nzp07wbSCe/bsIYXuSktLDx48uH///vxOisPpgmOzU2a2E3q+w57Fp0+fwDuhqakpNjb2l+gD\nES4wQTEEAuk+2traUlJSamtrhw4dymNuDhpsbW2jo6P37dv3+fNnJSUlJyenw4cPcy110NXM\nmDFDT0+PlHhl+vTpVlZW79+/37lz5+vXr1EUHT9+PIPBAHeAIQjCNZ2KYFDW8CDx7du3V69e\nzZo1CzzU1taWlpZWWFgoISFhYmIydOhQPKx1/fr1Fy9exP5fUlKya9cuYiYXMTExCQkJQ0PD\nDRs2+Pj4CONU/g/m5ubW1tbx8fHERhMTE2wNffny5XFxcaQuy5cvpxyqtbU1NTW1sbFRKPdn\n19Hc3JySktLc3GxhYUEZgk0PpzuBlzsE0gPoniVhIQL32KGivoEAA+6xEw2Ie+zevHmD13qS\nlJRcv369aIQZokCC4o8fP/br1w9/zI4aNaq0tBTsxWnVNSsrqyuULC8v58XqvXjxItg3PDxc\nR0eHKDZ48OCkpCTsZLmOaW1t3RVnhPPz589hw4bh0xkbGycnJ+NHN23ahB+SkZE5fvw45SCv\nX7/GvzVJSckNGzbQbDr8hTx9+hT3OMrKyh44cICv7lVVVZmZmeCdIC0tXVJS0kU6dzOi/YqE\ntWIhEMhvQXFxsYuLC76Jh8VinT9/XkNDY8+ePb9Wsa7AxsYmPT09Ojq6qKjIxMRkwoQJlDVG\nx44d6+/vT2qUlJTEfUWpqannzp3Lzs7W09NbunTppEmTOqOVhobG8ePHiVYOJcTceBj5+fkL\nFy4kFXZLS0ubO3ducnIyLzUw4uPjm5ubsUzInaGysvLvv/9OSkpSUlJycHCQk5N7+vRpdXW1\nubl5aGhoVlZWdna2vr6+nZ0d0XA5ffr0ypUrY2NjpaSkxo0bR7nsW1RU5OLigpcRY7FY586d\n09TU3LVrVyd1Fi7fv39ftGgRXpe5tbX1wIED2O3B+yDq6urgnXD06NHf2UkJ4YNuszGFBfTY\noaL+cwQDeuxEA9xjd+TIEfD5o6qqKhpfMVhSDEXRpqamr1+/0uTvqKmpIbnBEARZuXIldjQs\nLAwvEYFx+vTpzqsaEhIybdo0Y2PjadOm2djYkGY3NTUFE93t27eP0xvk6tWrlEESIJwialtb\nW1NSUnJycrjeCfn5+aRNikR69+79/ft3gS/LoUOHwDHV1NQEHrCLWLt2LainmZkZ7yPg6U6I\nd8LTp0+7TOVfgGi/ImFULAQC+S2gLPZVU1PT1NTU/cp0NR0dHbt27VJVVbWwsNDV1Z0wYUJW\nVhYopqKi8vjxY2NjY7xlwYIFp06dQhCkvb196dKl7e3tRPldu3bl5uZ2UrdZs2a9fPkyKyvr\n5cuXYWFhxKQkFhYWjx49AkM6aAq15efn4+lgaBg1ahSlu+7cuXMaGhrDhg0bMGDA0KFD6Vd1\n161bV1lZyeloQ0NDZ+JmKM+xurq6ublZ4DG7Ako9OeXEpod4J8yePbvTqkF+F+BSLAQC6Q5A\n1xSCICoqKpTV1jkRHh4eERHR0tJiY2Pzxx9/UNak+h04fPjw8ePH8Y/v3r1zcnJKSkoCjRtr\na+vU1NSkpKTy8vLBgwfjRl5ycnJFRQVJuK2tjbhPsfOoqam9ePEiLS0tKytLV1d3xIgRlMlc\nKL87DD09vdGjR69aterSpUt4o7i4ODF4olevXv/5z39iYmKePXtWX18/cuRIDw8PGRmZO3fu\nbNy4ERdLS0ubNWvW169fdXV1KeeKiIigP52PHz8uWbLE2NjY3d1dX1+fXpgE5Tmqqqr26tWL\nr3G6Gko9wdVzyH813eY8FBZwKRYVdT8zBlyKFQ3wpdiCggKwFIGvry/vQ5F2EVlaWtKXN+1O\niEuxra2tlN6pa9eu8T4gJ98VX+VKhRWb8vPnT0VFRVAZHR0d7MTZbPatW7fs7e0tLCwWL178\n9etXPz+/KVOmjBgxwtvb+8ePH9u2bSN2NDExqa6uHjRoEDjm7t27KXVgs9m8xzvLyckFBwfz\ndY75+fmkGmIIgvz5559CuHxCJSUlBUy7c/nyZd5HgCXFejqw8oRoItp3LQY07EQDYlTsq1ev\niM4YHx8fJpPJ4zgPHjwA398bNmzoSt35gGjY5eXlUVobu3bt4n3A5ubm3r17g4PwuI0sNjZ2\n/PjxMjIyioqKc+fO/fHjB9+n9H8JCQkhpYszNjbmsVAEpadt8eLFlA7X+fPncxrHzs6O8sJS\noqqqyq/58vLly759++IjrFix4veM2g4MDMRTnEhLS+/cuZOv7tCw6+nAqFgIBPK7MHXq1Kys\nrMTExNraWgsLC75y0gYFBYGNT548AXMU/3LU1NQkJSVZLBapna+kuL169bp48aK7uzuxccOG\nDaamplz7pqSkTJ48mcFgIAjS1tYWFBSUkJCQnJxMKl/GFzNmzPj06dP3799zc3MlJSXNzMws\nLS1JsR2cePr0KdgYFBSkoaFRUlJCaqe5ShcuXBg1ahSPm95qampiYmLmzJnDizDGtGnTvnz5\nkpqa2tTUZG5u3pmcyV3K/Pnz7e3tExMTGQzG8OHDicYoBILAPXYQCKQ7kZOTmzBhggAdKV/n\nv9vGdgwFBQVXV9c7d+4QG1VUVObNm8fXOEuWLNHW1vby8sILUfj7+9vY2IAF70ns2LEDs+pw\niouLT548eeLECb4UICEnJzdu3Ljp06fz25Hya2IwGFu2bDl48CCxUVZW1tPTk9M4ZmZmX758\nOXToUFJSkoKCgqOjo7S0dGhoaGFhIWVIgQBxOXJycuPHj5eSkuK3YzejqKjIl/8S8l8FNOwg\nEEgPYPjw4aGhoaTGESNG/BJluHLx4sWioiI8wZu6uvqtW7cE8KzExcURy4vV1dUtXbp0yJAh\nQ4YMoemVnJwMNn79+pXf2YVCR0cHycrEMDEx2bdvX1ZW1v3797EWeXn58+fP03+nxsbGt27d\nIrbs3LmzvLxcR0cHrJrA4+2RmZl5/vz5mJiYurq6jo4OZWXliRMnrl+/nhfnaF5e3vnz5zMy\nMvr27bt48eKJEyfyMiME0rV026qwsIB77FBR30CAAffYiQbEPXadoa6ujhTnKCcn9+XLF8FG\na21tFe6tRZnH7t27d35+fo8ePRL4W6YMgdy8eTNNFxaLZWRkBPZydnbma2pSNjsmk1lZWUkf\nrULq0tbW1t7ePnnyZMpXj7S0dEREBIqicXFxV65cuXfvHi9lDzg92/fv308af9WqVdxPEkXD\nw8MpYzJkZGRCQkLo+8bGxpLiGDjVtPitgHvsejoweEI0Ee27FgMadqKBsAw7FEXz8/NdXV1V\nVFTk5OQmTpz48eNHAQYJDQ0dOnSohISEgoLCwoULCwsLO68YysGw6yRsNpsy+YirqyulfGpq\n6rRp02RkZCirXAQEBPA47/Xr142MjMTExJSVlVetWoUZATSGXX19/YYNG1RVVREEMTAwuHz5\n8uvXr62srCQlJenXNOXk5BQVFcXFxc3MzB4/fkyjUmVl5ejRo7HzkpCQmD17NumOYrFYFy9e\nNDY2lpCQMDAwOH78OC+3XFtbG82WPmlp6ZSUFE592Ww2aEDLysp2Jkly9wANu54ONOxEE9G+\nazGgYScaCNGwwxH4rnj58iXpTWxiYiKUnCldYdihKGpoaAgaHHv27AEli4qKaIrBe3l58Tjj\nf/7zH1LfSZMmffr06dGjR69fv25sbCTJs9lsR0dHUhfB8gtyKn5QWFioqalJEh4/fjxJrKOj\n49OnT0+ePCFWiaUnPj6eXiV1dfWqqirKvtnZ2ZRdzp8/z+Psvwpo2PV0YOUJCAQiaoiJiQnW\nccuWLaSWjIyMK1eudFqjrgIsVKqqqrpixQpQ8ujRo1VVVaTGAQMGbNu2LSIi4vr167xMx2Qy\nt2/fTmp8/fq1paXlvHnzJk2aNHXqVFKRg6ioqGfPnpG6gBHBvAAWsUVRdMuWLfr6+uXl5aRD\n7969y8jIwD/m5OSMHj3a0tLS2dnZ3Nzczs6urKyM64ykwh4glZWVWCEQ3vtyHRMC6Wpg8AQE\nAvm9YDAYd+7c+fbtm5aW1ty5c3nZw84LHR0d379/B9tTUlKEMn5X4O3tXVFRcfjwYazo+8CB\nA//9919imYGOjo4HDx4kJSWBkSUIgqAoevLkSd6nKywsrKuroxGIi4tzc3N79+4dvtorxKuX\nm5vb0NCAZ+/78ePHpk2bwsLCOMmHh4ebmJggCMJisRYsWJCUlIQfev369eLFiyMjI+lnNDc3\n79WrF3ZtOZGSklJUVHT37t2ioiJDQ8MlS5Zgi87GxsZ9+vQBjekxY8bQTwqBdDXQsINAIL8R\nhYWFEyZMwHP8Hjx48Ny5c5Q+Kn6RkJDo1asXmAKDMg/w78OuXbvWrl37/fv33r17GxsbE1c5\nm5qasHVSTn35PTXK8hIkYmNjExMTra2tee/CI1JSUngswp07d5YvX97a2kojjydMfv/+PdGq\nw4iKikpNTaUPH1ZUVDx9+vTKlStpZJqamkxMTPCMLYcPH37x4oWlpaWUlJSfn9+CBQuIwt7e\n3qNHj6YZDQLpBuBSLAQC+Y1YunQpsXJDW1vbpk2biItunWH+/PlgI7/p5boNNpt97dq1GTNm\nWFpaLly4cMGCBYsXLyaWGtu+fTuNVYcgCMns4Iq6ujovCTuISeNmzJjBS7VfXV3dAQMGjB49\n2sLCQklJidIcnDt3LhZsUVBQsHLlSnqrTlpaGv/iiBlhOOnJiRUrVoSEhIwdO1ZeXp4yVOXL\nly/EPHxVVVVubm7YWvP8+fMjIyOnTp2qo6NjZWV14cKFy5cvc50RAulyummzn/CAwROoqO8M\nxYDBE6IBX8ETNTU1lPvnTpw4IRRlamtrzc3NiSMfOHBAKCN3PngCvNWXLFlC+dC+e/cuJqCu\nrk7zbLe3t+dUsY3mzyo3N7dfv370b42EhARil7t378rKyuJHtbW1LS0tifKrV6/GJNvb28eO\nHUs5pqmpaWVlJSZ26dIlegXExcWJQb4xMTGUYmlpaXx9BQwGw8bGhjiCg4MDzRXooU8nGDzR\n04ElxSAQSI8BC1AF2xsaGoQyvrKy8qdPn+7fv5+UlKSkpDRz5kySCdL9NDQ0HDhw4N69e1VV\nVaampnv37sXcbK9evbp9+zZll1WrVjk5OcnLy3O6LDo6On5+frNmzQKt5JiYmN27dyclJcnL\nyzs4OBw/fpyUKk9fXz89PR3b46itrR0cHJyQkEAUsLW1HTlyJLHFzc3N2to6MDCwuLjYzMxs\nyZIlvXr1evLkSVxcnKys7PTp08ePH//06dP169cXFRWB36+4uDibzc7IyBgzZszjx4+HDh3a\n2NhIc8WUlZU/f/5sYGCAt4wdO9ba2poU4mpvb29mZkYzDoisrGx4ePiLFy8+ffokKytrb2//\n8+fP58+fg5K+vr6JiYkNDQ0WFhaHDh2aNm0aXxNBIF1LN1mYwgN67FBR/zmCAT12ogFfHjsW\ni0WZsyMwMFBgBaqqqjIzMzn5roSFYB67jo6OqVOnkk7W398fRVEwHpbI27dvGxoaKDPrIggi\nJibW2toKThcbG0t0rSEIYmRklJycTFPqvri4mJhh2NbWFjPO+OLJkyc8vo9kZWVramrCw8Np\nZNasWQNOkZeXN378eFzG3t6+vLycXz1RFG1oaGhvb8c/fv78mfLyklpevXolwFy/Cuix6+nA\ndCcQCKTHICEh8ddff5Eax48f7+zsLMBo6enpEyZM6NOnz6BBg9TU1DjlrfiFhIWFRUREkBq9\nvLxu3rzJte+FCxfa2tr4mm7z5s2kjWs/fvwwNzfX1NS8evUqZZe+fftGRkZ+//49ODj4/fv3\nz549oyyGQQOKouvXr+dRuLW1ddmyZdOmTZsxYwalgLq6+u7du8H2/v37x8TEpKamhoWFZWRk\nvHjxAg+t6AzDhw8HF8RRwOm4YcOGzs8FgQgLaNhBIJDfCE9Pz1u3bg0cOBCrfODj4xMUFES5\nq52e+vr6mTNnvnv3DvvY0NCwdevW321vO2X9Vjab7eXl1atXL069pKSkRowYQVP7dezYsZTO\nPE5dqqurfXx8Hj58iH1sbm7++PFjZGQknsvD1NTUwcFh0KBBNOfCierqak7BDZSkpKSIiYnd\nu3dv/fr1WGIRWVlZCQkJGRkZe3v7N2/ecCq5KyYmNnjwYEdHR8H05MSVK1f27NmDbWfU1dUl\nbcLDSE9Ppw/1gEC6E2jYQSCQ34slS5ZkZmY2NzfX1tZeuXJFTU1NgEH8/f1zcnJIjb6+vqC7\n5RciLy/P6VBwcDCn4Akmk1ldXc2pr7y8PCf7lWY6BEGwcqvBwcFGRkZjxoyZOnWqnp7ewYMH\nabrwgpycHGWJMxp5BEGUlJTOnTtXXV3d0tLCYDAYDEZTU9OLFy/43TbXeeTk5A4fPlxRUdHS\n0lJYWEiZzURGRoa+eBoE0p1Aww4CgXQhRUVFISEhDx8+JCYx4QVSeXV+oaz4VFFRQZOANzs7\n+969e48fPwbrHHQRjo6OpE1vOFlZWTdv3uQU95qVlUW5PD1o0KC///7769evmZmZ4FH6Fe3s\n7Oy///574cKFeM2G1tZWX1/fGzducDkNWuTl5ceNGwe2i4uLUyY98fDwIH7EbgMpKSk2mx0Z\nGXnz5s3379+z2ezOqCQYmCZz5swBD82ePVsApzKCIPX19c+ePfP3909OTu6sfhAITrds9RMm\nMHgCFfWdoRgweEIEOHHiBG64yMjI7N+/v9umPnDgAPi4k5OTo4yiYLPZxG1S8vLyly5d4ms6\ngdOduLi4UD6ZDQ0NURS1srKiPIqVQ12zZg2xUU9Pj5hSbuXKlR0dHcS56urqhg4dyuldwKlQ\n2+DBg1EUZTKZlZWVAtTV3bZtG+jNkpSUvHv3bnZ2trS0NLHdxsaGcpDk5OSBAwfiYqNGjRIg\nhoMXSMETlOzZs4eos7GxcUVFhQBzPXv2jLgRcO7cuS0tLQJpzR8weKKnwzV4Ahp2PRLRvmsx\noGHX0wFLiCIIcu/eve6ZPSMjA9ym5uPjQyns5+cHqvru3TtcIDc39/r16//8809iYiLlCIIZ\ndmlpaZyWKY8cOYKi6N27d8FD+vr6+N9FVFTUtm3bVqxY4SUkxbwAACAASURBVOvrCzr/Tp06\nRZqxvb39+vXrfAWjKCoqolSGHYvFev78+ZkzZx4+fNjQ0EB5gteuXQMHnDlzZlZWFibQ0NDg\n7u5uampqbW3t5+dHOUhLSwvRqsOYOHGiABecK7wYdiiKfvjwYceOHT4+PleuXKEMQOZKfn6+\nkpIS6aTWrVsnwFD8Ag27ng407EQT0b5rMaBh19OZNWsW+FK3tbXtNgUCAgKIHiw7OztODqdh\nw4aBqi5ZsgQ7eubMGaLN9Mcff4D5QQQz7Nzc3ChtqdmzZ+NTkJYmVVRUsrOzwaEo62IZGRlx\nmtrPz4/HxW4zMzMUMOwKCgqIF01bW5toB+NQehwXLFjA11Wi/IWAIMj379/5GocXeDTsOs/x\n48fBM5KTk+uG2aFh19OBCYohEMivAd+qRaS0tJSTfFNT07NnzwoLCwcMGODo6MgpSRvvLFq0\naNKkSRERETU1NcOHD7e1tRVA1ffv32/atInYHhAQYGZmRpl0g19KSkoo29etW4fv2bp586aD\ng4Ovr29DQ8OIESPu379PGQPB79VetWqVo6NjVFRUY2Pj2bNnc3NzOUlS5vJwd3dPSUkhTrRw\n4cK0tDRlZWUBtIqOjk5OTlZWVp42bRqYToXTWZSWlpqamnJSm56kpKSPHz9KSUnZ2tqamJgI\nNkhnoLwyDAajrq6OvqAIBMIVaNhBIJAuwcDAIDExkdQ4YMAASuHExERnZ2c8L4aRkVFYWFjn\n81Zoa2u7u7vzompFRQWp0dDQEEEQypRy169fF4phZ2xsTFkOi1j3bOPGjefPn0dRFEGQkpIS\nLS2txMRE0BYhVmLA4XS1Mfr16+fl5YUgyKtXrygNO2lp6S1btvj4+JDac3Nz37x5Q2osKSkJ\nDw93dXUlaQUWbMUuLEZzc7OTk1N0dDT2UV5e3s/Pj/SVcToL4ji8g6LosmXLrl+/jn2UkZHZ\nvn1754N/+YXy+1JWVsYyvEAgnaKbXIfCAy7FoqLuZ8aAS7E9nYSEBHDX1+vXr0HJlpYW8D1n\nYWFB2vvfdTx9+pQ0u4yMzOHDh3/+/Onk5AQ+NrFtZ1lZWb6+vn/88QdWYEqAecvKysDAAmIA\nAZi+GEEQbW1t8O/i58+fvXv3JknysqOxpqYGDDSRlpY+depUcXExLkZciiUV78I5d+4caXCw\nHpecnBwW+YEBriDLycmRaryyWCywwiz9W4CGCxcugJoHBwdjR7ttKba6ulpPT4+kxrFjx7ph\nargU29OBe+xEE9G+azGgYScCPHz4UEtLC3tp9enT59atW5RiL168oDQUPn361G2q+vn5gZvZ\nZWRkiIWqcEaOHLl//35i3IO4uLhgMb9hYWHEjYDm5ubEP+3p06dTXpmvX7+CQ0VGRuJOLEVF\nxTNnznCd/dWrV+DCn5aWFljDjWjYVVZWUmb3CA8PB6e4evWqiooKJqCrqxsSEoIf6ujooMzD\nvGfPHtIgRUVF9vb2uMDixYvr6+u5nh0lpEK3GHPmzMGOdpthh6Lo58+fLSwsMAWkpaV37tzZ\nPb9koGHX04GGnWgi2nctBjTsRIO6uro3b97Ex8fTBA9yqnb/4sULkmRSUtLNmzefPXvGKQyz\nMzQ3N2/evBlUg2h4Yezdu5dSYdzxwxcdHR1v3ry5fPlyTk4O6RClFYIgSEREBCZQW1v7zz//\nrFy58uzZs5WVlUwmMy0tLSEhgZe8JBUVFWBlXltbW8rCvqTgCbBK2Lhx4zgV5G1pafn06VNK\nSgrJZmpqaqI8uzlz5ty4cePly5ekp1xBQcH79+8FKwKL079/f3DGcePGYUeJhl17e3tkZOSN\nGzdiYmK6yOTq6OjIzs6OjY3tzucANOx6OtCwE01E+67FgIadaNDS0lJZWUlpK+BwWtrLzc3F\nZZqammbOnIkf0tLSevnypdC1pUzzNmXKFLxdXV39xo0blFlqEQShf9oKwOLFiyknKigoQFH0\nyZMnxMVuKSmpGzdu8D74v//+C44sJiZWVlYGCpMMOwaDsWnTJnwd2dnZuaSkRIATpK88279/\n/9jYWAGGpWHq1KngRN7e3thR3LBLS0sjRmaMHDkyLy9PuJr8KqBh19PhatjByhMQCOQXY2Vl\nRTTaMJYuXaqvr49/3Lx5c1hYGP6xrKzMzc2NU1SpwFRWVoKNKIqmpKQUFRVlZWWVlpZ6enpS\ninHq3hmOHz9OSuGLIIi9vb2enl5OTo6rqyuxRCmTyVy+fDmPNQxQFE1NTaVs53oWubm5b9++\n9fb2/vjx49WrV799+/b48WNtbW1e5iXx559/0hzNz8+fP39+bW0tL0OhKJqWlvbq1av8/Hwa\nMV9fX1KLgoLC9u3biS3t7e0LFixIT0/HW5KSkjCHAi+a9ETa2tqSkpKio6OFfg9DfgHdYV4K\nFeixQ0X95wgG9NiJBrx47FAUra6u9vDwwHatSUlJrVu3jriYyGAwKLOfgAl4OwnljrpVq1aR\nxDw9PSkfpx4eHsLVB0XRgIAAScn/TV+goaFRWFiIoignk2jt2rVcx8zOzqYsZo8giIyMTGNj\nI9gF89gVFxdTJjd2dXUVeHH87NmzpCQpJG7evMl1kKysLGtra7zL/PnzaTbhPXnypF+/fpik\nmZnZmzdv8EOYxy4yMpJSky9fvgh2jr8VoMcuOjoaj16SkpLavn17T3/wivYrEi7Fiiaifddi\nQMNONODRsMNobm5OT08Hd+MVFxdTvmi3bt1KFKuvry8oKOjMPQNGoSoqKoIJgdPS0sCAX1lZ\nWVI4J1daW1tzcnJoduszmUwwx+/s2bNRFF21ahXlNZkxY0ZpaSn9pJQJmTFsbGwod0Nihh1N\nyQp3d3e+zp0Ii8XKzs5+9+4d5chcY0VbW1vBNXQnJyf8whYWFoJ/aHl5eeDyMWbYcdr0+fz5\nc4HP8feBZNgVFBTg0S04Qv/J1M2I9isSLsVCIJAeQ69evUxMTEDnnLq6OmXBeDwINDMzc/Lk\nyUpKSv369dPQ0Lhy5YpgCkyZMiUgIACP5DUxMQkLCzMyMiKJmZmZhYaG4mIIgmhoaISGhpqZ\nmfE4UW1trbe3t7y8/IABAxQVFbdu3cpgMECxt2/fgrkAg4ODs7OzKROhIQjy4sULbW1tIyMj\nTgUbIiIiiLmFScTFxSkoKCxduhRcAC0qKnry5Amnjrdv3y4vL+d0lB4JCQkjI6MhQ4YQfZM4\nXPPVvXr16tu3b6TGkJAQeXn5qVOnampq6unpKSsrT5gwgbj63L9/f07Lx8LNnPebc+3aNfC7\n/vvvv3+JMhDh0G02prCAHjtU1H+OYECPnWjAl8eOBjDXmr6+Pnb16urqQCuHU2oVXsBiFbEA\nBXpycnJev36dk5PDV0kxNpsN1ltbuXIlKElZaxVBkIiIiIqKCvoVTFlZ2bi4OHDMixcv8vJq\ncHBwIP71MZlM4h5HShISEni/CJSAwbZDhgxhMBj0vShT01Gio6NTWVlJMxTmsevo6Jg0aRKp\nr4uLSyfP7jeB5LHDklSDdP5v9hci2q9I6LGDQCCiwN69e7ds2YKHYVpaWoaEhGCZ565duwYW\nTtizZw8vw8bExNjZ2amrqw8cOHD37t1YAg5xcXEjIyMwfyyIgYHBxIkTOTnPKCkrK5szZ05o\naCip/cqVK2CRhsbGRspBJCUl1dXVX716RfQakmhtbQWtYQRBdHV1edHz+fPnsbGxxBb68Agx\nMTHKENe4uLhp06ZpaGgYGxtv3bq1vr6eeDQpKcnBwUFDQ8PQ0HD9+vU7d+5csWIFniRv/Pjx\nQUFB4Ko3BoPBOHjwoKmpKe9VQIqLiy9dukR5qL6+fuvWrRYWFjo6Ovb29ps3byYG9EyYMKGo\nqEhNTW3w4MFHjx5ta2vjccbfH8pvTUNDA4zagfQYus3GFBbQY4eK+s8RDOixEw2E5bHDqK2t\njY2N/fHjBzGvGFjzCoNrLjdwR52dnZ1gGct49Ng1NDSAC7s4eHY6nKtXr1JKRkZGYgIsFuvr\n16/Xrl0jViHD0dfXB3VoaWnhsVbbv//+i/fC9tg5ODhwEp4/fz4414cPH0hiNjY2+Na3pKQk\nktFmbm7OYDCqqqo+fPhATHZDCaekM/RQvj6YTOaYMWNIku/evSsqKnr//j1oCy5YsIBet98Z\nksfux48f4D6Hw4cP/0INO49ovyKhxw4CgYgOysrKo0ePNjQ0JFZ9UFNTAyXl5eXl5OSampqO\nHz8+b948Ly8vrJoCUWb16tWkXtHR0YGBgV2hOcapU6d+/PjB6Sh4IpqampSShw8fXrly5du3\nbzMzM69fvx4cHEzp2wPzDyMIIicn9+jRoyFDhnDVFuzu5+dHmepvxowZlPsa165dS2qJi4vz\n9/fH/r9hwwZiuhYEQZKTky9fvqympjZmzBhishuQ8PBwsBAcL2A2Danx9u3bJPckgiBr1qzR\n0dGxtrbet28f6VBgYGBUVJQAs/+GGBoa3r17l+j6Xbly5c6dO3+hSpDO0k0WpvCAHjtU1H+O\nYECPnWggXI8dJSkpKeBq3cqVKysqKkhlBoiPDk7Z0TZt2iSADjx67Gg8XpS1cRsbG8GSX0Qo\nS3vhXLhwgZMmTCbz48ePgYGB8fHxUVFRYLiArq4uMYMJ5rFbuHAhUUZTUxPLY0c5RXt7u5iY\nGKjV8uXLMQHKFDZubm68XMmDBw9SnjKlLUtiwYIFpAcLpxBjBoORmZlJeah76rp2BZQJipua\nmqKioh4/fszVUdojEO1XJFePHUUIEgQCgXQDTCbz9evXubm5BgYGkyZNwvfPcSUvLy82NpbF\nYo0ePdrY2Hjo0KEXLlxYv349Hlg6ceLEv//+28vLi5Sr9u7du7Nnz16wYAGCINLS0uLi4mw2\nmzQ4aCPW19e/fv26srJy8ODBxAW7Dx8+fP/+XUNDA9xozwlO28W0tLTmzJkTHh7e0dFRWlpq\nbGxsa2srLi4uISHBYrFoBuzo6OB0yNPTc82aNZyOSkpK2tjY4Nnsnj9/7ujo+PPnT+yjpqbm\nvXv3SCt0oaGhDx48ILaUl5dHRUUtW7YMQZCCgoLY2Njv379LS0ubmZmZm5t/+fKFUn/8IsjK\nyoKb1ThdIhKURiGCILdu3Vq+fDmeH0dOTg4MNw4MDNTX19fX129sbFRUVDQwMKCMxpWUlJSU\nlOSkT11dHS969hTk5eXt7Ox+tRYQIdFtNqawgB47VNR/jmBAj51owMljl5GRQSzZZGpqmpGR\nwcuAx44dw1/qMjIyeCq7vLy8K1euHD9+/NWrV2w2Oyoqirhci0PMITxlyhRQ4P3798TpXr58\nqaGhgR+dPHlyfX19bW0t0ZjT0tJ68uQJL8pTRrn26tULbLSysioqKnr79i3Pz/L/YdWqVadO\nnRIgQLW1tTUwMPDw4cO3b98Gs/symcxFixaB0ykqKqIoeurUKZIBROmrwzA1NcUy7f3xxx/g\nUR6vJGXGlhEjRqAo2tjYGBAQcOjQofv377e0tNDHDmNQBpTMmjULRdG8vDzKLjt37uT3Cv8m\nwJJiPR2YoFg0Ee27FgMadqIBpWHHZDLBzf7Dhg1jMpn0BQyeP38OvmLBAqmlpaWcluRcXV1x\nsZycHNImNtLbuqSkRFVVlTTCkiVLQBNHVVWVPi0wBpvNJm35p4k9tLOz41QCgYbg4GCuavAO\nk8lsaWlBUbSwsNDFxQWcTkZGBozw5Yq9vT2KohUVFaSAYk9PTx4Vy8nJAZ12bm5u4P3Tu3dv\nXlQiJenV0dEpLCxsbGzMysqilBexpVgRQ7RfkdCwE01E+67FgIadaEBp2L1//57yZamgoIAg\niLq6+uHDhynrMcydOxfsZWNjgwvk5uY6OztTrqxhnD17ljhgbW3tkSNHFixYsHLlyqioKNJ0\nlAnSJCUlKXe2Xbx4kZcLwmaz79+/7+3t7ebmxmlrF05iYiKnNUdKJCUli4uLef1uaPnx44eT\nkxPXnBeUblFe2L17N4vFampqOnXq1MKFC5cvX/706VPe1Tty5Ag4JuYmVFZW3rFjB/6EnDp1\nKo8qHTlyZOnSpfPmzdu/f7+npyd2N+rq6mL/IfH69WuhXOfuBxp2PR1o2Ikmon3XYkDDTjSg\nNOxoChjgbNmyBRwNzEmBIIiBgQF2tLGx0djYmGZMU1NTynpZnNi7dy+PNgGCIHv37uX34ty4\ncYN+zHfv3p06dYp3HQ4dOsSvDpRQ5nwWOvv27RNYQzCVMYklS5ZgkmlpaZSL3SC3bt1qaGho\nbW3lutuM/h30mwMNu54ODJ6AQCC/HZxKNhE5c+bMpk2bSNlTDQ0NwbQUeGa4K1euZGdncxpQ\nXFx8+PDhq1evHjNmjIeHh6SkZFRUVFBQUF1dnYWFxYoVK8BsXpR69urVC0VRcEs+TYI6TtBf\nBzExMUNDw3HjxjEYjH/++ae2tlZNTc3JySk9Pf379+/a2tpubm7q6upXrlzJy8szMDBYu3Yt\n5a41EkVFRVeuXPn586eurq6Hh8fgwYNJAikpKWvWrAFzPuOoq6uzWCxOYcW8c/jw4bKyMnd3\n93HjxnEVTktL8/f3LyoqMjQ09PHx4XoL3b59e/PmzRYWFmZmZgkJCfv27UtMTBQTEwOzQONg\n3+CLFy+io6NJh+Tk5EaNGpWent63b99FixZt2LCBh/ODQH4R3WViCg3osUNF/ecIBvTYiQac\ngifAmlog4eHhpF7JyclycnIksejoaOyop6cnj889GxubzZs3E1t0dXWLiopI0zU1NQ0cOJDU\n19fXF/TkGRsbc82HDNLR0TFx4kROSi5btgxF0TNnzhAbVVRUUlJS+J0I5+3bt/Ly8vhoMjIy\npNpr165d47r86uzsvHXrVnoZvuCaDvfOnTtEreTl5cPCwvr160c/LFhWrqOjgzJiBkGQqVOn\ndnR0NDQ0HD58mFLgw4cPAl/23wrosevpwKVY0US071oMaNiJBpwMu+rqaldXV2xTFKcISspS\np6GhofgbXUND486dO/ghTstz9MnecBwdHcHpMjIyxo4diwlIS0tv376dxWIxmcytW7fi+Vms\nra2PHDlC0ra5ufnr1695eXn016e0tHT27NnYOPh1EBcX9/HxaW5uzsjIANNtmJubc73szc3N\nX758Ic3OZDJBY0hBQaGkpAQTKCgoAO1mEC8vrx07dtDL4KufsrKyGzdupCyMQeTRo0dMJrOu\nri4pKYkUhlJWVgbuctPT00tKSrK0tKQZMyQkBLwy5eXlzs7OJEkXF5fy8nIURRsaGs6fP085\n2rx587he9h4BNOx6OtCwE01E+67FgIadaECfoLiqqio+Pj4vLw+seWpsbMxkMil7sVisjIyM\nb9++kQIsKGMy5syZQ+MVIyIhIcFJz4KCgk+fPjU2NhIbGxoa4uLiiLaFoqJiWFgYm80+dOgQ\nbtmMGDHiy5cv9FepvLw8ISGhpqamrKwsMTERf4KdPXuWUtX8/HxOQ7HZ7AMHDuD2maWlZXJy\nMnbo+vXrlKNhxnFiYiIv5XERHgxlKSmpWbNm4YHJ/fr1u3v3LinsFKRXr154KMb06dMLCgow\nte/fv08pHx8fj6JoXl5eQkICuA6upaVFE2FdUVGRkJDw48ePhISEiooK4nf68+dPypSKSkpK\n9F9iTwEadj0daNiJJqJ912JAw0404LHyREREhJKSEv4S1dDQSExMFGA60jqapaVlfX097nLj\nCr/LqWDEpZSUFBiwqaOjU1VVJcDpHDt2jFJPmpx/pKVbBEH09PSqq6uLioqIV5jI1atXy8vL\nQdtaiMjJyZ0/fx7cxUiDlZUVZrhTJv9DEOTcuXP4WScmJhLTDSorK+PldPmioaGhvb2dMkZH\nRkZGgAF/Q6Bh19OBwRMQCOR3oby8/OLFi+np6RoaGosWLSJumZ8yZUpWVtb9+/fz8vKMjY3d\n3Nx4ySsLsmfPnpkzZz5//ry2ttbS0tLFxUVCQsLS0hKsRg9iZmZG3H/GlZaWFjDPHJPJPHTo\nEKmxuLj4+vXr27Zt431wDMqlRjU1NU6hAyhVHpDCwkJ/f/+ampr6+nrKXlZWVv/++29ZWRm/\n6vEOg8GIi4vLyMjw9/ffu3cvWPADJDExMTw8fNasWZxW6o8cOfLhw4fRo0evWLHC0tIyMzPz\n3r172dnZ+vr6rq6uRDuPX+bNmwfG6FhZWQk84G/Ihw8fAgICKioqTE1N16xZ06VmPaS76S4T\nU2hAjx0q6j9HMKDHTjTAPXbJyckkj9Hx48e7R4fKysq+ffsSp1ZRURk5ciTpYYgHYfDI58+f\neX/S+vj4CKY8mBY4ICCAkzCnSNXVq1e7ublRHlq5ciWKokuXLuX9XATD2tq6sLCQ9EXQc/r0\naZSzxw5n4MCBwnJBYR47BoMxdOhQ4hSysrKfPn0SyhS/nKqqqj///JN4dr179+a6W6BnIdqv\nSK4eOwFzS0IgEAhfuLu7kzxGBw4cSE1N5XccNptdWlrKi8sHp0+fPh8+fJg7d662tra6urqL\ni8vHjx8jIyM3b948YMAAJSWliRMnxsTE8F7yFYOTk4MyPbLAHpHbt2//+eefAwcOVFRUtLGx\nCQ4OpizthaGoqEiZs01LS6uxsRFsl5KSwmIFSBU4MGjKggmAlpaWj49PSUkJX10QBAHryZLI\nysoSwBtKg6ysbFRU1MqVK/v376+srDx9+vS3b9+Sfgm0t7eTfJxtbW1d6vUUFpmZmUePHiW2\nNDQ0uLu7/yp9IMKn22xMYQE9dqio/xzBgB470QDz2HFKivbXX3/xPlRzc/OWLVuwsAA5ObnN\nmzfz8lfAZDIPHjyI1ZWSlpb29vaurq7uxAn9L+/evaM8KQsLC1KLpKQkqQRt17Fu3TrS7AoK\nCj9//iSVMsOQlpbGen3//h2Mh9XW1ubhHcIrgwYN4kteV1cX++s4fvw4V2EtLS2hXD3MY0cv\nU1RU5OLigpnv6urq58+fz8/Pnz17Ntaiqal56dIloSjTRXDK58I1grsHIdqvSOixg0Agvx5O\nTheuzhgia9euPXXqFJYZmMFgnD59evXq1Vx7+fr67t+/v6GhAUGQ9vb2a9euubm58eXw4wQn\n5bOzs01MTIgtLBZrw4YN7e3tnZ+UKydOnJg5cyb+UVVV9datWwMGDKCsi4W9BhAEMTU1vXbt\nGnGtfN68eerq6kJULDMzk16A6CDU09MLDAzE9ME0pKe1tbWT6vFIW1vbrFmzHj9+zGKxEASp\nrKxcv3796NGjg4ODsZby8vJVq1ZxXT7+hXC6D7vtGkK6Ghg8AYFAupx+/fppamqWl5eT2q2t\nrXkcITMzEyzA5e/vP3ToUDExsUGDBtnb24NpOGpra0+ePElqfPXqVXR0NKdEtbxjYWEhLS0N\nviabm5tBD2VSUtLDhw95qQzRSeTk5EJDQxMTE79+/aqqqjpp0iRVVVUEQUaNGnXnzh2S8KhR\no3Bzys3NbcqUKW/evKmrqxs5cuSIESN8fHxSUlK4zjh//vy8vLzExMTOqD1o0KA///xTU1Mz\nIyNDR0dn8uTJ+JryqFGjuHbHb6S2trbnz5/n5ub269fPwcGBx2JivBMYGPjlyxdSI7i+vHv3\nbi8vL4EL6XYpI0aMABvV1dUNDQ27XxlIl9AdfkOhApdiUVH3M2PApVjRAA+eePjwIenhw1fG\n16CgIPpH2bBhw8DSEfHx8ZTCxEwZneGvv/7i/WG7e/duoUwqGK2trcOHDyfqIycnl5SURNOl\ntLSUFFsKWirC3YdHeUtcu3aNPnOevLz89+/fURTNyMggFgvW09PjN+KB61Ls7t27eTwXLOPx\nb0hVVdXcuXNJ2j548OBX6yVMRPsVCZdiIRDIb8G8efPCw8NtbW379OkzZMiQo0ePgg4kGrim\nt01JSfHw8OCxF+bE6jxbtmzR1dUF2ynNHWFNKhgyMjJRUVEbN240MjLS1NScOXPmhw8fKJ03\nOFpaWvHx8X/88Yeenl6/fv2GDx8OLmGj/3edVE1NTVNTk3dHLIlHjx5dvXqV2IIVru3o6CA2\nOjo6rl69esCAAdra2nPmzImLizM1NWWz2a6ursRiwYWFhQsXLgSr+nYGHrPwSEpK8pW0r5vx\n8/M7duzYkCFD+vTpM2HChBcvXixYsOBXKwURHt1lYgoN6LFDRf3nCAb02IkGPCYoRlG0qanp\n6NGjM2fOdHFx8fPzI5WdaG1t5WWpCNwADhoZffr0qaysFNYJUtaDB3OeycvL//z5U1iTCsDX\nr1+9vLwMDQ319PQmT5585coVFouFouiNGzfU1NSkpKQUFBSGDRs2bdo0Dw+PqKgoUncmk9m/\nf3+u1793797Tp09ft24dpb3LC2ZmZsR5t2/fTjkLeIKfPn2iHPDFixe8XyWuHrsfP36Ay7ug\nQ3HhwoW8T9rNwATFPR1YeUI0Ee27FgMadqIBj4ZdXV0dcRENQRBbW1uSbZeQkMA1aQhYryI7\nO5uYzldZWZmvNz09QUFBxOL0GNu2bSsrKxsyZAje0qtXL5rkc93Aw4cPQT2nTp26cuVKTleS\nlGWQyWRyKlxBiZycnJqaGv6RFLpBM5SOjg5xXk4J9lpbW0nnGB4eTil569Yt3i8UL1Gxt2/f\nJtp2w4YNO3fuHDGmeMSIEcKKvO4KoGHX04GVJyAQSA9gz549xEU0BEFiYmIuXry4ceNGvMXK\nyiozM/Px48e5ubmNjY1gHVVJSUnQq2dkZJSWlvbkyZOMjAxdXd25c+cKK9izpaXF29ubFDwh\nKyu7efNmTU3NL1++BAcHp6SkaGlpzZw5k8cyrF1BY2Pj8uXLwSCPiIiIiIgITr18fX3nzJlD\nzFEyYMAAMG6AEwwGY8CAASdPnszLyxswYICLi8vPnz8jIyOxgl3jxo0LCQlZuHAhFklKhOQX\nHDhwIOX4ISEh8+fPJ7aQfhjg8JtmhSuLFy+eMGFCWFhYeXm5ubm5k5OTpKSkk5PTs2fPKisr\nLSwsZs2axbWcLgTShXSbjSksoMcOFfWfIxjQYyca7XeCaQAAIABJREFU8Oixo3wrT58+HTv6\n6tWr8ePHq6qqDhw4cP/+/c3NzUwmEyzouXXrVky+vb391KlTgwcPVlZWHjVqVGBgYFecWkxM\nDOVDVSjTtbS0HDhwYNCgQaqqquPGjQsPD+elV0ZGhrOzs6ampp6enoeHBxZNAtY945F//vmH\nzWbv2LFDQUFBTExMSkqK3xE+fPgwYcIEaWlpcXFxRUVFKysrQ0NDVVVVW1vbyMjIHTt2kOTF\nxcXPnDljY2OjoqJiamp69OjRkpISyg2L3t7e2CmzWKxLly6Zm5srKSkRfYQYM2fO5OsZwovH\njpK3b9/a2dmpqakZGRlt3769vr4eP1RaWurt7d2/f38NDY3Zs2d/+/ZNgPEFhsFgHD582MTE\nREVFZcyYMSEhIdBj19OBS7GiiWjftRjQsBMNeDTs9PX1wZf35MmTURQNDg4mtTs4OLDZ7OLi\nYmdnZ6xFRkZm+/bt+CzLly8ndfHz8xP6qUVFRVFaM3fv3u3kyGw228nJiTTs48eP6Xvl5OSQ\nljj79etXU1PDaY2SK+fO/T/2zjOsiSxs2JMQSCBApCNgQaWJIAguNhAVFXWxIPau2BAVxba6\n1rXv2hZdy67rYsFVsa+iIqBiL4ANAQVE6b2TEJL5fpzrnW/emTOTIQSUvHP/8IJTnzkzzjyc\n85QDM2fOJBTi1SwDAwOqHTUAfe7dGzduzJw5E/O01dHRmTdvHqHNpEmToArljBkzwFVDtUPw\n7/Tp0xt7JKqcYhcbG0uQwdPTE5gwVlZWdunShbAmHz58aOwUSkP2ijh69Cir2LVqWMVOPVHv\npxbAKnatAolEQv8oMlTsoAHeNm7cKJfLoWb4V65cAR0rKiqSk5PB+DU1NfX19a9evSK319HR\nqaqqUtVVA0pLS8nZGhAEycjIwNpUVFTIZLLGjnzjxg3ysKampkBXoGLChAnkXitWrCgqKuLz\n+eQqhcTExEB3y5YvX3748OHc3Fwwb25u7smTJ8nN6LU6BEE6dOggl8ulUunFixdfvnwpkUig\nXsyEtK2AQ4cO1dXVpaenk6t4PN6DBw+qq6sbu+yosopd165dyWKEh4ejKLpp0yZy1fDhw5WQ\nTQnIGieCIAYGBt9tKBZVod6fSDbcCQsLS7Pw5s2bAQMGCIVCPT09Nze3uLi4poy2a9cuwjma\nnZ3dypUr8/LysrOzye2xcLj6+voODg4xMTFOTk66urpCoRCa9bK2tlaJvLT0GBgYkOPYbdy4\n0draGkGQY8eOtW/fXiQS6erqzpw5s7CwkPnIUAfPwsJCExOT7du3S6VSaC9oiOAXL14YGxtD\ns3IJBAIaGYKCgsC+Drlq7969CxcutLa2Xrp0aVVVVdu2badNmzZx4kRCM4XOFllZWcuWLRMK\nhWPHjnV3d7ewsCgrKyM3e/v2LaFET09vyZIlurq6w4YNI7dvaGioqqpSqFaqipqamuTkZHI5\nuB1UN6XZxUIQhOJBKisro0rxx6IesIodCwtLo8nNzR00aNC9e/caGhrkcnlCQsKIESMSEhKU\nHtDS0jIxMXH27Nl2dnZOTk7Lli178uSJUCikUj7w5Q8fPhw+fPi7d+9QFJVKpe/fv4d2ge6u\nNZFFixZdu3bNx8fHysqqf//+ERERGzduRBDk2LFj8+fP//r1K4IgdXV14eHho0aNolLIyFBd\ndVlZ2bp169atW8e8FygMCQm5fPlynz59hEKhtrZ227ZteTweNIWUjo5O3759jx49GhYWRh+J\nTSKR/P7771jswJMnT+7fv9/Dw8Pa2trPz+/JkycK4/ZxOJwDBw5gXh0lJSX07bW1tbt27aql\npVVVVSWTyWQyWVpaGlVL+qFUiKamJtRVAqw8zU1pAah2altMAJZvQwttHaoO9igWVfd9ZgB7\nFPs9Q840j+B8HfAwj2NHBdlJAkEQfMqEfv36KXzRWVtb059jMkEsFn/9+hX6TOJtuaRSKVSn\nOXv2LNXIFRUVz58/x359/fo1zbVwuVxwDFpbW5uTk4Oi6Nu3b/Pz86Eh3w4ePEiY68uXL9Al\nxXjw4IFEIvn69Wt1dbXChUUQ5OHDh4QlAj9TKaD4C2EyPp7evXszafb69Wvmt7W8vByLa0hz\nFCuXy79+/Qp9kqEbh/fu3UNRlJwHD0GQoKAg5uI1hZSUFLIO17VrV9bGrlXD2tipJ+r91AJY\nxe57ZuDAgeTPFSECGaDpil1KSgrhlFZbW/vXX3/Fng2FyQCEQiFe+VCCvLy88ePH83g8BEHa\ntGmza9cuguUcXrH78uULVIx169aRR05ISMCMCDkcjp+fHxh5+/btNFd05swZPz8/gmIkEokI\n0V6GDRuGl/PIkSNMcqe6ubmBK2WYO+Hw4cMoimZnZ48dOxbsXRkaGu7Zs6e2tpbGkZYq6IxK\n8qteunSJyW19+vSpu7s76GJra3vjxg2oYieTyXbs2AFOlnk83sSJE/Py8vANvnz50rZtW7wA\nmIO2XC7HXHwAjo6OeJ/Z5mbfvn342UUi0b1791jFrlXDKnbqiXo/tQBWsfueIeeaBF8scsum\nK3Yoiubn51taWhKm++2330AtNCPCiBEjli1bFhAQsG7dOnIO2UYhlUp79epFGJ8Qvxev2JWV\nlUF9DrZv304YGWoKhr2ywREzeRwEQfAhl/FoaGhs3rx56tSps2fPPnPmDP6/T1RUFLRL0zl7\n9qxEInFzcyOU79u3Dx+lGcPS0nLr1q2lpaXQVercufPGjRv9/PyaIlJsbKzC25qZmUmwAhQI\nBLGxsWTFjqxk9+7dmxA9u6KiYufOnRMmTFiwYEF0dDS+Si6Xnz9/PjAwcPLkyQcPHiSHVm5u\nnj59umTJknHjxm3cuDE/P58Nd9LaYRU79US9n1oAq9h9z5w7d478Nf3ll1/ILVWi2EGn09XV\nBd9IcsALBEEiIyOrqqoIX19AY98PFy9eJI+vo6NTW1uLtcErdvX19WDHS+H6QNORcTgcbEen\nvLzc1NSU0IA+/YaXlxc2fk1NDbbyTBKyKYGRkVFxcXFERAS5Sl9ff8uWLeRy7EgaaumFHeh7\ne3srJ1KHDh3q6uoU3lZo1o0BAwYQFLvi4mLoNqfC6DPfLaxi19phvWJZWFhUz/jx4xctWoQv\nGT58+Jo1a5ppug8fPpALq6urgXfC5s2bBwwYgK/icrkBAQF6eno6Ojrjxo0DZ6PV1dWhoaEi\nkcjAwIDevZTAgwcPyIW1tbVZWVnQ9nl5eeSECgiCrF+/vk2bNqtXr66trQUlSUlJ5GYoimIR\nW0Qi0Z9//ok/0NTQ0OjRoweNtMCf4O7duy4uLsBN2MfH5927d1QHxHgamy9BKBSePHnSyMgI\neoMqKysnTZo0YsQIfGFQUBDmPyuTyci9YmNj165dm5ub27ZtW+iWHgEfHx/8Sb2xsfHZs2eZ\nOAekpKSQC/HeGLdv33Z2djYxMcHuFx7oJbOwfA+wKcVYWFiU4eDBg1OmTLl7965EIunXr5+v\nr2/zzQX1ReBwOCDsGZ/Pj4mJ+e+//+7fv//PP/+UlJTI5XLQRiqVRkZGvn///uXLl4GBgdjO\nX3Fx8bp168rLy3fv3k0/dXFx8T///MNcKgRBRCIRl8vFZMBTUVGxe/fu3NzcU6dOIQhCzpQA\naN++PfbzH3/8gVdAZTLZnTt36AW+ffv26NGjgdNrQ0NDTEwMODqk6YUNrrCNtra2p6cnh8Px\n8fGZMmUKsC2DLgWXyzUyMvrvv/9u3br18OFDPp8/aNAgvN+GlpYWWSqpVLpjx47w8PDc3Fx6\nSebPnz9hwoQBAwaUlpaeO3fu06dPXbp0mThxIjQYHhloM+xCnjx5gq0hFIU+vyws34yW2jtU\nGexRLKru+8wA9ihWPVDJUWxWVhbZkH/EiBGEZuSochgrVqwgF2LupTSsXbsWOiDBBZiQ4WDU\nqFH0L97ExEQURZ88eULelDIzM8PGoQp4Bj3qxYCm8VAh165dI6xSZmamrq4uoRn9aRGKok1J\nqNq9e3clIj/jgZ6wb926FRzF9u/fn2Z2kUjURMPNbwh7FNvaUc1RrKamplAo1GWAkv9HWVhY\nWGDI5fJjx46NHj0a+d/+kt26dfvrr78Ijaki2CEUkVrlcnloaKi9vb2ZmdmQIUMePXpEbgMd\nk8vl/v333zRiHzt2zNnZmaYBCLrbq1evkJAQvG4nEAjwG3JUV2RmZkYTqi0vL49m6qZDiBhc\nXV197NgxfX19/IU4OTkdO3YMQZDk5GR/f39LS8vOnTsvXLgQC9RcW1vLZIOQinfv3nXp0gWa\nWYEh/v7+BHV/woQJwcHB2PhUHfX09P755x+yNw8Ly3cCo6PYefPm3bt3Ly0tDQQHl8vlnz9/\nfv36dffu3e3t7VFYaHIWFhaWprN27dpdu3bhS3x8fBYsWDBq1CjyrhVNqgOq47mzZ8+CH6Kj\no6Ojo2NjYwnmetAxLS0tLSwsaMQ2NTV99erVtWvXbt269eeff5IbYCFa9u7dO2XKlH379mVn\nZ//www9btmzB24dRXZG1tfWjR4+cnJyqqqrItVpaWhKJhEa8JoKPLyOXy/38/O7du4dvsGXL\nlp9++onH46WlpXl4eGDx8I4cORIbG/vq1StdXV2BQMDhcBr1+Vi8eDEIy4cgiEwmy8zMHDx4\n8P3795kEMoTy66+/TpkyJSYmRiqV9u3b19PTE1tPkUhEDpjs5OQUHBzs5+dHCG7CwvJ9wWTf\n78KFC05OTiASJsaHDx/s7OyuX7+u/H6iUrBHsai67zMD2KNY9aApR7GfPn0iv7I0NTWpMl1C\nt9wAcXFxZPdSMuAvVTzQtK2rVq0iNKNKNi+VSm1sbAjd27ZtW1lZyWQFysvLoSchIA/pkiVL\noFfRTA6wAF1d3S9fvmASnjlzhtzGwcEB1EKjlmzatAnUNio/BJfLhQZ5ad++PZOVZAgWxw56\nBE8+g26NsEexrR3VhDtxdHS8cOECufzw4cPdu3dXUjRlYRU7VN2fWgCr2KkHzBU7sVi8f//+\nCRMmTJs27Z9//pHJZNAoJwiCREVFUQ1CDjmmoaGxa9cuFEXv3LmD3wCjyiWalpa2bt26MWPG\nzJ8/Py4uDkVRQkaHfv36nT9/fs6cOf7+/tu2bQOhSagUOxRFX758aWZmhnVv06ZNTEwMVvv6\n9evFixePGjUqNDT048ePKIrK5fKIiIiZM2cGBAT8+uuvV69eJexNjh07FvStqakhZ2JYtWqV\nk5MT9NKUQCgU4jc7NTU1XV1dHR0de/TosXDhwg0bNtjb20M77tu3LzAwEJrSavjw4SiKxsfH\nN9bGjip2Mc0L/9mzZ0FBQaNGjVq9ejVeH6UCU+zEYvGgQYPws3h4eIwePXrBggXx8fEKx/me\nYRW71o5qFDstLS1CxEXA+fPn+Xy+kqIpC6vYoer+1AJYxU49YKjYVVVVEYLZDh069PLly9AP\nOdC3qEhKSiJoGw4ODkD9ys/P//3330NDQ48ePRoSEgJVHfT19fElmzdvJlhTEdQLCwuL7Oxs\nGsUORdHy8vIjR46EhoaGhYUVFhZi5adOndLS0sKGEggEN2/eHDduHH58wkajlpbWnTt3sBFk\nMtmlS5cCAgK8vb0XLVoE8pL17NkTum4M6d+//+DBg/v167d69eomDgXF39+fxs0FvyAEqFxG\nOnXqVFxcTF72gwcP4pvp6OgoTECCzzwhl8uvX7/+008/LVq0iBDKDvyp0EphFbvWjmoUOwsL\ni8mTJxM+sQ0NDcDUoEkCNh5WsUPV/akFsIqdesBQsYOqWbt37yaoWQiCmJqa4iMDkwE2+wTI\n2Tmh0enI0zFh5MiR9IodlMLCQvIxKxMBzM3N6bMXbNq0idyL+bnnkydPaMZpOtu2baOJMzd4\n8GBoedu2bb28vKh6TZs2jbAImZmZ5FkUpgyGphQj588QCATv379v7B3/TmAVu9aOarxiAwMD\nIyIibG1tg4KCNm3atGnTpuDgYGdn5+vXr8+cOZPJCArJzs7+5Zdfpk6dOnHixJ9++ik5OVkl\nw7KwsLQKbt68SS6Mi4s7duwYYU/rn3/+oddRIiMjyYVkUzlPT8/Q0FB8iYmJSWVlZSOE/h9u\n3boFjVpHT3x8POZVgMFEgPz8/ISEBOzXx48fr1q1auvWrenp6aBk/PjxBHM0T0/PS5cuMRQM\n7BG+efPm9OnTDLswZ/To0SBlCLS2f//+CxcuJNvS8Xi8q1evnj9/nir2wo0bN1AUffny5b//\n/vv48WMQvY88S2ZmZmMDC2dlZZE9ZMVi8e3btwmFqampFy5ciImJIdzWioqKO3fuREZGZmRk\nNGpqlZCYmPjvv//Gx8czDMfNog4wUQ9lMtn27dsJfkAmJiYbN26k/+uHIXK5fO7cuWFhYTU1\nNWKx+PTp0+PGjaMyLmZ37FB1/3MEwO7YqQcMd+yg+V4HDhyIoui7d++WLVs2evTolStXAis0\nKuRyeUhICNQSy9zcHNrl9u3b8+fPHzt27NatWwlRPJjD4XDy8/MbuzLQNFwMAYfRMpkMf1TK\n4XDmzp07b948cnvw9z3e1I+Gly9f/vjjj0rLRoWxsXFYWJhcLqc5h8Vazpo1y87OTl9f39jY\neNSoUVjQuKqqKmtra3IXHR0dT09P7FdnZ+cNGzZAB3/58iXNTSHv2OFzUeDZsWMH1qa+vn7a\ntGlYVdu2bW/dugWqIiMjjY2NsaqFCxc2Mfwec4qLi318fLCp7e3tk5KSUHbHrvWjylyxcrk8\nKyvr2bNnT58+TU9PJz+dhw8fVu5xKS8v9/Pz+/DhA/i1tLTUz88vNTUV2phV7FB1f2oBrGKn\nHjBU7MaPH0/+dq5du7ZRc/3+++9UusLo0aMVdpfJZPRBTGhQwl/y48eP5HGY+BNwuVzwips0\naRJzCbds2TJmzBiFzTQ0NLCUXyqnT58+MpkMeghOQCgUUn0C9uzZQ25PzgMBdQ3W09OjP8cn\nK3ZSqdTExIQ8FN7Qk5xMTyQSZWVlJScnk/PM7ty5s7GPinKA6I94unTpUl1dzSp2rR1VKnYK\nQRDk7du3yvVduXLlvn37Kisr6+rqIiIiAgMDqb4ErGKHqvtTC2AVO/WAoWKXmZmJj46GIEin\nTp2AxwNzbG1tIToCgujr63/69InJCFeuXCH0/fHHH6GunQQUZlmAQvC3BV99skUXmeTkZBRF\nmQiGYWpq+unTJyY2fFTOpyrhxYsXKIpOmTJFYcvVq1dDF62uro4Q/JnKYo+c5u7vv/+mvyNQ\nG7vz588Txpk0aRJWK5PJoKv6yy+/QPOdWFlZKfGoNBaQRpnMhQsXWMWutaNQsftecsWuWbNm\nw4YN4H+7gYHBhg0b8IY1J06cwFLraGlpyWSyiooKmtEUNmjtAHVHvW0mQFR65WyeWgsoiqr9\nsxoXF7d///5Pnz6Zm5tPnjx55syZ0E0pAwODmJiYbdu2PXv2TFNTc8CAAT/99BOKoo1anJyc\nHHKhubn59evXjY2NmQzl7e199erVPXv2fPjwwcTEZOzYscHBwdnZ2TNmzEhNTZXL5UKhsLa2\ntqGhgdAxLy9Pifu4Zs0ac3PzPXv2FBQUcLlcOzs7FxeXCRMm7Nq1686dO3V1daampq9fvyZ3\n7N+/f48ePerr65nPVVxcvHLlSpFIBF79hoaGXbt2vXXrFrkl1F5QJBL169evsLAwKSmpoaGB\nw+HweLxGCQCYNGlSbW1t586dp06devbsWZrkE58/f6Za0qtXr+7atSs6Orq2trZHjx6+vr6L\nFy8mN/P19fX29o6IiMjNze3SpcvSpUuHDRuGjXn16tWjR49+/vy5ffv2c+bMCQgI4HA4MplM\nJpMR8rwNGTJk06ZN+/fvr6ys5PP5AwcO3Lt3LzZOVVUV9DWVmZkJDR+dm5tbXl5OTiWnWqhO\nkNPT0729vdX+taPen0ipVEpv1PttFLuHDx/+9ttv4OcdO3bY2Nhs2bLF3t5+27ZtmpqaN2/e\n3LhxY1hYGBY/KT09/fnz5+BnkUhkbGxMf8PU+I7iUcJeu9Xxf+E+qvE1Xr58GTP5ysnJefXq\n1evXr6FHaQiCtG/f/ujRo/iSxq5Mu3btUlJSCIUjR47s2LEj86H69OmDT1QPBIuLi0MQZPbs\n2devX4f2at++vXL3MT4+HtNH37596+vre/bs2V9++eWXX35BEOThw4fQ89OioiKy8T49crkc\nHz7G2NiY6tvP4/HImuuOHTv4fP6cOXPAr2DboFECAEDQ6dzc3Pj4+Hbt2lFtLCEIYmVlRbWk\nurq62BIhCJKVlQVt1r59e09PT0xmBPdEHT58GDPCy83Nffr06adPn8AGG/m9evXqVcxBuK6u\n7saNG+CICZTw+XwDA4OysjKy/FCFz8rKiry8Ksfc3Bya2AOL3aPGrx0Mdf1EKr53KtweRBgf\nxdbU1Hz+H8RicUJCwsiRI+vq6rAGs2fPxtus1NbWVvwPX758AbFXqABHsTQN1ACwz/ytpWhe\nwFGsTCb71oI0I1KptLy8/FtL0VyIxWKy5ROCIE+fPm2mGU+cOEGYS1dXNyUlRSWDR0VFUb1F\nBQLB3bt3lRgzOjqaPBr48IMG9fX1Hh4eCl/0KsTV1XXhwoWEQhsbm4KCAujdbAo0QU8MDAw+\nf/7MfCX9/f0JI3h4eNTX10MbFxQUkKPl8Xi8z58/V1ZWSiQSfGOJRGJkZESW8PHjx1ibbdu2\nEWpNTU3z8vIyMjLISeEOHTrU+CdFGaZPn06Y2tnZua6uDhzFtowM3wr1/kRKJJLv8ShWR0cH\n7wQHRJHjlGvCHzTa2tpYgAOwda9wH7u5N7q/B/6PXKMaXya4NHW9wLS0tNLSUnL5kydPmqis\nfPz48cOHD23btnVxcdHU1MTKZ86cmZubu3Xr1rq6OgRB2rVrd/ToUTs7u6bMhfH06VNoubGx\n8cGDB11dXcF9BH+plpSUdO/evX379kqMmZ2d/e7du6KiIhRFe/Tocf78+RkzZhCSsTYTXC53\n4MCBw4cPr6ur++eff0Chm5tbeHh4QUEB9G7q6+vT2Et4eHg8e/aMqlYsFgcHB584caKmpgZB\nEGyHqVOnTsePH4c6SlPx119/IQiChXTx9vYODw/HPxt4EhISyNuNDQ0Nz58/9/X1JbxzkpKS\nyEljEQR58uQJlvZjzZo1JSUlYWFhYCvFzs7uxIkT5ubmCIJcvHgxMDDw8+fPCIIIBIJVq1YF\nBQUxv66mcPDgQalUimVD7tOnT3h4uEAgwFa7ZcT4hqjrNSq+LiV25qhAlHWeqKmpmT59elhY\nWFVVlUQiuXjx4tixY3Nzc6GNWecJVN0tQwGs80Rrhypg2KFDh5Qes7q6Gp+YwcHB4dWrV4Q2\nZWVlDx48ePnyJX0U38aydetW6OVkZWWh/5NSLC4uDq+OzJs3TyqV0oy5Y8cO6JhYtDahULh/\n/34URT9+/EjegAE0h69Dly5dHj9+HBMT8/79exAAgepu7tmz58WLF2TfT8Dr16/T09Ojo6Op\nzt8fPXpUXl4eHx//4sWL3Nzce/fuAa1LuXuUlZUVHR2dlpZG3+zu3btQYa5cuUJwnvj3338J\nPj0YYWFhhGGLiori4uKSkpIIN72+vj4hIeHevXvfxGXh69evd+/eBfvWoIR1nmjttBqv2M+f\nP2/evHnKlCkTJ05ctWrVmzdvqFqyih2q7k8tgFXsWjsymYwcaZbP51OFsWBCYGAgYcAOHTq0\nzBpiZr54evToAWpLSkpycnLIZ3Y///wzzZjkQ08o169fR1H08ePHTBqrCjs7O7wvc319PTSA\nHPDPHTlyJLlKU1MT6/7lyxeoD+/ixYub5W7RUlVVhU+AC9DV1S0uLsYrdomJiVSHxXw+H4vP\n1epgFbvWTqtR7JjDKnaouj+1AFaxUwPi4+MJWSJ2796t9Gjl5eXQbKEnTpxQnch0EMKV6enp\nvX79GlSVlJTs3LmTLJu+vj5NQFo9PT2o3kDAx8cHtCeEz2jWuCQIgmBRdlEUlUqlN2/eJNxN\nLEhvbW2tUCgkdI+IiMBf7IQJE8hTCAQC+sByzcTFixcJZnanTp1C/3e4E2ioZ0CLxaJrDljF\nrrXTasKdsLCwqB/9+vV79erVgQMHMjMz27VrN23atP79+ys9Wl5eHtSdkMazUiEoil65ciU+\nPp7D4Xh5eY0aNYqm8Y4dO7y8vM6dO1dYWOjk5LR06VJ8QGOoGJWVlRUVFeT9ITA1OaUYlPT0\n9G3btn39+rVz585nzpw5efLkp0+fRCIRNBIKFJFIVF1dDY0tMmHChMjISGgVuKLIyMgjR44U\nFhZ27NjxzJkz0dHRwEe4T58+WFjpu3fvzp0798qVKyADh7m5+blz54AlpVwuv3DhwuPHj4Gd\nGQGxWFxUVIQ3RqyoqDhx4kRqaqq5ufmECRPs7e0ZXmOj8Pf3f/Xq1eHDhzMyMjp27Dhv3jxX\nV1dCm+zsbHJHLS2t27dve3t7N4dU3xYURS9evPjo0SMNDQ1vb+/myD7C0kKoUItE2B27lkK9\n/xwBsDt26gHDAMVMoNqxCw8PV27AhoaGESNG4Ify8/NTLuNTSUnJrl27yLKJRCKaAZmEC0b+\n985co4ISY4wZMwaaT0xXVxdFUWiSBgRBbt26RVgfLpeLN6fT1tY+f/782LFj8W2GDBmCGZlJ\nJBJ6VV4gEODjISQnJ+Pl5PP5LbYdC8Dv2M2fP58scPfu3VtSnuYAumMnlUoHDx6Mv9KAgIDW\n+/pV70+kwh07Ve7kR0VFdezYUYUDsrCwsGCIRKLZs2cTCq2trcmpkxhy4MCBGzdu4EuuX79O\nk5eMnmnTpuGzggKoctcCyJknoOAjBkgkEiVki4qKmjFjBrkcGPmtXr2aXOXg4JCRkUFYH7lc\nXltbi/1aV1c3Y8aMixcv4tvcuXMHywa7devW+/fv0wgWFBSEt2ObNm1aQUEB9qtEIlm0aBF0\nq68FCAoKIhw9IwiybNmybyJMc7N7925C8J2EsPcwAAAgAElEQVTIyEhCXEmWVgMT9bCgoGDG\njBkWFhbQN5SKdFCmsDt2qLr/OQJgd+zUAxXu2KEoWlNTg0+Q2q1bt8TERKVH69u3L/mF1q9f\nPyWGAl6x9+/fx/uLLFy4kN4rVi6XE+IPGxkZ7d69Gwt+RhPpjQoHBwdo+W+//TZ16lR8oIRR\no0Zh/7+WL1+Of73b2tp++vRp0KBBjZ0d4ObmBoZ1dHSkaTZz5ky85zKVAtcUN+rGQvCKvXDh\ngqmpKRBDIBBs2bKlxSRpPqA7dm5ubuSVx4w7Wx3q/YlUjY1dcHDw5cuX+/fvP3jwYOhRCAsL\nC4sKef/+/YEDB9LS0qysrGbPnj1w4EAEQb58+fLbb7/l5+ePGDHCyckpICCge/fuPB7vxYsX\nf/zxR2ZmprW1NQgSBn7t2LFjUFDQDz/8gCCIRCI5ePBgXFycTCbz9PRcunRpYmJicnIyeerU\n1NRBgwYZGhqOHj168uTJhJBRmZmZe/bsSU5ONjU1nTRpEsEmz8vLKzk5+fXr18XFxc7OzlZW\nVvSXyeFwLl26lJWVdeTIkfz8/ICAAHD0OW/evISEBLlcnpqaumjRIvpBhELhxYsXKysrZTLZ\n8+fPk5KSoKFJqqqqTp06tW3btkuXLjU0NIwZMwacwGJLPWbMmI4dOxobG0skknfv3s2bNw+6\nPkxISkqaOXNmWVlZRkYGudbNzW3z5s3dunXT09NbvXr1lStXamtr27VrB82xgSAIQ0tEJaiv\nr//jjz/u3LmTlpbG4XBsbW0HDBgQFBSEBcALCAjw9fVNTEysq6tzdXU1MTFpJkm+OdBFbr6V\nZ2lemKiHRkZGV65cUZGu2VTYHTtU3f8cAbA7duqBEjt2UVFRBI/F3377LSkpieB3GRwcjKLo\nyZMn6V9xJ06cEIvF7u7u+EIQPFYh06dPxwv2/PlzwtncihUrQBXYsVM5SUlJCoUEW4wSiYQ+\n7PP58+eZLHXPnj2ZrExTCAkJQVE0NzeXrCdBNw7u3LnTHGtbX19PyB0H8PT0pN9nbe1Ad+ww\nPxg8CxYs+CYSNh31/kSqJtyJjo5OYWGhikRqKqxih6r7UwtgFTv1oLGKXX19PVnr4vP53bp1\nI394bty4oTBiiFAoXLt2LX0bGv777z9MNujB4rNnz9BmU+xQFCWbFeIRCARAAKpYxxjkiHrQ\npW5uzM3NCwoKUApNgoyfn18zvQQwQ0AyICi0ugJV7D5+/Ej4r2RsbJyTk/NNJGw66v2JVI3z\nhJub2/v375m0ZGFhYWkKb9++zc/PJxSCw0Fy49OnT1dVVdEPWFNTc+3aNaXlwSzKc3Nzoa9B\naL5XFXLo0KHNmzdDnWF1dHRu374NzpqpsilgkBtAlxoKML/T1NT09/efMmUKI7n/NxwOR1dX\nd9SoUQ8ePABWa1Tr5u3tbW9vz+Vyzc3NV65ceebMmWZKDEWzYs19T79DunTpcv/+fR8fH21t\nbaFQOGLEiAcPHuCj+bC0IhgZzO3bty8oKGj//v1YajwWFhaW5gAaUI0KhhHs8F6lNGC5SvFc\nu3atS5cu8+fPpxIsOzt7zpw5qampnTt3njdvnlgsPnHiRHZ2tp2d3dKlS7t27YpvLBaLw8LC\n7t+/L5fL+/bty+fzHzx4kJGRgaKoqalpz549V6xYgVnrAwQCQY8ePfT09Mj+sB07dvTy8gI/\nK1y3rKyskpISfG4M5kutqampo6NjZ2e3bdu258+fnzlzhmFHDKFQ+PnzZyaza2pquri4mJmZ\nOTo6zp8/H9tG2rFjx7Fjx8rLyy0sLHbv3g2yh9XU1Hh4eISGhlIl/qKB5vKpquRyeXh4+I0b\nN8rLy93c3FasWKFOVneurq7R0dEymYzD4TR37GuW5oXJvl/fvn3btWuHIIiOjk4HEqrYWWwE\n7FEsqu77zAD2KFY9aOxRbG1tLfQjDc1nhSCIhoYG/StOS0tr8eLFCt+EPB6vR48eVLX9+/ev\nr69vbDgnPp8fFRWFXRowwKfvYmRklJmZiV8QmnPk+fPnY81+/vlnhfKYmZllZ2fjl7qxznAa\nGho3b95sVBf87PijveHDhyvsIhAIHj16hKIoIcQaAUtLSxAYuVGsX7+easBt27ZBu+DzFCOw\nm9UqYDNPtHZUY2Pn6ek5iBoVicoUVrFD1f2pBbCKnXqghPMEeUNo1apV9OHQaPj1118rKyu7\ndOmCL4Sqg3/++SdNeJEDBw6QT+gIngdkzM3NsfAZmzZtYiKwr68vthSJiYlUzSwtLYuKirCW\nVVVVtra2CgcfM2YM1uXZs2dM5CFgbW0dHBysREcEQcaOHYvN/vHjR3IWMjI2NjZMVEn6jwKU\n7du3Q4fq1q0bNMvZhQsXyI2HDRvW2Hm/Oaxi19pp0VyxLQOr2KHq/tQCWMVOPVAujl1sbOyI\nESNsbGwGDhx46tQp8Bj8999/0C/xzJkzhwwZYmNjM2TIkCtXrly7dg38Onjw4MuXL4MBS0pK\nli9f7urq6uzsTOWOsGHDhvfv30+aNAmLdoHnxx9/RFH0xYsX/v7+dnZ2np6eISEhChUOBEFe\nvnwJZOjXrx+T9pqamliyij179kDbTJs2jbxHVVpaumLFCicnJ5rBQaoJwNSpU5nIQ4DL5crl\n8rCwMAsLC+hC0aCvr48XOD093d/fv02bNtra2lZWVkOHDoX2GjlypMKRTUxMGvWAoSgKna5N\nmzbFxcXQ9tBEFFpaWsqlKvmGsIpda4fNFcvCwvINKCkpCQ8PT09PNzc39/PzI5iaKWTAgAED\nBgwgFFKlDbWzsztx4gS+xM/Pj9DG0NAQU5IKCwv//vtv8jgymaxr164RERHx8fHkPKHA7srd\n3R1LtBAbG7t//36F13Ls2LElS5Y4OjrW1NQobIwgSENDw7p164YNG+bl5QXNjYsgyPr168kp\nwgwMDEJDQz99+vT27VuqwfHWY1KplIk8BFAU5XA4wcHBwcHBDx8+9PT0ZN63vr4e/2unTp3O\nnTt39uzZV69eCYXC8vJyaC8mKXEZ2gtmZmaeOHEC5LrNyckhNxCJRFR53qD3AvzJwWRqFpYW\ng06xY5h9OSUlRUXCsLCwqAMvXrzw9fUtLS0Fv+7YsePMmTNU4WeZY21tbWlpSf4eN0q3QBDE\n1NTU1tY2LS2NUI7Z9vXu3Zt87kaepUePHjo6OvgUW1COHTsWHh4+ZcoUGn0LD4qiO3fu3Llz\n5+LFi+vq6sgNTExMoNldY2Jihg4dSq/i4BNjzJ49+9y5c0xEwoOPkOLi4qKrq8s8jK1YLJ4z\nZ87x48fBr5WVlf3791cYqy8rK0vhyEyegcjIyKlTp9LnZINGtgP069cPkxzfXqGVJwtLC0Pn\n+WLMjBaTlYWF5ftHJpNNnjwZ0+oQBKmrqwsMDCwpKWniyFwu99ixY4TCwMBAaGYweqAJYQ8c\nOCAWixEEIW+GIQhiaWlJKGnTps3evXuZTCeRSP7++2+q7TcqwsLC/vrrL3I5j8cj+/nW19f7\n+/sr3LhKS0v79OkT+HnIkCH0Kb/IcDic8+fPY7/q6uo2NrXu33//DTbMEARZuXIlkwjMChGJ\nRPv27aNvU1BQEBgYSK/VmZqabt68map2+vTphF1kHR2dQ4cONUpUFpaWoGWOhFUIa2OHqrsB\nAYC1sWulvHr1CvqqgWY+UIKnT5+OHj3a1tbWy8vr6NGjylk43bp1CypkXFwciqI2NjbkKn9/\nf+hQUVFRvr6+nTp18vHxOX/+/MmTJ7EQJAqZPn26q6urubm5qalpoxxUnz9/ThDj8ePHDPvu\n27cP6yWTycaNGwf2nGiCXHC5XC0trc6dO8fExJBX4M6dO8OGDevSpYutra2dnZ2dnd348eNj\nYmJ8fX2ho40fPx50NDQ0JNcyX4euXbs6OjrOnj378+fPCu/46dOnqcbp0KGDk5PTggULcnJy\nCLliCdTV1W3bts3Dw8PBwWHq1KmpqakK5/0OYW3sWjusjR0LC0uLQhUxWGEkYQRBUBTNyMjI\nycmxsbFp27Ytvqq4uDg5OdnMzKxnz56XL18uKytLTk4WiURyuRyvjjQ0NLx///7169empqa9\nevWiCm9GLyT0bJGqi6+vLzh3xtQUb2/v9u3bK7xYBEGWLl2KxVgxMDCgMjKjEkYqlX748KG6\nutrR0ZHJ8uL7Arhc7vnz5+/fv//mzZvevXvPnz8/ISGB3OX169f29vYlJSXZ2dkPHz40MDAo\nKSmxsrICB7uDBw+GhiPJzc2FKtAVFRUoiqanp0NlZh5d79ChQ97e3uDnhoaGlJSUiooKR0dH\n6E2nWZ/ly5cvWbIE/PzmzZvi4mJ7e3tobF6BQLB27VqaADQymSwtLa24uLhr1674oH0sLC1K\nC2mYqoPdsUPV/c8RALtj10opKiqCbrq8evWKvmN6ejreUmrq1KmVlZUoitbX1wcHB2OWTK6u\nrvPmzcMyMdja2sbHx4MRHj16hNeoeDzehg0boI9Qamoq9H0I9n6g/pKWlpZpaWlUwmMpxYqK\nikaNGsXw9evs7PzlyxfQkfk+n4aGRkFBQWxsLGYwp62tvWrVKobdr127hon97Nkz/LYZVfyR\nNWvWPHr0yM7OjlA+YMAAmt2y5ORk6GjLly+ncRBmmO2Ax+Nh0V4ePnyIhXrh8/k///wz+abT\n7Gjev38fRdHMzExMTUQQZNKkSUABZc6rV68wl2Qej7ds2bKGhoZGjdAysDt2rR023Il6ot5P\nLYBV7FovGzduJHw7p06dSt9FIpGQg/dOnz4dpY3QCzAyMsrOzs7NzYXukRw8eBA6Y1BQEKFl\naGgoqEpKStLW1iYP1a1bt7q6OuhomGI3YsQIemkJuLi4gJTzz549I0TRowqqp6+v//nzZ/K+\nVK9evRRO5+bmhh1ei8VicqZdqvxdVL6i7u7uNGeX5CjEJiYmzs7OVOIxjFqHIMimTZvAFDk5\nOWRTb2iyV2h2WnDCXl9f7+7uTqhqVGw8sIVJJeR3BavYtXZYxU49Ue+nFsAqdq2XhoaGAwcO\ngDwNZmZmoaGhCi8TGqOOw+FkZmbq6Ogo/Mxv3Lhx27Zt0CorKyvojGKxeOvWrcAlol27drt2\n7cIrKDdu3ICqOBcuXICOBhQ7er9XaL5XBEEww7W4uLhevXppamrq6uqSo73gmTx5MrnQ2tp6\nwYIFIGYyh8OByj9hwgRMZirPD5FIRDM1GXx2DfIiT5kyBYS743K5bm5u0EAzCILo6upOmDAB\n7F/Sq/JGRkb79+/HNsN++eUXcpu2bduShamurl6zZg2moerp6a1cubKqqgqltrnMysqifWz/\nP2FhYeTuenp6QGv/rmAVu9aOQsWOzQfHwsKiYjQ0NJYsWZKZmSkWizMzM9esWQPdAMOTmZlJ\nLkRRNCkpSWE8EdD98+fP0Krs7GxowDY+n79u3brs7GyxWPzly5dVq1bhw+1aWFigsPhkUDkx\nqGQAUHnFYmN6e3s/efKkpqamsrISGg4XA3rK+eXLlz/++EMikVRWVspkMpAHkgA+WMy7d++g\ngzPJYIGHZk34fP7p06fr6+srKipkMtnLly+pbN2io6P//fdfIDONZsnhcAoLC5cuXYodzUPX\nPC8vDzg44xEKhTt27KioqBCLxWKxuLKycvfu3bq6ujSXQH9DFbasqqoqLi5mOAILi6pgnSdY\nWFiaCz6fD43EhvHu3btt27Y9fvyYSnuzt7fX0tIiBLYlExUVRRX+18zMjD5BAraRlpGR8fvv\nv6elpVlaWvr5+XE4HLJu9/Lly+rqaqANkKG3D9PW1oa6ZRACqWhoaJw6derkyZM0Q3Xs2JEc\nKAToQ3K5/NKlS1evXoUG4E1PT587d662tvbXr1/T09Ohg3fq1OnFixc0sxOIiIi4c+eOh4eH\nvb391atXCwsLu3XrtnTpUrAadXV1Bw8efPLkiaam5qBBg6ChZBAE2bdvn0AgKCoqsrKyoglc\np6WlFRISEhwcjGmfBCcbgEAg8Pf3t7KymjVrVu/evQm14I7n5eUdOHDg7du3pqamVM4u5Bg3\nCILk5OQcOHDg/fv3ZmZmEyZMABaZUDG0tbWhnr8sLM1Ly+wcqhD2KBZV931mAHsUqx7QpBS7\ndOkSfWyLESNGoKTM641l8+bNTOS8d+8ewaate/fu0AE7duyIT9IKAEexMpmMKsIth8P5+eef\nyeXW1tZisRgbRy6XK/S9MDAwePfuHXQTdNy4cUwScNGgo6OTlpZG9qJobBhePT29pKSkyspK\nQqB7Ly8vKt2OOXw+Hzv//fjxI5WeDYAaWb59+5ZgNUjWwIYOHUrumJSURDBMXLduHYqiOTk5\n5BEWL17M5NlrYdij2NYOa2Onnqj3UwtgFTv1gEqxq6qqMjAwoPkee3t7FxQUoCiKBQRRgpkz\nZzLxTGxoaOjQoQOhL5/Ppwp9PGPGDMIImPPEgQMHyO05HM6BAwfkcvncuXPx5ZaWlu/fv8eP\nEx4eTn9Fenp6CQkJKIqeO3cOmNOpFi0trczMTDc3t6YP5eLigoURwcPEaFIhZmZmmEJ85coV\nExMTqpYCgYDsutuzZ09yS/wz4OXllZeXR35UXFxcyB1fvHiBouidO3fwW7YBAQFUrjbfFlax\na+2wcexYWFi+R168eFFWVgatWrp06dSpU4GXYnFxMTSy2uLFi3v37n379m2oJtSvX7/Ro0f7\n+fkxNBdLSUkhH/9JJJLp06cLhcI7d+4QqqKioqiGgsZn1tXVBSrOsWPH1qxZ8++//xYXFw8Y\nMGDYsGGEPUuoFb+enl5gYGBNTY2Hh8fMmTNB3L7x48fPnTtX4SF1Y6mvr4+NjX3z5k3ThwI7\nduRyJkaTCikoKEhMTASOwKNGjQLmiYmJiWTHC7FYHBcXN3PmTKykpKQEetY8ffr0Xr16FRYW\ndu3atWfPnmTvk/z8fGiqjDt37ri7uw8ePDg1NfXJkyeFhYXdu3fv1q1bE6+RhUU5WMWOhYXl\nG0CjkfTu3RuLPUGVqF4kEk2aNIkqUlq/fv1CQ0ObLkx9fT30mI9KKqoqfNDdTp060Xh9Qrtz\nuVyoB2tjc5QxRCwWM48STA/NQjUd/F0TiUS+vr5Ue8CE+0sllVwu9/T0FAgEVEaZVB2x8XV1\ndaGxmllYWhLWK5aF5f8uIACEtbW1trb2Dz/8cPXq1aaPeeHCBTc3N21t7U6dOm3YsIFqe8bN\nzY3qJNHDwwP72dzc3NramtwGmLKNHTsWOsLRo0e5XC7IkaWtrW1gYKCvrz9o0KBnz55B2zs4\nOEDTFfTp04dseo+QUsXX19f//vvvNjY22tra9+7dI7eXSqXa2tp2dnYgTgdUBgB0OqlUqqGh\nweVyDQ0NQYQ2BEGo/F6bzqlTp1CYR3Bjad++PT7itGrR0dEhn4o6OTmRI/MhCPLDDz/s2bPH\nwsICLGPXrl2hqpu5uTn9pFZWVlA3CyWyFVMhlUr37dtnZ2enra3t6Oh47Ngxcl5gFhYFtNCZ\nsOpgbexQdTcgALA2ds2NXC4fNmwY4YXw77//NmVMcpSykSNHUjlP7Nmzh/xG2rhxI6HZ7du3\nCW3waVuhWSKo0NbWpkqAcerUKULjoKAgFEXr6uoIAXX19PQIKSjmzZvHXIaQkBCaBRSLxVAr\nLjxbtmxBUXT9+vXkKjc3N5rwv0ygCjXSp08fhjkhMG7evPn169dmcgs9cuQIdAGPHz9OaBkS\nErJo0SImY+rq6r58+ZIm3jKKouT4yVjqW5VAtkpk6P3DHNbGrrXDOk+oJ+r91AJYxa65uXbt\nGvnbZmpqqnQeJIlEAt33ioyMhCp2KIpeuHCha9eufD5fS0vL1tb25MmT0Dv+6NGj4cOHW1lZ\nubm57dq1izDa0qVL9fX1NTQ0qFI14PHy8qKS//bt2z4+PpaWlh4eHocPH8bWoaysLDQ0tFu3\nbtbW1pMmTSJoda9fv2aiNOChTx5fXl6+YsUKMB10PTU0NN6+fQt1U01MTCwrK1uxYkWHDh2A\nKR6HwzEwMIiJiYEqN23atDl37tygQYMsLS179eo1Y8YMqMDLly+vqKhYuXIl/XUZGRm5u7tb\nWVkNGzbs4cOH4HIyMjKoMpUxZ82aNcePH+/du7elpeWAAQPwWdHI3LhxY+DAgeCK/vzzT6pw\nfVCGDRtGr9ihKBofHz9s2DArKyt3d/fffvtNYXvmpKSkkEXi8XhQNw6lYRW71g6r2Kkn6v3U\nAljFrrnZtGkT9NuWmZmp3IAfPnyADrh+/XoqxU61zJo1S+GXWygUqnbSEydOMNcbAGfPnmUy\nslwupwoysnPnTmj5uXPnqEZbvHgxtAs+I+qkSZOgbY4fPy6VSqkOvvFUV1cT5lVJhN6bN28q\nd3dQFD19+jTzidq2batCRa2xnD17FirVrVu3VDgLq9i1dtjMEywsLHCook4oHY2CKr2ESsJb\nMIHJRE3fPVJiUuW6cDgcKjNEqgNTmpGhVRoaGvhEZ1ADNQRBwMahwvQhPB6PLLBAIAB7h02h\nKY9Qo/q22LPaqNm/rVQsrQ5WsWNh+T/K8OHDyWeXvXv3NjU1VWK05OTkRYsWkT/h2tragwYN\nIhQmJCT4+Pjo6uoaGBiMHTuWKgUC4OnTp97e3jo6OoaGhpMmTfry5QtVS4WhfRm2IfD169fJ\nkycbGhrq6Oh4e3s/fvwYqzp79izU/ZYmnC+Hwxk3bpyBgYFQKNTX1x8yZMiMGTMsLCy0tLS6\nd+9+4cKFlJQUPz8/kUikr68PVeBMTEwmT55MtvTncrkjR47k8Xh8Pt/Q0JDH4wHVcOLEifX1\n9X5+fuShhg0bNm/ePD6fz+FwNDU1obFaNDQ0Vq5cyefzz58/T3VRABRFRSKRpqami4tLZGQk\nKBQKheQHABuZfkBA27Zt8f40GCdPnnR0dNTU1GzXrt3atWsrKysPHTpkY2PD4/Gsra137twJ\nnFX79+8PPdGGMmLEiNLS0qCgIDMzMz6f7+7uDs1i3Ex4enqSHXstLCx++OGHFpOBRR1oqb1D\nlcEexaLqvs8MYI9iWwCC+4KpqSm9+RcVX758obKRP3DgAMF54sOHD4RtMwsLi8LCQujIiYmJ\nhI2ijh070ixaSEgIzevO0dGxsQteUVHRqVMn/CCYBwbZTl8lELbNCNHUNDU1Hzx4gKJodHQ0\n840cb29vFEUJqS/at2/v4+NDP3tTOH36NFjDz58/kx0v9PX1of4fBDgcTnR0NPm+/PHHH4SW\nhBQXCILMnz8fNI6MjMRvTFLB5XLj4uJAbDw8V69ebdQz0xQuX76M/3NLKBTGxsaqdgr2KLa1\nw9rYqSfq/dQCWMWuZXj+/PnKlSunTp26e/dupf/jQI3bunXrlpiYSM48MXr0aHLjZcuWQUcm\nax4Igqxfv55GmIkTJ5K7WFlZHTlyRAlTP6glore3N5WnSHPg5OTk7Oxsb28/ffr0nJwcTLYv\nX75s2LDB19eXySBv375FUfTBgwfLly+fPn36vn370tLSoC0XL17cq1cva2vrJkbxMDExwRxQ\nKisr9+zZM2rUKA8Pj6FDh27ZsiUvLw+6D0dm69athJtSW1tLn0YM482bN6DLx48fly9f7urq\n6uzsvHDhwl9++QXqPuzk5EQu7NChQ0u+iD59+rRu3bqpU6du3Ljx69evKh+fVexaO6xip56o\n91MLYBW7VoSrqyv5c+js7IzCUoqRk3ch/7OlRMbIyIjc+Mcff6QRBqromJmZKXdpUDVUJBKl\npqaSy5sJBwcHGgkPHz7MZJCdO3cSOlLtOE6cOBE0aHpcQ3pHHIYp0YYMGULo+PbtW4YChIeH\nU80OjSRMZYJZXFxMcyGtC1axa+2wzhMsLCzNDvRzSLWn0nyNle6ixGgqd8KgQYnrJUM+K6fa\nccQM+5p+jSqRnHw6zPwMmkYA6OzQE1sNDQ2FjiMsLN8PbEoxFhaWpjJmzJiHDx+SC6kak1OB\n0TQ+cOAAtHFdXd2BAwfu3buHoqiXl1dISAj4VI8ZM+bixYsMx6cHRVFjY2Nyub+/v5GRUbt2\n7b5+/cpwKC0tLaXzunbv3n3y5Mlfv37t0qXLkiVLCPujPj4+enp6VVVVNCNoaGhMmTJFJpP9\n9ddfJ0+eTE9P5/F4ffv21dTUJKfJqq6utrKyKioq0tDQgDZgiJeXl7GxMTiEffz4sZaWlre3\nN4fDiYuLq6iokEgkVJm7CAQFBRHEW7FiBZfLJaRk4HA46P9OmGFgYODt7U017JgxY65cuUIo\nhCp2vr6+TFTJvLy8X3/9NSEhwdDQ0M/Pb8aMGUzcgevq6sLCwmJjY0FCs2XLlin9RwgTkpKS\nfv3114yMDGtr68DAwIEDB2JVd+/ePX78eHZ2tq2t7dKlS5sY6ZrlW9IyO4cqhD2KRdV9nxnA\nHsW2IhoaGghJLHx9fYF9FfkoNi8vj+CNa2RkRGX9Vl1d7ebmhm88Z84cMCzhw+Pg4FBVVQV6\nTZs2DV/l4eFRW1urxHXNnTuX/M7s0aNHcXFxz549G/Wm3b9//08//cSkJcHMy87OjtDg4sWL\nBDkjIiLonQM0NTWLi4uhjrHNhIGBQXp6emlpKTQjHHOcnJzwV1pTUwPdaCSrUFwu98qVK/T3\nd8qUKQoF6NChQ3Z2tsJH5ePHjwTBJkyYoLBXXV0dQU23s7OrrKxU2FE5rly5Qjj+3rt3L6j6\n9ddf8eVaWlrXr19vJjFaAPX+RLI2duqJej+1AFaxa13I5fLIyMjFixcHBwdHRkZiN46s2C1Y\nsID8+dy9ezfVyFKpNDw8fP78+cuXL799+zYohDpUrlixAut18+bNZcuWLViw4NSpU8rl0oiJ\niSFPYW1tLZVKt2/frlAhmDBhgoeHh7u7++LFixMTE8GYDx8+XLVq1dy5c+fOnUu1nWNoaHj2\n7NklS5YsWrTo8OHD5JA0hoaG5P/+qamp7u7uNPKQFcRmRVdXt6ysDHqvG8vr16+xyxw3bhzz\njlj2Cxpu3LjRo0cPcl9PT8/AwMCDB7eVYioAACAASURBVA8yfNNCvXwuXbpE32vz5s3kXlSO\nRE2krq6ObLHK5/MzMzMzMjLIfxiYmpqKxeLmkKQFUO9PJKvYqSfq/dQCWMVOPSArdjY2NuSP\n2eDBgxs1bO/evcmDdO/eXYWSU22wlZeX4w+wqFi6dCnN4NHR0TR94+PjQbOIiAj6BnjoVTeG\n554qJCoqCnqvG8u+ffuwazQzM2PeMSAggMmN7tatG7lvv379mD8qDQ0NPB7ErmnhwoX0HT09\nPcm9unXrxnxq5jx58gS6SuHh4VTZU54/f94ckrQA6v2JZJ0nWFhYvi9kMhm5kGAvpRBo+8YO\nosQUCILIZDImE9G3oTdcw/pSDQIthy4sBvq/7c9aALlcTi8S83Gwnxt1FQxnb/qzhKKocoO0\nwGOMQbUacrm8UY8Zy/cPq9ixsLA0F2VlZY8fP05OTm5oaMAKobsUXl5ejRpZ4SASiSQhIeHp\n06eYV0FmZubNmzevXLmSmJjIxI8BOoWjo6OhoSG0ioCdnd39+/eh3hUfP35MTU2lOorV1dXF\n7K6gG5O6urrW1tYPHz588OBBXFzchw8fwDebXiorKyuFMqsQgUDwww8/MFkoheAHaZRp4/z5\n8xs7Pgb5gczPz79//35aWhpZ3eHxeNA7pfCpVsn/BYa4uLhAo0/37du3T58+5HKRSMT6T7RW\nWmbnUIWwR7Gouu8zA9ij2FaNXC5fv349ZrjTuXPn+/fvg6q8vDzCgZqjo2Njn2dyQoh27dqV\nlJSA2qtXr2KpDvT09DZv3jx06FB8Y0tLSyZ55QMCAggvTGNj48uXL1dXVxPyHBDyQ5iYmGA/\njxkzBouCJpFIFKomf/75J14G8rHvoEGDCCbwzs7OCQkJ+fn55DxjAA0NjeTk5EadYzYRbW3t\ngoIC8r1uLIsWLcKvRllZGcPII127dmX4LBUVFVlaWuL72tjY4D0Y6urq5syZg9X27NkzOTmZ\nMMjr168JnrNDhw6VyWT0U1dWVhJOq62srJovZl54eDhhlbBY32vXriVUnTlzppnEaAHU+xPJ\n2tipJ+r91AJYxa5VExYWRvhOGBoaYmH0c3Nzg4KCXFxc3N3df/rpp4qKCiWmKCkpCQ0NdXNz\n69GjR0hISFFRESh/+/Ytk2+/UCj88OED/RRSqTQwMJDQUVtbOykpqaysbPXq1e7u7i4uLsHB\nwTdv3pwyZUrXrl379etH0DgRBPHz8wMDDhkyRKFgoaGhmAAPHjxQ2B7Qrl270tLSvLy8RYsW\ndenShdzgxx9/JJRQbRkyjBsMEIlEenp6ZA8PBEFMTEywe+3k5EQe1tDQ0MPDo1evXlZWViKR\nyMTEZPTo0X///be/v7+9vf3AgQP//vtvsm6Ul5fXt29fLS0tgjJNIDIykvmzVFBQsHjxYldX\nVxcXl9DQUMIXZPHixYTB7ezsqqurCYOkpqZOmzbN0dGxb9++u3fvZpjmpLS0dOXKlW5ubq6u\nrkuWLKHKracqYmNjhwwZYmNjM3jw4HPnzmHlcrn87NmzPj4+9vb2I0eOBFGEWi/q/YlkFTv1\nRL2fWgCr2LVq2rVrR/7WbtiwoQWmnjdvHkOlhLAbBAV6SjVr1ixCM2yzkBzPD5CcnFxbW0uv\niwD4fD6mNLi4uDC8FgRBDh06BHqNGDGCXMtkauWIioqi8iZJSUkBIh06dIhcKxQKlUjyBnjx\n4gW9VD179lRi2MrKyvr6enxJRUUF1O8Ey4Tb6mAzT7R2WOcJFhaWlkYmk0FtyzIzM1tg9s+f\nPzNsyUQe6Gg0Halmz8zMzM/PRxnY/kskkry8PPBzTk6OwvZkqaAyMJlaOTIzM6mu+t69ezQi\n1dTUFBUVKTepwrusqoctJycH6unSMg8zC4sSsIodCwuLitHQ0IBaVhEsmZqJtm3bMmzJRB7M\nVo9hR2h70MXU1JTJthmPx8NWD2+rpxBMKuYroBIsLS2pZuzVqxf4AbosAoEAmguYCVTrjKEq\nZxEzMzPomXXLPMwsLErAphRjYWFRPYsWLdqwYQO+RCgUzpo1q1GDVFZW3r17Nz8/38HBAWSj\nomoplUrv3r2bnp7esWPH2bNnk43EyQgEAiZek0FBQbNnzyYULly4kKq9gYEBOdVYly5dSkpK\nnJ2d3d3dFZ4hTp8+HfNe3Lx5M8OQvHp6eiB9VmJioo2Nzd27dwkN+vbt++jRI3wJj8fDeytj\nNCqNmLW1dWFh4aBBgwiDg/GjoqKMjIwqKipkMhk575mHh8d///1XUlISHx9vaGg4a9YsV1dX\nuVweGxubmppqYGCAIEh5ebm9vb1cLk9NTbWwsBg8eDDIuGVkZGRtbU2zbbZo0SLs54yMjIcP\nH0ql0j59+jg4OOCbZWZmxsfH19fX9+nTp2vXruRxDA0NJ0+efPr0aXyhpaXl6NGjmawPiqL3\n7t2Liop6+/atvr7+mDFjJk6ciNUWFxfHxcUVFxd3794deuj/HVJfXx8dHZ2ZmWltbT148OBG\nWWSytBAtcySsQlgbO1TdDQgArI1dq6ahoWHkyJH4V421tXVWVhbzEWJiYvA+nr1798bcIwh8\n/PjR0dERa9m5c2eCj4K9vT3BWE1PTy88PJyJGHv37sXHntXU1Dxy5Ai5WUlJiVwup9cUe/Xq\nlZGR0aFDB6yEy+US/FiFQiHmYvL27VuoGwQVQqEQ2yEj0KZNm5KSEnx2BBsbm5MnTzZqRxBA\nUK+hgXnx4Le7FG5Yjh8/nj5/hoWFxYMHDzZt2kTWJzQ0NMAPWlpaq1atwm7Ntm3b8GkVlixZ\nglXt3LkTX7Vo0aKKigqCjR2KouXl5fiMeZ06dXry5AmTh6e4uLhv374EOTt16gQsCy9evAiU\nV8DQoUPJDhnNQVNs7JKTk/FxsG1tbd+/f69a8VSCen8iWecJ9US9n1oAq9i1aqqrqzt27Ej4\npHl6ejLsXlRUZGpqSug+evRockuZTEavCgD27t0bHx+/d+/ebdu2Xb9+nWFEibi4OPJQ+EQI\nGCUlJWRHYDLgdfzff/8tXrx4x44d0Fy0Q4cORVFUIpFAN5CUBnjmvnr16vTp03FxcUC3gOZd\nbW6gmR6Yg1eGMH7++eeCgoLr16+fP3/+8+fP2H25ceMGufGxY8dQFL116xa5at++fWTFDpCY\nmHj69OmYmJi6ujomDw+KomPHjoVewuDBgzMyMsDWI5558+YxHLkpKK3YSaVSQiJjBEG6detG\ntWLfEPX+RLKKnXqi3k8tgFXsWjVXrlyBftIURhgBHD9+nNyXw+EUFBQQWiYkJEAnIuDo6KjE\nVUybNo08FDRAWklJSffu3RWKweFw8vLysF76+vrQNmVlZVCdsiloamoSZI6NjVXtFAyhCrPS\nFPr27Qu9g/7+/uTGwGEWesbdvXt3VakpJSUlVFfK4/Gg6YYFAoHSbsLMUVqxI5+2Ax48eKBy\nIZuIen8iWa9YFhaWb0BhYSG0vKCgQOnuKIqSy6kmUq4Zk15UQzGZAn8JKIoSbM6w8uLiYuUE\npoGcUSotLU21UzCkORJVNeqmgEJoVXFxsapEAn+XQqsaGhqgs4vF4oqKClUJoHKa+J+apcVg\nFTsWFhbV07lzZ3Ihl8tlaDQG7a6lpYU3UKNpSUa5bPRQaamGYnJpmpqa2Ak1h8OB+g5rampa\nWloyvC7m4I3JANAsWC0ANCxcE2nUTQGNoVUqXHYrKyto3GYEQQQCAXQiQ0NDpd2EWwCqxVHu\nPxdL88EqdiwsLKqnf//+5JSXs2fPZhgkYuTIkeQ8lcuWLQPuohKJJDEx8eXLl7W1tV26dJk0\naRKhJdmi/+eff6aZrri4+PTp0xEREeXl5SC/bUpKikwmCwkJIafXXLFiBf7XhoaGa9eubdiw\nYfDgwYSW5JO4kJAQ/PHrtm3byMIsWbJEW1u7R48e0DjDSvPTTz8Bad+9e/f06dPKykpnZ2cm\nZnyqjWzM5/P79evXlLns7OzImUVARqxXr17t3r378OHDWEbXFStWEDJ9IQiybt06BEFCQ0OF\nQiGhinBz8aSkpBw6dCguLo7hjqNQKFy+fDm0Kjg4eNq0adbW1oTyn3/+uTnOqVWFk5PTmDFj\nCIWjRo1iYoTA0qK0yImwKmFt7FB1NyAAsDZ2rZ3c3FwsJISGhsaCBQuYP7QXLlzAO2xqaGiE\nhoYC46fIyEjMk9TAwOCvv/6qqKiYPXs29kUcP3785cuXsV0EY2Pjf/75h2auwMBATJ/gcDiY\nc2XXrl2fPXsWHR1N0Ay4XO7OnTtB3+vXr+PdMzU1NUUiEfjZxsbmzJkzmH+upqbm8uXLyRZU\n69evx9RQDoczY8aMhoYGUFVcXDxp0iQaXUdDQwObDkGQNm3aBAcHQ/fDbGxsUBSNi4vDtql0\ndHS2bt2alZXVFP8JghZCVqFooLkuhepd//79sdQmFhYW58+fz8jIIASus7OzS0xMRFH01q1b\neDcFLpe7evVqsMK3b9/GdqHMzMxOnz5NzjyBomhFRQU+SIqurm5UVBSTx1gqla5cuRL/ZwaH\nw8G+X+/evcM2TXV0dLZs2dIyr7umeMWWlpZOnToV3CAOhzN16tTvM4mFen8iWecJ9US9n1oA\nq9ipB9nZ2SBSF/Muz58/J59h3blzB0XRly9fkqtu3bqFomh5eXliYiL2mZHL5enp6R8+fJBK\npTRz7d27l0aBMDMzmz59OrTq1KlT2dnZmBaIwePxnj59mp6ejj26hYWFSUlJNJEsJBLJ/fv3\nb926Rf5PLZFIyFuGZmZmubm5L168cHV1JVTRnCRu376drMN9q9NYAHnDjDnjx4//+PFjamoq\n0IOh8Yrbt29fWlq6efNmctXZs2fBCstksvT09JSUFPCcQBU7cmI3LS0tquA7ZGpqapKSkq5d\nu3bt2jXyLc7JyXnz5g1zT9um0/SUYmVlZYmJid/zd1a9P5GsYqeeqPdTC2AVO/Wgtra2qKio\nUb5++AiuGD4+PiiKTp48mVw1cOBApcVTGMiN6mjMwcEhKCgIWrVs2TKl5SGwb98+6BSxsbE3\nb96kl5wAObhGaycjIwOs0u3bt6nahIWFQbckO3XqBF1wsmKXm5sLHXnhwoWqusstDJsrtrWj\nULFjM0+wsLB8X9CkZ21s5laFVFZW0jegMqjKzMykUgo/fPigtDwE3r17By1/8eIFeSePnrq6\nOlVI9B0Bkh8gCPLy5UuaNtXV1eRy5t6vVPF0vpVPMQuLQr5fO00WFpb/m0ATj4KzNpoq5VBo\nFkZl72VhYdGpUydoFdkoXmnIQZ4BDg4OhJQVCiF7xbZ2sPtua2tL1cbS0hLqmoq3TaTH3t4e\nWt6+fXuGI7CwtDCsYsfCwvJ9sWDBAnIhOPekqVKOOXPm0NTq6ekNHDgQWhUcHLx69Wqy2sfl\nctesWaO0PASWLFlCVsjatGnj5+c3dOhQcsAOY2NjqqFmzJhBdialUYlagKakGR04cCCmcvn7\n+0MVNUNDw4kTJ06ZMoVctWzZMoYTde7cmaxea2hoANdaFpbvEPYoloWF5Vsil8sjIiLu378v\nl8v79es3ffr0IUOG7N27d926deD0UENDw9HR8fbt23fv3m1oaAgICLhx4wao4vP5q1atghre\nQfnvv/9u3LiRnJwslUq7dOnSt2/f7du3JyQkQHMwiESi3r17t2nThpy9fu7cuSEhIRwOJyQk\nZP/+/SiKgnIul3v06FGwl1NaWnr48OHk5GQTE5Px48f36dMnIyPjr7/++vz5c/v27X19fUEm\ndXNzc4FAkJ2draur++OPPw4fPhw/kb6+/rlz58aPH19fXw9K+Hz+gAEDZs2aJRQKXVxcCgsL\nsdNkT0/PI0eO+Pj45OXlEa5l6NChf/zxh5eXV1BQUFlZGSicPn26paXln3/+qXRUXqFQWFNT\ng/3K4/EaGhqw1aOPtSsQCAYOHBgfH0+O0szlcjkcDjmiMoa7u/upU6ewX+Pj44cOHXrp0iVs\ndgRBDA0Nz5w5c/Pmzfr6ejMzM3wQ3YCAAKDYyWSyU6dOxcfHczgcLy+vqVOn4meRSCTHjx9/\n/vx53759S0pKMDl5PN7BgwdVHmiQBolE8tdff7148UIgEPj6+mLO5iwscFrK2k9lsM4TqLpb\nhgJY5wn1gN55oqGhAZ+ZHkGQPn36iMViFEVzc3OpArnZ2dmdOnXq3LlzWVlZzCUJDAwkD+Xq\n6lpTU/P06VOCGFS57W1tbdPS0sCAO3fuxFfp6Oi8ePECVKWkpBA2z2bOnEkVrhbP/PnzCWJH\nREQo3NkyNTUFTrVUaXNBmjIURUtKSq5fv37mzJm7d+9CwyM3Cpq4JMbGxufOnVu0aBGTcCrO\nzs708dsI/rP6+vrPnz8H67N+/Xpye01NzePHj//www/4wo4dO65cufLNmzegY319vaenJ77B\ngAEDSktLgfNEZWUlIadtr1695s6du2vXrpKSEuZPXdMpLy8nhBuk/wIqhHWeaO2wXrHqiXo/\ntQBWsVMP6BW7PXv2kL/KGzZsQFH0zp07NF/6BQsWNEoMqty1CIIsX748MzOTfExJxcmTJ1EU\nff36NbnKw8MDTNeUMCLXrl3DxC4oKGDoJDF58uTVq1fTNDAxMcEvCNURswrx8PBYuXJlMw1u\nY2Mjk8mePn1K1QBqU/j7779jK7B161Zyg82bNwPFDnq+D259CzN//nyyJGfOnFF6QFaxa+2w\nuWJZWFi+X65fv04uvHbtGlUVoU0TJ8KGio6OZu40CqaOiooiVz179qywsLC4uPjJkyeNEo88\nPuD+/fvQfLJkrl+/Tr9i+PPW6urquLg4pSVkyLNnz2j06Sby8ePHlJSUGzduUDWQSCTkQvza\nQpcLCyJD82S2MN+PJCytBdbGjoWF5ZshFoupCqFV9B2Vay8WixsVCgQMRdWlrq6OHLW4UeBF\nZS6YWCymXxP0fwwBEQQBG6jKidcomjXGSl1dXWPHxy8RzbOnsLYl+X4kYWktsDt2LCws3wyo\nTVjPnj2pqghtmjgRNhT9XNCpoV3atm3brl07CwuLpkRgwV8ac8Hc3d3pG+OPJo2MjKhitaiQ\ntm3benh4NNPgurq6Dg4OjX0MFK6tm5sbTW1jp1MJ348kLK2GFjoTVh2sjR2q7gYEANbGTj2g\nt7ErKCggxGMzNDT88uULiqL19fVUXy8dHZ137941Soy6ujpnZ2fyUHp6eh8/fkRRlOARSYWN\njU1VVRWKonK5nOzbERkZCaa7dOkSuSOT8V1cXIDvCEZwcLDCXgKB4Pnz5+np6fr6+lRtLl++\njB+2sYkrlCAyMvLTp080ImEQ3BSYcPToURRFZTIZlbHgnDlzCH4blpaW+NR2OTk5BAcXU1PT\njx8/Ahu79+/fE2IcYre+hXn79i1BEjs7O5oMdQphbexaOwpt7DQ2bdrU2P9R3xaxWHzz5s2x\nY8dSNaitreVyuUwc0FovID0iNNu32iCRSGQymY6OjsKM4K0X8F9U7Z9VqVTK5/OhB5RCoTAg\nIADYpWlraw8fPjwiIgJsJmloaAQEBNTV1RUWFsrlciMjI21tbT6fP3DgwDNnzkC1tLy8vN9/\n//3EiROJiYnt27c3NDTEqng83rhx46qrq/Pz88ViMY/H09XV9fX1jYiIAOHQRowYIRQKc3Jy\nxGJx9+7dt2zZYmZmVlRUhCCIvr6+XC7n8/kODg579uxxdHSUy+VhYWGPHj2SSqVcLldTU9PE\nxKRXr14ikcjOzk4oFNra2ubn5797904ul2tpafn5+d26datTp05fvnwpLy9v06ZNu3bt9PT0\npFJpu3btRCKRWCwWCAQ9e/Y8f/48QdsYMmRIRkZGSkoKiqJaWlqOjo6ampoaGhrm5uY6Ojoa\nGhrW1ta9evXKyckpKyurrKzMzc2VyWT4/zUcDmfv3r2zZs1CEKS0tDQsLOz48eN5eXkWFhY5\nOTlYIBUulztw4EAbG5vs7Gws3waXy+XxeEZGRpqamlhLAJ/Pnz179v9j773jo6ja/v+Z7TWb\nsum9QQqphBQgdAgQWigJAUREogKKeD+KqNzqragoWBAUUSnSQ0eMFAsdQiQJJIF00kjftE2y\nu9ky8/vjPN/5zTOzu9lUyN7n/Qev5cypM2dmrpy5zucKCgpqampisVgTJkwIDg6uq6vT6XRu\nbm5vvvnmtWvXduzYYWNjY2trq1KpwB9poCybzQaLmi4uLqtXr963b19TU1NeXh4hccLn8wUC\nAYjfiqIol8vlcrkMBoPBYDg6Ok6fPr2hoSEjI8PR0fHll1/GMKyurk6hUICyAoFg9erVO3bs\nmD9/fm1tbWNjI5vNdnNzmzx5sqWlpY+Pj06nO3z48OHDhz08PEQiUVdXl0gkmj179pEjRx48\neLBu3brPPvssPT39zTff1Ol0TU1NNjY2ixYtOnDggI2NDWXKtba27ty58+eff757965UKu2p\narQp2NnZzZw5s6qqqqmpSSqVJiYmHjhwgDy3e4pSqURR1PTdQkMR835FYhh2/Pjx5ORkgzkG\nwbrsX+CKHW7uf44A4IqdedCLWLG94+bNm+TFIR6Pd+rUqb5XW15e7uzsTH5mfvrpp0ZWmCwt\nLW/evEnRp0AQZO7cuTqdjrLIN2nSpK+++oqc4uDgQMipAObMmUOp6s033wSHWlpaAgMDDT7c\nSXC53K6urtzcXLppQmH8+PHk1qurq11dXQ1l5vP5586dAzkNhbUFuLu7f/vtt2TdFmtr6+zs\nbBzH1Wr1+PHjTRkFHS6X+/PPP+M4vnPnTspfgG+//TaO4+3t7aGhoeT0FStWjBkzhpyycOFC\n8JxZvXo1pf4NGzYYmRsFBQV2dnZEZg6Hs2PHjr5PuYEGrtgNdaDciXli3rMWAA0782BwDDu1\nWu3u7k55K1taWjY2Nvax5smTJ/fU2jC0mqJXSI8umDd69Gii9YyMDL1VgWljPGwGhaioqJCQ\nEFNy3rhxg+jA7NmzjWe2trZubm5++PBhtwvP9JEGBARgGPbRRx+Z0itDCASC/Px8euUoihYX\nF5vyIRtBkB9//PGPP/7Qe+j27duG5gbdg5DH4+Xn5/dxyg000LAb6kC5EwgEYv5kZ2dXVFRQ\nEltbW/so6iGXy/UGpTBOc3Oz3nS64x2CIORgCYDbt28TYRI+/vhjvVVt3boVQZAeiYlkZmbq\n1d6jQwTLUqvV3briNTc3X7t27bfffut2nyZ9pI8ePSosLOyjJIpCofjkk0/oleM4/sMPP5hY\n+ZkzZ/ReHQRBzp07pze9trb27t27lESVSmVEgQUCGRygYQeBQIY8hH+ViemmV4v3nyyIRqMx\nMScRp8uQiF1TUxM5mykQbnPdQjSqUqmMxPUiUCgUvT7PnZ2dPRqFXoigahTa29tNrLyzs9PQ\nqTaUPkBTDgLpO9Cwg0AgQ54RI0bodZQODw/vS7X29vYUBztTMBQdy8ToolKpFESbRRCE7mAH\nWLFiBYIgYWFhpvfKysrKxCAW8+fPBz8sLCx8fHy6zR8WFtajnhAIBAI/P7/elSVDdJjCjBkz\nTKw8PDycEn+MwJCIDGV3DrkqU1qEQAaQQfom3H9AHzvc3B0IANDHzjwYtM0T9AhRL730Ut+r\nPXnyJKXaqKgo48FbN2zYQLcyraysKisrbW1tyYmWlpbjxo2j5Dx06BC5A/RYq97e3uBQenq6\n6VuqMzIydu/e3W02Pp9Pbr3bT7Fr167FcVyn002bNs14TvoOCbDVwLhKS7csWLAA1+cKGRAQ\ngON4dnY2Zfunm5sbJfKsk5NTQ0ODUqn09PSkVwLUT/Tyyy+/UPLPnDnz2X9kQR+7oQ7cPGGe\nmPesBUDDbigCggGQU0wx7Og3bHt7O5C6aGlp0Wg0hvTDdDqdXC4nfv/www9+fn4sFsvLy+uD\nDz4w0ZpsaWmhd5vMuXPnIiIiOByOk5PT66+/XlVVlZmZ6e/vD1bmRCLR+PHj3d3dWSxWQEDA\n3r17MQzLysoirAQURYOCgp48eYLjeGFh4bx58yQSiYWFRXx8fHZ2dn19/Ztvvunq6spms8PC\nwgglPIKysjJfX1+w5RNF0aioKIVCQYz6xo0b48aN4/P5NjY2vr6+hAoxeYsom80mQosePnwY\nCKZIpVIrKyvKTlJ7e/vHjx+Dk1lVVQWKnD9/nqJmzGAwmEymt7f3F198oVar29vbS0tLa2tr\n33jjDRcXFxaLFRwcPGnSJKBVxGAw/Pz8Dh8+3NDQ8P7773t4eLBYrBEjRhw4cIC4u69evTpt\n2jSxWCwQCHg8Hvr/oJhNoF03Nzc3Nzc2m+3q6rpp06b29va2tjaNRrNkyRJgcLPZ7BkzZhBK\nb+np6RMnThQKhTY2NsuWLcvPz8/MzIyLixOLxVZWVgsXLiwtLZXL5Vqttr6+fsqUKcAo53A4\n8fHxTU1NxifP8ePHQ0NDQWc2bNjQU6E7rVY7+Np40LAb6kDDzjwx71kLgIbd0CI9PT0mJobJ\nZDKZzJiYmPT0dJBuxLBTqVQffPAB+J4lkUg2btyoUCiOHTsGPv8xmUzyVkdfX9/jx48TZevq\n6pYtWwbWq9zc3IDmBajz3//+t5WVFYIglpaW7777riGLTaFQbNy4USQSEZZQdHT03bt3Kdnq\n6+vnzp1LfF0F1oazs/P3339Pnpx0C2D37t1AKITP5z///PP19fU4jl+8eDEoKAhFURaLZWVl\nxWQyGQwGIdbIYDCmTp0Kbm25XL5u3TqKMq1QKAwMDASjdnd337NnD7nFgoKCuLg4YJeACsln\nBsfxS5cuBQcHoyjKZrOnTp368OFDjUYzZ84cyuiI5UYGg2Fvb08xsBgMBrCfxGLxrFmz9Mqh\nAfMLWJnkxUuRSHTixAlyn9955x1yBi8vr8uXL5Mz7NmzB3yY5vP5y5Ytq62tbW1tXbt2Lbhw\nfD4fFHdycoqPjyfm0oYNGyhPSAzDdu7cCcTzhELhiy++CMSKDxw4AExwHo+3ePHiwsLCsrKy\nxMRE0HkvLy/KAmp/UVVVRbTiyedcGwAAIABJREFU7e1NWN6DADTshjrQsDNPzHvWAqBhN4Qo\nKiqi+G+JRKLCwkLcqGH32muvUQwCQ1EECIBqmt6gFMCCoUuRrVq1Sm+fV65cSa9fLBaTZeQ0\nGo2R2E3ffvstkZNi2NE/ekZHR1+7ds346ACRkZE4jickJJiSmbDtZDKZIXdAcGbu3LlD+W7r\n4OAwYcIEU1rpR1AUvXfvHujzli1b6Bm4XO6dO3dAhr1791KORkREzJw505SGli1bRr4i33zz\nDSXD+PHjDx06REkcMWIEXRrw2LFjPbkbukehUNClEFNTU/u3FUNAw26oAw0788S8Zy0AGnZD\nCL3xuJKTk3HDhl15ebkpr2cKvr6+OI7T38cIgkil0qKiIr2lHj16RGn90aNHhppYunQpke3Y\nsWNGOiMWi4nwX2TDTqPR6HWr9/f37258/wvdecsQUqkUiOxv2rTJeJ6JEyeaWOdAExQUBE6U\noeAHQCRZp9NRXBJ7ChBAxnFcqVQSS7NkupVrBri6uvbbrYLjOI7v2rWL3oqbm1v/tmIIaNgN\ndaCOHQQCGXDy8vJMTCQwYloZobi4uKur6+HDh/RDMpns5s2bJnZPbw30zEayIQjS3t5OF89D\nEKS2tlavlJ3ptuz58+dNzCmTyerq6hCjXZXJZLW1tcYvx2BSVVUFfiiVSr0ZQFfr6+tBSLde\nk5ubC35UVlZ2dHTQMwDVmG6pqqpqbW3tS08o6L1YlZWVbW1t/dgK5L8WaNhBIJC+IpFI6In0\n7ZzdFukWgUDA4XD0lmUwGIYiddJ7YqR1cuZuO6l3jGKxWG+AY9Ojc5oecpTBYIAtpUa6CvL0\n7oQPBMQXYUO6MOCsisViQxlMhLg6hnbd6o1fTIfD4VCcHfuI3mvR761A/muBhh0EAukrixcv\nNjGRYNSoUXRdt25fbElJSSiKzps3j24kzZw5c9KkSR4eHpR0V1fXsWPHUhLHjBnj4uKitwly\nt+fOnUvsM6UzefJkcqhQAktLy+nTp1MS+Xx+YmKioarIcDic9957TyqVmpI5Pj4eeDcmJSUZ\nyjNz5kwLCwu9l8N0tZR+ZNGiReCHoZC7oKsikWjWrFmUQzwez0RtFEdHR8KDUK83oVAonDFj\nBiWRw+HQtWzmz59vXOCmpyxYsEBvorkGrYcMNoP2Vbi/gD52uLk7EACgj90QAsOwJUuWkB8s\nycnJ4NoZ2Txx9+5dshOVlZVVWlqaEX3XkSNHEqfr559/Jptcfn5+tbW1OI7fuXOHbBJZW1uT\nI5+SuX79Ot0TbunSpZQpt2/fPnocUgRBvL29KysriWyUzRPV1dXDhg0jMvN4vH379qlUqm53\nhzAYDOCqn5aW1q2eMDFqwDvvvGMkT1dX15QpU8iH/vWvf126dMnEVStDve1pkcDAQKLD9fX1\n9DFOmTKFmC11dXV+fn7EIS6X+9NPP507d06vwxx5IJaWln/99Rf5ipSXl5NFW/h8/uHDhxsb\nG8nGJZfL3bZt21dffUU244KDg7sVPekF27dvH4RW9AJ97IY63frYoXj/BcwZHFpaWl599dXD\nhw8byiCTyVgslvHPQEMdlUqFYZh5r9vL5XK1Wm1jY6P3q5Z5oNPpOjo6np1vZH3kypUr165d\nw3F8woQJhKs+eMJaWFjoXfNobW09duxYSUmJp6dnUlKSVCrV6XSnT5/OzMzkcDgYhj158kQu\nl7u7u48ePXr+/Pnkl3dJScnZs2cbGxuDgoISExOJ+ltaWlJTU4uLi729vRcvXqx3HwOgqakp\nNTX16tWrYJfi9OnT9e4Sffz48bfffpuVlcXhcFxdXW1tbQMDAxcvXky2LJubmykNqdXq1NTU\nvLw8W1vb+fPnA6sCx/G0tLTbt28LhUJ7e/va2lq1Wu3i4vLnn3+Wl5f7+flt2bKF2NxaW1t7\n4sSJW7dugZBZFhYWsbGxkZGR169fB6NOSkqirPFkZmZeunSpsrKyq6vLzs6OcmZwHP/9999v\n374tEAimTp0KYi00Nja+/fbbeXl5lpaWfn5+fD5fKBRmZmbW1taOGDHi+eef/+OPP3bv3t3R\n0cHhcEJDQydNmqTValUqlaur66JFi06ePPndd981NjZaWVnFxsY+fvxYpVKFhISkpKRcuXKl\nublZIBBcu3atqKjIxsZm9erVL7/8MrnDWq1206ZNv//+u1KpHDFixKpVq2bOnEm+5TUazfHj\nx3NycqRSaUJCApDCqa6uPnny5JMnT2xtbTEMa25uDgwMnD59+tmzZ4uLiz08PJKSkugbL1Qq\nVWpq6sOHDx0cHBYsWODu7g46cOLEifv379vY2MydO9fJyYnH45WWlv7666/Nzc2hoaELFy7U\na9n3nfz8/PPnzw90K3SampoYDAaQBDJXzPsVqdFoFi5caCiKMYLAFbuhiXn/OQKAK3bmAbFi\n19TUtG7dOj8/P/DeJauKGOHixYuTJk1ycnIaOXLk3Llzw8LCbGxsbGxspFLpyJEjv/zyS3Jg\ngMLCwsTERA8PD09PTw8PDy6Xy2AwUBS1trbeunXrF198ER4e7uTkNG3atKtXrxKlKisrV6xY\n4e3t7ePjk5KSUlNTo1AoPvzww5CQEGdn5/j4+E8++YR46aIoOm7cuNDQUGdn55kzZ3744Ycx\nMTGOjo4uLi7Ozs4CgUAgELi5ua1Zs+bXX3+Ni4tzcnIKDw/fsmWL3jXLmzdvjh49ms1mAz1e\nBoPB5/MlEkl4ePg333yj0WjOnTs3fvx4JyenyMjI3bt363Q6Sg1nz551cnICw+RwOKNHj05L\nS8vNzY2NjeXxeCwWy97eftq0aWFhYWDghw8fTk5O9vT09PPze+2118rKyuj+fKAqKysrFxcX\nV1dXsjGNoqhEIiEsRSaTKRQKORwOEOQD3WCxWM7OzlFRUS4uLsHBwbNnzwZCfSiKisXigIAA\niUQCxIG9vb1dXV15PB6Px3N1dR0+fLirq2tgYOBbb73V1tb2999/T506FVz6bdu2gQt9+/bt\nGTNmODs7h4WFffzxx3l5eYsXL/bw8Bg2bNioUaMCAwMdHR3d3d3d3Ny8vb1XrFgBVlXz8/OB\nLjSXyxWLxfHx8Q8ePMBxvKGhYc2aNcOGDfPy8lq2bNnjx4/B35PkM6zT6X7++efIyEgnJ6dx\n48adPn2auHbTp08HPfn000+J/dHPJhiGHT16dPTo0dbW1mKxWCKRREZG/vjjj/QZZR6Y9ysS\nyp2YJ+Y9awHQsDMPgGHX0tISEBBAth7EYnFxcbHxskYW5gkIdRK6lp5xgCReXV2dvb09Od3V\n1XUglEHmz59PGd2lS5eMFxk9ejQl5fXXXyfXcObMGb0FTV/7eWaXw+kxapOTk//66y9KYrcj\ntbOzu379OiWGGIIgfD7/xo0bFC9Pa2vrR48eUQy7t956i1J2586d9Gs3b968vt4qA8lnn32m\n9/y88cYbT7trA4J5vyKhYWeemPesBUDDzjwAht1HH31Ef6nMnj3bSMGuri4TvxZduXIFx/HZ\ns2ebkpnA0dFRq9WmpKT0qFRf+P3334nRYRhGj0xqCjk5OUQl5v01jY4hBebeldKbvnDhQrJh\nV1BQQM/D5/PBZ1wK58+f7//7pz+ora01si0jLy/vaXew/zHvVyTUsYNAIE+fjIwMemJ6erqR\nIoWFhS0tLaZUfufOnW5ro1NbW1tRUdHTUn0B9BNQX19fVlbWi0rIHTbx/JgN1dXVvShVW1ur\nN72mpoaeSJmoeuetUqnUq19Ivr7PFJmZmRqNxtDRwbwFIIMDNOwgEMiAo3fBwLiEhOkCE0To\n9572isPhDKbABHlEvZbPIBd8Zj+kDhC9G6+hrbt6a6Nclx5dpv6VROlH+utGgwwVoGEHgUAG\nnLi4OHoiXUWMjK+vL13ozkjlxmujExQU5OLi0tNSfYEsbmdtbQ02pRqBbnnw+XyyYIqrq2s/\ndu/ZJyQkpBelyIIpZOgxYREEmTp1Kvm/48aNo++stLe31xtBmC5e+IwQHR1t6Ks9n89/dmLN\nQfqNQfsq3F9AHzvc3B0IANDHzjwAPnZKpZIiNuvj49OtmNatW7e6jdawefNmkLmpqcmIIUgx\nksRicVZWFugeRTlv9OjRa9eu7fmjlArFr/+9996jjC4vL8+41u6qVasoAsK7du0i15Cbm0tX\noePxeEbEnijLV8/sak1cXBxFrO6jjz4qKCigGCjdehmGhYVVVVXRZasdHR0rKioosoIBAQFA\ngIZ8kvfs2UPOw+VyL1y4kJeXR1Ep2rhxY19vlYHk5MmTeq/17t27n3bXBgTzfkVCHTvzxLxF\negBQx848IHTsWCzWoUOHLl68qFKpoqOj165dS9+rSKeiomLHjh35+fnOzs4BAQEPHz58/Pix\nQqEQCAReXl5Lliwhrzd0dnbu3Lnz7t27DAZDp9MVFRUBryx/f/+dO3cCzbyampqgoKB169Y5\nOTmBUmq1evfu3devX2cwGBMnTnzxxRfZbPb58+dPnz4tk8nCwsKWL18+duzYhoYGBEGEQuGW\nLVsyMzMbGxtDQ0OnTJly4sSJsrIynU7H5XJLSkowDPPz85s1a1ZcXNz333+fk5Pj4OCQmJg4\nbdo0+ujq6uq2bdt2/Pjx5uZmDMOEQqGtra1EIgkKClq2bNm4ceNKSkq+++67oqIiV1fXlStX\n0hf5qqurV6xYkZ2dDW6WhISE1157zcbG5pNPPjlz5oxCoRg+fHhcXFxxcTEYeEpKypkzZ+7c\nucPhcOLi4pYvX7548eLTp0/rdDoEQZhMJovF4vF4EonEy8uLy+VyOJysrCzCuY3FYo0ZM6a8\nvLy+vh7HcWtra6lU2t7e3tHRgf0/RCJRWFjYsGHDSkpKrK2to6Ojv/nmm4qKCiaT6efnFx4e\nnpeX19HRAWRrcBwHzvuBgYF8Pl+hUAA5kqSkpJqamh07duTm5jo5OSUnJwMjrKGh4dtvv33w\n4IGtre3ChQsnTJjw3Xffpaenc7lcqVTa2toK/lJisVgsFis2NvaVV17hcDgdHR07duw4c+aM\nTCazsrKaO3fuunXrLC0tdTrd/v37//jjD61WO3r06DVr1mg0Gh6PR1cH/PnnnysrK319fYE8\nCrh2O3bsePDggb29fWJiot416WeKhw8f/vDDD3l5eTKZTCwWh4SErFy5Uu/Soxlg3q/IbnXs\noGE3JDHvWQuAhp150NraqtFoyOJnxtFoNAwGAyxEAZEtYukL6OIKBAKFQsFgMMD8p+RBEESt\nVrNYLLA0pdPplEql3kAFPQLDsK6uLp1OR1SlUqnIy2l0gWJAXV0dEIqj5KentLa2kp9aOI5r\nNBrySQP51Wo1hmE8Ho9cvLm5WSKRMJlMnU6HYRibzVapVCj6v493JpOJoig4UUQRonhrayuo\njWgdHCL3R6vVarXajo4OFEW5XC6PxwOGLH1QRgZIPycYhul0OjabLZfLRSIRg8Ho6uricDgo\nihJlKecBpBPZyG2BvuntCdGQoa4StLe3IwgCdHPIfVCr1UaCy3WLVqtFUZTJZJIn59PCiECx\n8Qs6+PT6zJv3K7Jbww762EEgkAEhLS0tJCREKpV6eXk999xz3W5pvH379pgxY4RCoVgsHjdu\n3NixY4VCoVAoHD9+/K5duxwdHdlstlgsZjKZYrFYKBTyeLzhw4eDPBMnTszMzLx69WpkZCRR\ng5OTE4vFEovFAoHggw8+6N0oiouLR48ezWKxBAKBWCzm8/lRUVGWlpZCoTAgIODEiROGCk6a\nNInBYDg6OoI3Op/Pd3Bw+M9//lNeXv7cc89JJBKRSDRixIjdu3cHBgaCFy2Hw0lJSXn8+HFC\nQoJIJBIKhaNGjbpw4cKmTZvs7Oz4fD6TyeRyuXw+H0gZu7u7R0dHM5lMGxsbsEbF5/N5PB5o\njsfj8fl8Pp8P9oiA/zo6Ok6aNMnKykogEAiFQtAun8+3srJiMBgeHh42NjZ8Ph9FUSsrKzab\nPXXq1AkTJgiFQpFIZG9vL5VKxWIxqA005+npuWvXLgzDiIGr1erPPvvMyckJNLd58+auri4E\nQSorK93c3FAUBecEXEQwKIlEwmKxOBwO6JVEIhEKhRYWFh4eHuA8hIWFzZs3z9raWiAQ8Hg8\ngUBgYWGRlJSUmZkJArmCkXp6ev7222/kq1BUVDR79mxQSUxMzM2bNw1dr87Ozo0bN3p6elpY\nWIhEIhCBY9iwYWPGjAEpYWFhFy9e7On8uXfv3vjx48FIJRIJmEVz584tKSnpaVUDh06n+/bb\nb93d3fl8vp2d3TvvvKNQKJ5ulyorKxMTE/ty5v+rGcDvwAMD9LHDzd2BAAB97IY0ly9fpjxq\n/P39jUzanJycbt3pjCMQCIz/Zf/RRx/1dBSNjY12dnbG2z1+/DhOixU7btw4Q/ltbGyMV0hZ\nX+xLLNdB44svviDGvn79espR8Imz7+umdPRe8QsXLoCeNDQ0EB/cAXw+H/hW0klKSjKlRUoI\nWuMUFRUZGrWLi4tMJuvphOwX6LFi6TKTSUlJT6VvgPb2dl9fX0qX/v77b9NrMO9XJBQoNk/M\ne9YCoGE3pCHHVif46quvDOWPj4835bXaF9hstt64XkbYsGFDt9U6OztjGEY27J76asfgw+Px\n5HI5juOGxPn6ZT+Kifj7+4MLQQ8agSDI1KlT6RfadAm60NBQ0+ePcWPxnXfe6dFs7C8ohl1z\nc7Pej9R37tx5Kt3Dcfzzzz+n9ycsLMz0Gsz7FdmtYTdIUYf7FxzHjcgtmpJhqAM8acx7jDiO\nIwii0WjM2McOmK3mdx11Ot2jR4/o6dnZ2YYGm5OTM8CdQjQaTXFxMfB8NxFTelVdXV1bW8vl\ncomhdRsrzPxQqVQPHz4cOXLk/fv39Wb4888/B60zBQUFnZ2dHA5H7+V78OABfRJmZ2ebWHlu\nbm5XV5eJTnLG58/9+/ef1r1Pfuzk5ubq7UZWVtbIkSMHt1//i95ZlJubq1arTXwdAI9S83u0\nAjQaDW50d8TQM+yAQQqcNozkMZ5hqANmrXmPEXjtqNXqp92RAQTHceCV/7Q70v/w+fzOzk5K\nolAoNDTYgfhOR4fL5fbobJvydRjsJEUQhKiZEnz2vwSwp8HQ13Djwi793hNwW+m9fCKRiD4H\nTN8xIBQKTTcXjO/7NnI7DCjAJiCaNnTJ+Hz+03o06d30IBQKTX8dgFdkv3bqGaL7GThgi4UD\nBfwUi5v7OjMAfood0qxYsYL+tLl27Zqh/L3e3GA6np6ePR3F8ePHu60WfBOh+NgNZkCLZ4GQ\nkBBwqyqVSrpssqOj4x9//DFonXnuuefAVUhNTaUf1fsBtKGhwUQhhVWrVpk+f7Zu3WqkqlOn\nTvV0QvYLlE+xOp3O39+f0jdLS8uGhoan0j0cx/Wu76akpJheg3m/IqGPnXli3rMWAA27IU1L\nS0twcDD5ufzBBx8Yyd/V1UVRiyUD5CeMM3PmzNGjRxs6yufzi4qKejGQV155xUijvr6+tbW1\nOM2wO3v2rKGBrFy5kpxCEbthsViJiYnkFD8/P1ME/0ynR74NpmR2cHAgB5K/du0a2UiysLAA\nbu+LFi3qTXeN9mTChAmUlICAALLV8vLLL5OPjh8/XqVS6b3Qp0+f7lYdIywsrK2tzfTJo9Vq\nKbrcBGvXru3RPOxH6JsnsrOzbW1tib4JBIIzZ848re4B3nnnnb6cefN+RUKBYvPEvEV6AFDH\nbqij1WqPHj2akZHB4/ESEhKMWF0AHMeBdi6LxZo6dapWq/37778xDBs7duzs2bO///77I0eO\nyGQypVKp0+l4PN7ChQvHjBlz+/ZtDMPGjRs3a9YsDMNOnjx59+5dHo83ffr0wsLCgwcPdnR0\nREdHf/HFF702j65du/bZZ5/l5eVxudxZs2Y9//zzaWlpQKB46dKl4EsWXceupqZmwYIFxcXF\nYrE4IiLCwcHB3d196dKljo6O2dnZv/76a3Nzc1hY2JIlS/7888+vv/66oaEhODj466+/lkql\nt27dunDhgkKhiIqKWrRoUU1NzZEjR6qqqsrKyurr67VarbW1dUBAgK+vb2Ji4vLlyx88eMDl\ncmNjY93d3dvb26uqqmpqaurq6hgMBpvNFggELBarq6vLyckpISEhKirqwoULdXV19vb2N27c\nyMrKAoLPERER69evf/DgQUZGxqNHjxgMhr+//1dffZWTk3P9+nWFQlFRUZGfn9/W1iYUCn19\nfYE6sZ+f3/LlyylfWhsaGg4dOlRWVubh4bFs2TLi2/Svv/66cePGhoYGFxeXlJSU6upqhUKR\nn58vk8mEQiEwYYEIS1tbm42NjYeHR3FxcWdnZ2RkZEhIyJkzZ6qrq5VKpUAgsLa2njVrVmRk\nZFZW1u7dux88eCCRSJKTk5cuXUpZLr127dqlS5fUanV0dPSCBQuMPE8qKyv3799fX18vEomY\nTGZnZ2doaKivr+/ly5fb29sjIiKSkpIoAUVM4fz58zdu3EBRlMViAaG46dOnx8bG9rSe/kKv\njl1ra+uBAweKi4tdXFySk5Pd3NyeVvcI7t69m5aW1rszb96vSChQbJ6Y96wFQMPOPCAiTzyz\n0av6BUMCxWYDWF0G6m5Puy8DSHt7Oz3yhJlhRKDYbDDvV2S3ht3Q2zwBgUAGCJVKdefOnX/+\n+cfe3n7KlCnOzs4D11ZjY2N2djabzR45ciSx3lNQUHDmzBkej5eYmEi0juP4gwcPKisrvby8\ngIpKW1tbZmbm48ePeTzeiBEjQkJCUBRVKpXZ2dngE7Crq2tVVVVWVpZMJpNIJGFhYYbCyOI4\nnpubW15e7unpGRQURDmqVCqzsrIKCgrUanVnZ6dSqZRKpdbW1p6eniEhIXq9zhsaGu7fv89m\nsyMiIrKzsy9fvuzt7b1o0SK5XH7y5MmOjo45c+aQR6HT6YRCYWpqqlwuX758ud6I7HV1dWvW\nrCkqKpo+ffq2bdsaGhpOnTrV0NAgEAjkcnlXV1dVVZWXl9frr7/e1dUFApR5eHi0tLRcvnzZ\nwsLi3XffjYiIIM7w999/397evmLFivHjx4PEH3/88c8//wwNDX3zzTdlMtmNGzcyMjI6OjqG\nDRvm7OzM5/P9/f29vLy6urpycnLA8l5HR4etrW1hYeFff/3V1NTk4+OzatUqPz+/rKysO3fu\niESikSNHtrW1aTSa0NDQ/fv3Hz582NLSMikpCWgFBwQECASC3NzctrY2hUKh0WiCgoLCw8PJ\nVmNbW1tWVpZGo/Hw8Lh7925FRUVMTExsbKyhvxBwHP/6669v374NlIqjo6Pj4uKeKRXAK1eu\nXLt2zd3dfeHChaZ4F0AgvWTgPwf3M9DHDjd3BwIA9LEbZK5cuULezslgMNatWwc2l/UFhULR\n2NhIEZD77LPPiB2LVlZWBw4cwHGcHG0TRdFXXnkFx/GysjLyN9zJkyd//fXXlDXO6OjogwcP\nkn326Sp6SUlJ9FumsrKS/EVs/PjxT548IY5evnzZiGnr4+Nz+/ZtIjPwsdu8eTOxv5KsiMFg\nMMgLz7GxsXv27NH7VcHFxaWjo4PcSYrLHYqiRtawDR0KDAzEcXzy5MnkRHd397t375LtJBRF\nDQl5jBkzpltDvy9BtxAEsbOz+/XXX8Go9+/fr3dJyd7ePj09nT7NLl68SP9UJ5VKc3JyejRd\nwYeCHhUxherqand3d6JjbDZ79+7d/d6KidB97MwP835Fws0T5ol5z1oANOwGk+rqar12xtat\nW/tYM92wo+9VBEt09NZ/+ukneth7vZiyMPPSSy+RO6bT6caOHUvJM27cOGDLlpeXd/uJ3MHB\ngdg52NTUZMQ/pEeQhViNfG3pKZS9LICnG7SUjlAoLCgouH37tpE8NjY2lJgNGo3GkAOWVCrt\n0aNyIAw7DMPo6okMBuPBgwf925CJQMNuqNOtYfds3dUQCOSpcPDgwdbWVnr6119/3e9tbd++\nnZKiUqlOnz5Nz/n+++9nZGSYUqdOp+s2z969e9va2oj/3rt3jx459Pr165mZmQiC7Nu3j5xZ\nL3V1dUePHiX+Sx9X78jOzu7o6AC/KZs6+4JesVxyjNdngc7Ozp9++mnnzp1G8jQ1NVH+Nti6\ndatWq9WbWSaTpaWl9WcXe879+/eLioooiRiG0QN5QSD9AjTsIBAI8uTJE73pNTU1hl6Zvaaq\nqoqeqNcy69a06hFarba2ttZ4N4h0QydEb2bjFfYConW91rZ5U1lZ2e3Jp5xq43EjSktL+6Fb\nfcDQxCgvLx/cjkD+W4CGHQQCQVxcXPSmOzs790LfwTh0AVsEQfS20r9721ksFjkkvN5uIAgC\nhB4MnRC9mY1X2AuI1s17d79e3N3duz2TFDGOsLAwI5l9fHz6oVt9wNBwPD09B7knkP8SoGEH\ngUCQ5cuX6/VVf+ONN/q9rfXr11NSeDzeggUL6Dk//vjjqKgoU+o0xcfuxRdfJMutRURE0LXE\nxo8fHx4ejiDIypUruzWqHB0dk5OTif/Sx9U7wsPDiQBrP/74Y7/UiSBISEgIPfFZ87ETiUQp\nKSmvvvqqkTxSqTQpKYmc8tZbbxn688PW1nbmzJn92cWeExoaOnz4cEoig8F4//33n0p/IObP\noLn79Rdw8wRu7p6hALh5YpC5evWqg4MD8WRgMBjr168foF2xn3/+ObEr1tra+uDBgziOz5gx\ng2gdRdHVq1fjOF5WVjZmzBgifcqUKd988w1lW0NMTMyhQ4fIqzh04ZLk5GT6LVNVVUVIfiAI\nMmHCBPKu2D/++MPIup2vry99V+ynn35KjItsa1J2xY4bN27v3r16LekB2hU7YsQIHMenTJlC\nTvTw8Pjnn3/IW1lRFDVkIsfGxna7itnHXbH29vbnz58Hoz5w4IDe8+Pg4HD37l36NLt06RLd\ntrO1tX12dsV6eHgQHeNwOD/++GO/t2IicPPEUAdGnjBPzFt9EQAFigcflUqVkZGRkZFhZ2c3\nZcoU8ofLXmNIoFgmkxF5sORCAAAgAElEQVQ6doSmV1FR0ZkzZ7hcblJSkqOjI0jEcTw3N7ei\nosLLyyswMBBBELlcDnTs+Hx+YGBgcHAwiqIqler+/fvNzc3BwcEuLi5PnjzJyspqamqysLAI\nDw838tkrLy+vrKzM09OTLpKiVCrv378PdOwUCkVnZ6ednZ2VlZWHh0dISAh5RIRAMdDn43K5\n4eHhDx48uHTpko+Pz6JFi9ra2k6dOiWXy+fNmxcQEECMQqvVWlpaHjlypK2t7fnnnycbmgRN\nTU2vvPJKYWHh9OnTv/jii8bGRqBjJxKJ2tra1Gp1ZWWlp6fn+vXrgY6dTCbz8vICOnZisfi9\n994Dy5DgDH///fdyufyFF14gFiz37t17+fLlkJCQ//mf/2lqagI7SORy+fDhw11cXHg8nr+/\nv4eHR319PYgDIRQK29vbbW1ti4uL//zzz+bmZi8vr5SUlOHDh2dnZ5N17Lq6usLCwg4fPrx/\n/36gYycWiwUCQWBgoEAgyMnJaWtrUyqVGo1mxIgR4eHh5GeaXC4ndOwyMjLKy8tHjx49ZswY\nIzp2O3fuvH79ulAodHd3j46OnjZtWk917AZUoPj69etXrlzx8PBYsGABsSg7+ECB4qEOjDxh\nnpj3rAVAw848gJEnzAMYecJsgIbdUKdbw+7ZcrCAQCAQCAQCgfQaGFIMAoEMNjiOnz9//vbt\n22w2e8qUKeTvj1qt9tixY9nZ2dbW1vHx8aGhoXV1dUeOHAEhxXx9fdPT05VK5YgRI1pbW3//\n/ffS0lKhUDh8+HAMwyoqKlxdXdevXx8bGyuXyxMTE+/cuYMgSERERGpqak5Ozt9//w10iePj\n44kW1Wr1kSNHcnJybG1t58yZExgY2NbWtm/fvrS0tKamJq1Wy2AwOjs75XI5k8mMiIg4efIk\nffWxvb09NTW1sLCwtbVVIBBIpVKxWHzo0KGamhoOhxMREdHW1lZaWophGIPB0Ol0bDZ7zpw5\nW7duPXLkyMWLF3NychgMRlhY2Jdffkn2dARcvnz5jTfeqK+v5/F4EyZMiI6OXrx4cVpa2tGj\nRysqKoAkjYWFxfPPP+/l5fXo0SMnJ6eFCxcWFhbeuHFDrVar1eq6urrW1lZvb+/Ozs7Hjx9j\nGBYQENDY2PjkyROtVltYWKjRaLhc7sqVK8VicV5e3v379zs6Othstr29fXV1dXt7O47j1tbW\nS5cuvXPnTk5ODoZh1tbWjo6OGo3G0tLSzc2ttbU1IyMDSAeD0Xl7e8fExERHRycnJ+fn5wuF\nQj8/P1DV9OnTX331VYlEgmHYqVOnbt++fffu3ba2Njs7uyVLlqSkpCAIcv369S1btmRlZSmV\nSi6Xy+VyJRKJo6OjWq3u6OjgcDiurq5NTU08Hi8qKgpF0aqqqsbGRjs7OwRBBAKBSCSaNGnS\nxIkT//nnnwsXLrS3tyuVyoKCgvb29lGjRr3//vsgJ4X79++npaXdu3ePzWZPmjRpyZIltra2\nR48ezczMrKqqEgqFQUFBCxcu9Pb2zs/PP3v2bENDQ3Bw8JIlS7hc7p07dy5duqRQKCIjI8eP\nH3/kyJGysjJ3d/fk5OQ7d+6kp6fzeLwpU6aQt+zQKzF0m0yePHnChAnEIaVSefjw4YcPHzo4\nOCQkJFAEkHU63YkTJzIzM8Vi8fTp001U+Tadjo6OQ4cOFRQUODs7L1q0iOw+ODjcunXr8uXL\nSqUyOjo6ISHBjL/q9JKB9vLrd+DmCdzcPUMBcPOEeUDfPKFWq6dNm0Z+Cq1atQocAh5ylEPk\nrawmkpSUZHy/5+zZs7VaLY7jdXV15B2LXC5348aNUqnUSFkmk1ldXU0eY25uLjkam+nQO8lk\nMtPS0siVP/fcc/SC3WrQPFMxUvViaWmZkZFBjhdHEBISYnxjrOno3QuMIAiHw7l69SplrtIV\ngwUCAV2shMfjvfDCC2QjzMfHhyIlTb5AlIu1Zs0a0NyuXbsolZDnlUajmT59Orngiy++CA5V\nVFSQbSkul7tnzx6iYHt7O8WSe/fdd8nD7OPmCWDPEZXz+fzU1NRe19YLXn/9dfLoxo0bp1Qq\nKXnM+xUJQ4qZJ+Y9awHQsDMP6IadXsH9Q4cO4QaMmAHi888/x3F83rx5lHRT/vq3t7cnhoNh\nmN5oXb1GIBAAoxPHcb3hIsyGp+vmZWVlRX6KXr9+fdCaPn78+KNHj4iwwgQzZswg+rN582Z6\nQRBVedKkSZR0Pp9fVFQECq5Zs4Ze8PLly0TNfTTsIiIiKJWLxWLydvIB5ezZs/TRbdiwgZLN\nvF+RMKQYBAJ5tjh+/Dg9EfzRf/LkyUHrRmpqqlKpPH/+PCUdN2E/WX19PfG7sLCwf80vhULx\n999/g98ffPBBP9b8rNHS0vJ0WyfHlBvkuXfu3DmVSkVJv3jxIhFtxdBtIpPJiOlBoFQqf/31\nVyMF9Sb2grKysnv37lES29vbL1y40C/1d4uh0zI4rQ8VoGEHgUAGFblcrjdRrVYrlcrB7IZC\noTAlyGy39fRLf8gQhmNzc3O/Vw4hIF+7gbiORtrV2xyO4+3t7Ub6I5fLiQz0Q+CH3gz9NTpD\n9Qza2TN0Wgan9aECNOwgEMigQlcPRhAkODiYy+VSfMAHlODgYGtr695p9ZE92IYPH97vSi6E\nmzzFGdHMeOo+7+Rv6Hqn5cC1q7c5W1tbQr7R0G3i4uKiV8yLGAtdjhH5vyPtCz4+PoQE90DU\n3y2GTsvgtD5kGJxPwv0I9LHDzd2BAAB97MwDuo/dgwcPKO8GW1vbmpoaHMfpH0Z7J0hJ916i\nIBQKHz16hOP40aNHKYdMMfU2btxIHqNed6heQ3a0wnHcjHXjVq5cqTedyWT2l/udkU0kzz33\nHPk8d3R00AN/GYKuPWm6iqGDg0N9fb1Go4mJiaEc2r9/P9GfnJwcym0ilUrB7ordu3dTCo4b\nN47wy6R/qPXy8iI/Z/roY7d161ZK/fHx8YP2oJbJZOStGwiC8Hi89PR0SjbzfkXCzRPmiXnP\nWgA07MwDvSHFbty4ERUVxWKxOBxOXFxcXl4ecej06dMBAQEoigoEgsWLFxcXF2/atAlsU5VK\npX5+flwul8lkOjs7k3fLEoG2UBQdNWpUUVHR4sWLiQUhFEUnTJgwefJkDofDYrFGjx59584d\nosXDhw+DlUKRSLR8+fLq6uovv/zSkGHBYDCIPbwEWq32008/BRG3WCwWg8Fgs9kU45K+OsVm\ns5ctW0be3shkMhctWqTRaMiVV1ZWUmxNR0fHFStWUF5voGlbW1sEQSQSSWJiYkxMDJvNZjKZ\nxIIiOWIYk8mkdwlFUeP7bY3sNabUBtoaNWpUZGQkvSGRSPTpp59qtdrLly+HhYWRq7W3t794\n8WJlZWVISIjeJT3yZQU/uFwukKIF9bDZbAaDweFwpk6devHixfnz5/P5fHBRQH4Oh7N69WqV\nSkW5jhUVFfPmzSOyiUSiDRs2/PLLL8OHD0dRFFRuYWGxevXqoqIiIA2DIIivr+8vv/xSXFw8\ne/ZsHo/HZDJDQ0NXrlwJNkpLpdLly5ePHDkSXIgZM2bk5+eD5hoaGiiVUPpz8+bN6OhocJtM\nmzYtNzeXOPTzzz97eXmB/rz00ktAZYYgLS0tODiYwWDw+fyEhITHjx+Tj/bRsNPpdDt37gQR\n/CwtLdetWzfID7HCwsJZs2aB58DIkSP/+usveh7zfkXCkGLmiXnLagNg5AnzwEjkia6uLiaT\nqdeSANJl5Pc9iGSFIIhWq9VqtcBs6uzs5HA4HR0dVlZWGIa1tbWJxWJyhTKZTKfTEVokwGbS\n++VUoVDw+XzyZOvs7EQQhM/nd3R0cLlcUD9dZA4AIk+AThLj0mq1dXV1Li4uRBgulUpla2vb\n1NTEZrMJwxQ0TWiwGaK8vNzDw4M4D+AsAUm8xsZGGxsbsMBDzqBWq1EUZbPZnZ2dXC4XnDeF\nQoFhmEgkwjCsublZKpVqtdp79+5FR0cTRZhM5pMnTxwcHHQ6HYqiMplMqVRaWFiIRCIej9fU\n1KRSqdzc3ECkNYlEolQq+Xw+UJ1IT0+fOHEihmE6nY6Q86iurrazswM9QRCEsgypUqnYbHZ7\ne7tAIKBcnYaGBj6fj2EYj8fTaDQsFovH48lkMmB5azQanU4HagMDB/8SAweV6HQ6jUbD4/FA\nh428Hdrb2zkcDoZhGIaROwmukUKhICfiOK5UKsnPYaIh8F/ytTA02+mVUOjq6iJbpWTI9dMB\nZ5W+ZtlfkSeMtz7QkJ8DdMz7FQlDipkn5j1rAdCwMw9gSDHzAIYUMxtgSLGhDgwpBoFAIBAI\nBPLfAjTsIBAIBAKBQMwEGCsWAoEMCDqd7uTJkxkZGXw+f+7cuaNGjVIqlUePHn306JG9vf2C\nBQuA9zeCIFeuXLl69apOpxs3bhxZ4EOr1R48eHDXrl1lZWUdHR1Ac04kEsXExCxatOjy5ct/\n/vmnRqOxsbEJCwtzcnLCcby9vb2xsbGkpEStVgcHB48YMSI9PV2j0UycOHH16tWGAn/l5uam\npaXV1dV1dHSIxWJnZ2eBQFBRUSGRSDgcDqjwyZMnarXaysoqPDw8MDAwOTm5vr5+06ZNBQUF\nLi4us2bNkslkMpksODh48eLFbDb7xRdfTE1NVavV9vb2586dCw8PRxAEx/Fz587dvXuXzWZj\nGKZSqezt7Zubm/fu3Qtis7q7u7u4uKxZs4YczTYnJ+eDDz6orKz09fWNjIysra21tbWdN2+e\nWCzevn37zp07VSoVj8ebM2cOh8MpKioSCAQNDQ1gSwqCIC4uLnl5eeCLf2ZmZmpqKtCYbWtr\nwzAMRdG8vDytVouiaHBwsI2NTUtLS1tbG4qiarVap9MxmUyZTKbRaBgMhoODA4ZhNTU1IOit\nh4eHQCAQi8Uikaiqqkomk3V2dqIoamNj4+fnJ5PJGAyGo6OjUCisqKjAMMze3h6Mms1mh4aG\nxsXFcbncF1544cmTJwKBQCAQqFQqS0vLf/3rXykpKcXFxWfOnGlsbFSpVMXFxeXl5Y2NjVqt\nViwWL168OCkpadSoUQiCtLa2Hjly5M6dO/X19cARcMaMGcuWLSO8cS5duvTdd98VFRXxeLzg\n4GA+n19XV6fT6SIjI+Pj49PT00+ePNnV1RUXFwfkoKuqqs6cOVNbW+vn55ecnGzip2etVpua\nmvrgwQNra+vZs2cHBgYiCCKXy48cOVJcXOzq6url5XX//n2lUjl69GhHR8dLly7J5fJRo0bN\nnz/fePi7oU5lZeWJEydqa2sRBOFwOAwGIzY2Ni4uzsRSw4cPX7JkiXk7APQ/A719o9+Bu2Jx\nc9/yA4C7Yoc0bW1tI0eOJD9q3nrrLU9PT+K/PB7vwIEDGIZRwoglJCTodDocx5ubm02XnzAF\ngUDw559/0ru6bdu2Xvj/2draGnof+/v70517Nm3apFKpyHHcjTN37lzQvU8++USvmymbze6R\nK1h6evoQimPh7u5OjqOql3ffffeff/4BG4EpSKXSf/75B8fxhQsXmt6ora3tnj17yNfO1dWV\nCNVlBJlMRlaP43A4X3311YMHDwxttSETHR3d0dHRrzdf973ty67YHnHixAm9jm7z5s0j9Fno\nnDx5klzKxcWlsLCwR+2a9ysSyp2YJ+Y9awHQsBvSrFq1qttXmlAo/Oyzz+jpX375JY7jy5Yt\n67aGnmJra9vW1kbu5z///NPvrRjipZde6lH+vXv3lpeX99dyjlkuCxkRHfTx8fn55597WiF9\n12pkZGS3sz05OZlSisfjeXt7m9jo2rVrB+o+1MegGXY1NTVkTSIK27ZtM1SKvp8sIiKiR02b\n9ysSxoqFQCBPAVOiN3Z2du7fv5+efuzYMZ1O11/RLck0NjZevXqVnDLIEUJ7lP+nn37atWsX\nhmH90np/1fNMUVNTY+hQSUnJ999/39MKtVotJSUjI+Px48fGi5w6dYqSqFKpSktLTWz02LFj\npvdwCHHhwgUjwb4MjZocMJfg3r17JSUl/dk5swYadhAIpJ/R6XRArqxb9GZra2tTq9Vqtbq/\n+4UgtLCSgxllkh703ThtbW1NTU0D1Jn/Buj2wUDUo1Kp+jhX5XI5PtR0x0zB+M1l6KwaKtVf\nV/O/AWjYQSCQfobJZPr5+ZmSU68XXVBQEJ/PJ4dk6EcosSb1BtYcINzd3XuUPzw8fPz48QPU\nGfPAiMglg8EAuyv6CI/H8/X1NZJBJBLpnaumf/sOCgoyS7VO4zeXoeC8ekvxeLzBDCQ95Bms\nj8L9BvSxw83dgQAAfeyGNL///jvlUUMPqzB+/PiSkhKKPw0RxfX06dP9/rijhAfFcVyhUIAN\njAONRCK5ceNGt0FsCXg8XlVVFY7jPTUHDREZGUlsQzYP3Nzc1q5da+jov/71r4qKCr0R641A\ntzY+//zzbmf7iRMn6PVs3LjRxEb17ukZOAbNxw7DsBkzZugdslAofPjwoaFSM2fOpOT/7LPP\netS0eb8i4eYJ88S8Zy0AGnZDndOnT/v7+6MoyuVyExISysrKfvjhBxBiUiQSpaSkgACXmZmZ\n48aNY7FYTCYzJibm9u3bRA3Hjh0zFM5BIBBQFjkYDAYlehI5NCqXy12/fr3eu6aqqiopKQlY\nAMB3XiAQWFtboyjK4XAsLCyIQLQEbm5u33zzzcyZM8GqDIqilpaWoAZvb+8DBw5s2bKFXMTO\nzq6urg7H8cuXL4eGhjIYDBaLBfLzeDz60o6Xl9e9e/dA9+rr64lwqyiKglJCoXDp0qWrVq2i\nR2jVe7r8/PzUanVpaWl8fDw9xtSAQj97ACaTGRUVpTeKmlgsPnXq1IoVK4DIBX1DA4qi8fHx\nxcXFarV68+bNNjY25KMWFhabN29Wq9U4jmdlZZHX24iQr6DayMhI4u8KoVD47bffVlVVvfLK\nK8Dl39nZefv27WCPdrccPXoULCnx+fzFixc/efJEo9F8/vnnQGFHLBZ7eHiAILaBgYFjxozh\ncrkoio4YMeL8+fN9v9d6xGDuim1paVm7di04nyBIIJPJjI6OvnXrlpFSra2tr776Kijl5OT0\nzTffmHgVCMz7FQljxZon5h0vBQBDipkHTU1NWq3WysqKkBTp6OgQCoWUywpew3oVLjo7Ozs7\nO9lstlwuZzAYIFwpsG/q6uoYDIZEIiHCkgJFN5VK1dra6uzsjCBIe3s7hmHdnmSdTqdSqUBE\nVxCXXaFQgEDjCoWCw+Go1WqVSmVlZQW07oiCdXV1YLOtpaWlUqkkC261tbWVl5cHBQVRTDel\nUslisdhsNnEqtFptQUHBiBEjGhoaLC0t9cqvVFdXgxF1dHQIBAKiTrlcXlhY6O/vLxKJtFpt\ne3u7UChkMBjNzc15eXlSqTQ4OJhcj1arBQJ1YrEY1Ilh2NmzZ6dOnSoWixUKhVarBUp4Dg4O\nzc3NQJfu5s2bHh4eXC4XmKR//PHH7NmzVSoViBcHAneCt69cLgdyd0AC0MHBQaPRdHZ2CgQC\njUYDYu8CPTMwTK1WW1ZW5ujoKBKJwA9iXRPDMIVCIRKJVCpVR0eHtbV1aWmpi4sLm82mWHty\nuRxE6dVqtfSdmGq1uq2tTSQSgWitSqUSWO2gko6ODq1WC14ZREgxYhr0iM7OTh6PRzGd5XI5\n6JJGo9FqtWDqgqvwVJ7hTyWkGDifarUahP3tUaleNGfer0gYK9Y8Me9ZC4CGnXkAY8WaBzBW\nrNkAY8UOdWCsWAgEAoFAIJD/FqBhB4FAIBAIBGImQMMOAoFAIBAIxEyAhh0EAoFAIBCImQAN\nOwjEbGlra/uf//kfX19fOzu7uLi49PT0p9ufCxcujB07ViqV+vj4BAYGOjg4SKVSqVQqkUjC\nwsJ+/PFHIuxVVVXV8uXL3d3dbW1tgSAIkE1ZuXJlXFwcn89ns9lCoXDOnDmFhYV79uwJDw+3\nsrIaOXLknj17MAyrq6t74YUXRCIRKMhisYDA6b///e/Ozs7Tp0/HxMTY2NgEBQW9++67s2bN\nEggELBZLKBRGREQAHQoglbJ69Wocx2/fvm1tbQ2q4vF4mzdvXr16tUQiYbFYHA7Hzs7O0dFx\nxIgRycnJqamp4eHhYMsn+n9hs9nAK5/L5UokEiD9wOfz/fz8yJldXFxqamp0Ot13330XEhIi\nEAg4HA65HgaDYW9vv2vXrldeeYV+iMlk8ng8GxsbFotFaX3lypUNDQ3r1q3z9va2s7MLCAiw\nsrIiNw36Ex8fn5WV9fjx44SEBJFIBPafMhgMNptta2srEonI1YLmUH1QzgCHw3FycrKxsbG2\ntra0tGQymfQiLBbL2tra29t73bp1zc3N5JmTnZ3t7OwM6gRjoURIa25u5vP5RFUCgWDWrFl8\nPh/0XCgUenp6vvzyy/X19eRSaWlphJyNQCAgB7hLTU2NjIy0trYOCQnZvn07PdQYnVu3bk2d\nOtXW1tbX1/ftt9+mR1DAcXz79u1SqZTJZHI4nJEjRxYWFlLyaLXaHTt2hISEWFtbu7u7u7m5\nWVtbR0VF0aXyIBCDDILmSv8CdexwcxfpAUAduz6iVqujo6PJNzuPxzMuHzUQKBSKxsbGrq4u\nU2K/vv322ziOy2QyoOthCnTphLffftvHx8dQ/oCAABNrBiQkJKCDuy+bx+OtWbNmIGoWiUQm\nduCpqwqEhIQolUowhfLz8+lSfzNmzCBPMxPDPPj6+ra3t4Mi9+7do2c4cuSIWq3esWMHJX3N\nmjXG5/m1a9coRcaOHavRaMh5PvzwQ0oeHo9XWVlJzrNu3TpDnd+5c2cfb0bAYOrYPS3M+xUJ\nBYrNE/OetQBo2PWRn376if5uCAsLG6DmDAEMO4VCoVeKlk5JScn69etNyWmIQbbDIAPE119/\nDaaQochgJSUlIMOqVatMr/bDDz8EpYB0MAWhUCiTyfTGq7h//76Rea43ENb+/fuJDDKZTK80\nNPkN/fDhQyM95/P5IKpsH4GG3VCnW8MOfoqFQMyTf/75h554//79PgYs7x0VFRUNDQ2m5Lx3\n757enpsOPtS0OSF6ycjIAD/y8vL0Zjh79iz4cerUqV5UK5PJ6EcVCsXDhw+VSqWRgnSUSqXe\nTpKL3L9/X6fTGc+jdxGR3Epubq6RDBAIABp2EIh5ojeKA5vNHuSIUgDTteb5fL7pmSFmDDEN\n6CHFAESEiR5pXxPVGvp6a2j6GQk7y2Kx9HaSXJWhasn3qd571sQ+QCAE0LCDQMyTWbNm0RNn\nzpz5VAw7JyensLCwbrNJJJLY2Nj4+Pi+tNW/oRGeyoddaNoiCDJ79mzwQ+9MZjAYixcvBr+3\nbdvWi2r9/f3pRx0dHYOCgkBEYzJCoXDSpEmG6mSz2XFxcfR0cs8jIiL0RseaP38+8XvChAlG\n/CDd3d2DgoIMHYVA/n8G66NwvwF97HBzdyAAQB+7vrN27Vryze7i4lJdXT1wzemF2DyRk5Nj\n3CWfy+WeOHECx3GtVjtlyhQTn2A+Pj6UNY8zZ87MmzfPUH6wW9bEyhEE2b9/v+mBiQytLfWI\n4cOHHzp0yPgqlIl7BShQgsYawtPT05Bb26CxYsUKYgq1tbXRw7V9/vnn5GlmYoCs+fPnE48U\nhUJBCR3GYDCKi4vVavW1a9coF33fvn3G53llZaWjoyO5yBtvvEHJc/HiRcqF8/LyIvaIAA4c\nOKD30guFwuvXr/f2Lvw/QB+7oU63PnYwVuyQxLwD4QFgrNh+4cKFC+fOnWtpaRk5cuTq1at7\nF1G7L5BjxTY0NHz//fcPHz60tbUVCoW1tbVdXV1dXV1sNtvT03PVqlV+fn6gFIZhhw4dunLl\nikajKSwsLC0t7erq8vDwOHTo0M2bN48ePSqTyezt7ZctW7Zy5cry8vKffvqppKTEx8dn1apV\nw4YNw3E8NTV17969mZmZOp1OJBJ5e3sHBgYmJiZOmDChpqZm165d+fn5Li4uS5YsycnJ2bt3\nb319vaOjY1JS0r59+x4+fIhhmIODw/nz50NDQ3U6XUJCwvXr1zUaja+v78WLF7Oysr755pvS\n0lKxWDxs2DAul6tWq6dOnZqQkLB9+/azZ882NDS0t7crFAowHB6P5+fnx2azOzs7ORyOm5tb\nWVlZS0uLvb39Cy+88OGHHwJ/LxaL9fbbb3/88ccoij58+HDv3r3Z2dn19fUVFRWdnZ0IgqAo\namVlNWHChK+++qqqqmr16tXgzKAoCqK4crlcqVTq5uZWXV2dmZkJNEFQFA0KCtq2bdvUqVN/\n/fXX3377TS6Xu7u75+fnp6enKxQKDMOA3kdgYODcuXNffvllDoezf//+gwcP1tbWcrnc2tpa\nhUKh0+lQFMUwDGh/oCgaEBDA4/GKiorIL1FwyNnZuaGhQaPRoCjK5XK9vLyio6PlcnlHRweT\nySwqKiovL9fpdEBcRqVSsVgsDw+P0NBQCwuL+Pj4uXPnkmeRSqV67bXXTp8+rVKpnJ2d9+zZ\nExsbS5lpCQkJ586dw3EcRdHExMQFCxZs2bKlrq6Oy+X6+vq6urpOmzZt0aJF5OdJV1fXjBkz\nwIkKDAy8ePEiEHBhs9lVVVW7du0qKipydXVdsWJFSEhIt1NdLpfv2rUrKyvLyspq/vz506ZN\no+cpLS1dv359bm6uQCBITEx877336HFpc3Nz9+/fX15eLpFIUBRta2sbPnz4K6+84urq2m0f\nTAHGih3qdBsrFhp2QxLznrUAaNiZB2TD7mn3ZQBpbm6mryqZE2B1GZiPT7svA0h7ezsw7J52\nRwYQaNgNdbo17KCPHQQCgUAgEIiZAA07CAQCgUAgEDMBGnYQCAQCgUAgZgI07CAQCAQCgUDM\nBGjYQSAQCAQCgZgJ0LCDQCAQCAQCMRP6QU4TAoFA9NLQ0PD7779bWlpOmzYNyJ1gGFZeXt7S\n0jJ8+HCyULBarX706FFZWZmXl5ebm1tOTk5ra6ufn59SqeTz+d7e3s3NzcePH9dqtWPHjmUy\nmf7+/jweT6PR5KNwj5MAACAASURBVOfnV1ZW2tvb+/n5/fbbbyUlJcuWLcMwrLm5GUXRR48e\nIQgSGxvr6emJIIhOp7t169bNmzdjYmLGjh1LqFqUl5dv3ryZwWDMmDGjo6MjNja2tbWVwWB0\ndXW1trZKJJLhw4fX19dXV1ezWCwbG5urV6/qdLrk5GQej1dYWMhmsxsbG729vd3d3VEUra6u\nvnv37qNHj3Jzc9vb26dPnz579mwPDw8URVtbWzMzM69fv25ra/vcc8/V1tbeu3fPxcXl4MGD\nWVlZixYtmjFjBoPB8PDwOHPmTG1t7Zw5czo6OlgsVklJibOzc2RkJBD2y8vLKykpiY+PDw8P\nP3fu3E8//eTs7GxnZzd27FgWi1VdXe3s7NzZ2Zmeno5h2EsvvSQUCu/duyeRSEJCQh48eFBQ\nUODp6clisa5duyYUCnNzcysrK2fNmjVx4kRra+vi4uLffvsN9Fyr1Q4fPvzJkydXrlwRCoV+\nfn6hoaHp6elyuVwoFAYFBUkkkvPnz8tkMg8PD2tr6x9++KGpqWn16tXu7u6XLl1CEOT5558H\n0ncWFhZKpbK4uFgul0skErFY3NLSIpFIVCrV6dOn/fz83n33XZFI1NjYmJWVhWFYaGioSqVq\nbGzkcrkYhjk7O5eXl9fU1Mjl8gkTJiAIUlBQwGAwAgMDlUplaWkpm81WKpVpaWmBgYHR0dFA\n8+/evXuWlpaRkZGlpaWXL1/29fWNiYmpqqqyt7d3c3Nramq6fft2WlpaQ0NDYmIiRTwPzFWZ\nTMbhcHAc9/f3R1G0oKCAy+X6+PiYIkZdVVV1/fp1Dw+PqKiovohXq9XqgoICFovl6+vbdymW\nlpaWiooKf39/JycntVpdWFjIZDL7pWaAoXscMngMqD7yQAAjT+DmLqsNgJEnhjrkIEtcLnfP\nnj337t0jhF75fP5//vMfcH1PnjxpXHiSHmLL0tIyJSXFdOm4wMDAH3/8kVwPm80+ePCgTqdz\ndnbutrghMUVKIIHQ0NDIyEi9Ob28vBYvXtxHUUYWi2XeEmsODg6D1pa9vT3lcqAo+u6776rV\nahzHyXMVQNbwc3NzS0tLMzL5GxsbydE7BALBkSNHencfHTp0yNbWFtTj4uJy9uzZ3tWD43hn\nZ2dKSgoxaYODg21sbMBvZ2fnM2fO9LpmgqysLCJ4II/He//995/KM9y8X5HdRp6Aht2QxLxn\nLQAadkOa5557jvIeZTAYxPuJYPv27Xfv3n1a2sVgveepNA15Zjl+/HhjY6OTk5PxbAKBICcn\nR+/kxzCMbt8zmcz79+/39D66cuUKpR4+n5+Zmdm7uzIlJcXIiHg83r1793pXM6CpqcnFxYVS\n7ZdfftmXOnuHeb8iuzXsoI8dBALpf44ePUpJwTCssbGRkvjJJ5988cUXarV6sPpF7dLDhw+f\nStOQZ5Z33nln3759NTU1xrMpFIovv/xS76Hs7OyMjAxKok6n27RpU087s2XLFkqKUqncunVr\nT+tBEKS+vn7Pnj1GMqhUqi+++KIXNRP88ssvT548oSR++umn+FALcDXUgYYdBALpZ9RqNQgn\n2i0NDQ3FxcUD3R8IxHQaGhoeP35sSs7S0lK96YaKl5SU9LQzeqsysXsUysrKQOzgnjZnOnqL\nNzU1tba29qVaSE+Bhh0EAulnOBwOxfnMEGKxuNtvXhDIYGJhYWFvb29KTkdHR73phor3woNQ\nb5HeeSKaUqqPPo56By4UCi0sLPpSLaSnQMMOAoH0PzExMfRE+h6Il1566eWXXx6UHunH9O0X\nkP8S1qxZs2zZMmKfhBFeeuklvekxMTGurq709A0bNvS0M3qb6N0t4+HhQd7PpJc+3oxLly6l\nb4NdtWoVk8nsS7WQHjNY3n79Btw8gZu7ZygAbp4Y0nR2drq5uRHPGRRFX3vttZMnT5INqQUL\nFqhUKhzHP/roI+OPfr2bSUeNGmW6hISFhUVKSgq5HhRF33jjjc7Ozn7cumFtbU1sM6TA5/Ph\nRo1u6YsmSE/Ru7945syZYFcsZa5S4PF4xvcE5Ofnk2cCiqJvv/12726ljRs3ElOUx+Nt2bKl\nd/XgOF5TUxMVFUX0ytLSkjgJXC4XOMP1kTNnzpAHPm/ePKVS2fdqe4p5vyK73TyB4kPNq7Gl\npeXVV189fPiwoQwymYzFYhlXTxjqqFQqDMMEAsHT7sgAIpfL1Wq1jY1NHxUinmV0Ol1HR4dE\nInnaHRkoTp8+fe7cObFYvGbNmoCAAARBWlparl692tLSEh4eHhoaSuQsLy8/d+5cYWGhn5/f\nsGHDbt261dzc7OXlJRaLLS0tx44de/Xq1f3796vV6pEjRwYHB0dFRfn5+VVUVKSlpRUUFLi7\nu3t5eR08eLCxsXHy5MlBQUGVlZUymSw/P5/FYk2fPn3x4sUCgaC6unrLli05OTn+/v4bNmzw\n8vICrf/73//ev38/hmG+vr5eXl4BAQG2tratra1KpVImkzk7OwcHB8tksuzsbIFAoFKpMjMz\nEQRZsWKFv79/VlZWU1OTTqcLCAiYMGECh8P5+++/Dx06lJWVVVtbi+O4p6fn+vXrExIS/j/2\n7js+ijL/A/j07Um2p0MaARKq0qUoAic/EEUs2Asqh5564lnRU7yipyKcJ/auKCCIKAJKB0F6\nDy0JpGd7z+5O/f0xsC67m7Dpyfp9/5FXMs/szLMlu599Zp7vpKSk7Ny589NPP927d69Wq73n\nnnucTue+ffucTue2bdu8Xq9er//LX/6Snp6O4/iSJUs8Hs/gwYMLCgoqKipsNltqaupdd93l\n9/u3bNny/fffezyeIUOGPPTQQ3PmzDl06BDP86mpqYWFhampqSaTKTk52W63nzhxgiTJ6dOn\nDxgwYPv27SqVatiwYTt37jx27FhmZqbT6SwvL3e73Wazmabp1NTU++67Lzk5effu3Zs3b+Y4\nLjMzs6ioSKPRnDp16tSpUwiC9O/fPyMjo7S0tK6uTq1W9+/fnyCITZs2ORwOjUZD0/SZM2d4\nntfr9cOGDduzZw9BECNHjuzXr5/H40lOTrbZbCUlJW63W6lUimUI5XJ5ZWVlWVmZWq3+17/+\nNX369M2bN69du5bn+VGjRqEoWllZyTCM0WgU19y7dy9BEKNGjUpNTf31118JghgyZAjDMPv2\n7aMo6tChQ2VlZSkpKddcc02PHj28Xm9JSYlSqbzmmmu2bt26bdu2jIyMcePGoShqNBrHjBlz\n8ODBxYsXb9u2jabpAQMGvPbaa7169ZJKpWLcEV+r586dY1nWYDAMGzYMx/HffvuNoqhRo0ZF\nT/+MwDDM119/vXXr1rS0tPvuu0+spNgyZWVlu3btEh/M8O9LLSAIwpo1a8rKygoLC8eNG1db\nW7tr1y4Mw0aNGtXKLYc4HI6tW7fa7faBAwcOHjy4TbbZXIn9EckwzIwZM77//vvGVoBg1y0l\n9qtWBMEuMYhfnZOSkjqrpknHsNvtiX1UVxxdDq/llpA8Hk8o2CUqm82GYZhare7sjrSjxP6I\nvGSwg3PsAAAAAAASBAQ7AAAAAIAEAcEOAAAAACBBQLADAAAAAEgQEOwAAAAAABIEBDsAAAAA\ngATRcdUgu6MTJ06E/9mnT5/O6gkAAAAAwCVBsGuGiJwngrQHAAAAgC4Cgl1rQdoDAAAAQBcB\nwa5dQNoDfxA1NTWffPJJWVlZTk7OXXfd1aNHj5bdPCUl5fTp0wcPHuR5PisrKxAI1NfXEwQx\nfvz4999/Xy6Xr1u37ueffz5x4oR4fS2SJEeNGjVv3rx+/fohCFJeXn7NNddUVFQIgqDVarOy\nsqxWq8lkYhgGx/Hs7Oybb7757rvvzsnJqa2t/eijj9avXx8MBgcMGDBjxozRo0c/99xz4kW0\ntFptz549s7OzCYJYsWJFWVkZTdMIguA4LpFI1Gr1pEmTFArFkSNHaJru3bu3VCq12Ww7d+50\nuVx+vx/DMKlUShAEwzBSqZTjOJqm9Xr9Cy+8cPvtt1dXV7/xxhtffvml1+slSZKiKEEQCIJw\nOBwMwyAIgqLou+++m5aW9sYbb5w4cYLneQRB/H4/TdMsyyIIIpVKhw8fXl9f73a7DQbDtdde\nO2bMmJdffvnIkSMej4fneYIgLr/88g8//PDjjz9euHChuFkMwyQSCY7jPM+LF+4U96VQKPx+\nP8dxoadDLpeL10xraGgQBAFF0YKCgkmTJi1dutRmsyEIolKpeJ53u93iRtRqtSAILpdLvCM4\njgeDQXGPSqXS5/OJdwHHcRzH5XJ5SkqK2+32+/0oiooXtcRxXNwXgiAKhWLgwIFTp05dt27d\n8ePHfT4fx3E8z5MkmZaWhmGYxWLxer0EQRQVFWEYdvbsWZqmVSqVIAhOp5PnefHSwwiCyGSy\n9PT05OTkQCDg9/uTkpJUKhWO48XFxRMmTMjNzX3++edPnTrF87zH42loaMAwrFevXn/6059m\nzJhRWFi4a9euVatW2e324uLi8vLyLVu2cBwn3tmGhgaj0ahSqRiG8fv9aWlpAwYMmDVrllKp\nDH9hOxyOjz766MSJE6mpqTNnziwuLg41+f3+jz766PDhwxqNZtq0aSNHjjx+/PiSJUt27doV\nDAb79u07aNAgk8lUWVmZn59/zz33pKenN///Ejl79uxnn31WUVFRUFAwfPjwhQsXnjlzRq/X\nz5kzZ8KECaHVzp079+mnn1ZUVLRmX21l8+bNP/30k8vluuyyy+6++26JRNKJnenW4JJiTYmZ\nz9pWy9JeYl8vRQSXFOv6Nm/efO2113q9XvFPuVy+fPnyyZMnh6/TxCXFIm7eGIlEcv3113/z\nzTfRTRiGvf3220ajcfr06ZfsrUwmmzdv3r///e+IPZIkKQagdjVixIiDBw8GAoH23hFoDalU\nOm3atKVLlzbrVhkZGTt27OjZs6f4Z0lJybhx4ywWi/gnRVFvvfXWAw88gCBIfX39yJEjz549\nG7rt1KlT169fL35/iKZSqX744YexY8c2qz+rV6++5ZZb/H5/zNaJEyd+8803arX6hx9+uPnm\nm0OrtWxfbWXu3LkLFiwI/dm7d+9ff/21xZfpS+yPSLhWbKt0QLCLFk/US+xXrQiCXRcXCATy\n8vJqa2vDF+p0urKysqSkpNCSxoJdzJu3AEVRHMeFDzs1AcMwcQwJgLZ11VVXbdy4Ufz98ssv\n379/f3irTCY7evRoXl7e9ddfv2rVqmZtOTMzs7S0NP7hK6fTmZeXZ7fbm1jnnXfeueWWW/Lz\n88WB2Bbvq638/PPPkyZNilh4xx13fP755y3bYGJ/RMK1YrufE7F0dqcAiLR79+7oWGa1Wrdt\n2xbPzffs2dP6VIcgCE3TcaY6BEEg1YF2snnzZofDgSBIZWVlRKpDEMTv969du5Zl2TVr1jR3\ny9XV1Xv27Il//a1btzad6hAEWbZs2bZt2yJSXQv21VZiht3vvvuu43uSGOAcu+4hItsxDCMI\nwoABAzqrPwA0NDQ0a3nLVgOgWxBPv1Or1Y29sH0+XzAYbNlBf5/PF//K8fxneb3eJvoZ/77a\nSsyd+v1+nucxDIafmg2CXTcGUzRAJ+rfvz+O49GjZYMGDWrNzQHojtLS0tLS0hAEycnJSU5O\ndrlcESsMHjxYoVD06tXr9OnTzdoyjuMDBw6Mf/14Vh42bFjM1Zq7r7YyaNCg6KOuAwcOhFTX\nMvCoJRo4kgs6RkZGxlNPPRWx8NFHHy0oKIjn5unp6U8//XSc+9LpdI01TZo06frrr49zO5df\nfnmca7Y5mOLXXRgMhhbcatGiRWIKkUgkr7/+ekTrtddee/XVVyMI8t///jeiSa1WN73l5557\nLjU1Nf6e9OnTZ86cOU2skJKS8vjjj/fu3fuhhx5q5b7ayoMPPlhUVBSxcOHChR3fk8SAv/ji\ni53dh+YJBAI//fTTDTfc0NgK4tx1qVTa+n1ZrdbWb6Q9hIoIxLm+NRa9Xt+efWytYDDIcZxc\nLk/gyROCINA03Sav1U4xbtw4nU5XWlrqdrtzcnKee+65559/PuJlybIswzBiuY2Im48dO1av\n14s3T0pKYllWfGGjKBp60hUKxcKFCxcsWGAymaqqqsKPZEml0vvvv/+DDz649dZbjx8/fvLk\nyVBT9GvGaDS+8MILYjGRY8eOud1uFEXlcvkNN9zw4IMP7tu3T5wbSBAEiqJpaWkSiSTmpEKZ\nTKZQKBiGwTCMoiiNRkPTdNOn7qEo2qdPn99++y07O3vnzp2NzX8UkSR55ZVXVlZWNjatLXTX\nUBTNyMgoLCw0m83hHcBxfMKECbW1tWKFlNaTSCQdNrCKYZharWYYJvohDX9OURTFMOySM/9C\nLyTxFxzHFQrFn/70pwEDBpSVlUU8PuLj+be//W3x4sWBQKC6upqm6dzcXEEQxBou4gtY3I5E\nIhEEgSRJFEUHDhy4ePHi8I+kwYMH9+rV68yZM3a7PSMjY86cOYsWLRInD+Xn548YMeLMmTMW\ni0Wn091xxx1LliyRyWSlpaU+n0/85CooKJBKpQ0NDfn5+S+99NLcuXObO3A1YcIElUpVXl7u\n8Xjy8vIKCwutVivLsjiODxs2bNmyZampqTKZbMKECUqlUlytxftqEyRJTp8+3eFwVFVV8Tw/\nbNiwzz//fMyYMS3eIMuy4hPUhp3sOnieX7Zs2cyZMxtbAWbFNqXLjnWJ59hF149opS51GBdm\nxSaGJsqdJBK73d7i0gzdAsuyTqdTzLWd3Zd25PF4pFJpogYCkc1mEwN0Z3ekHf3BZ8XCOXbg\nd3DSHgAAANCtQbADlwBpDwAAAOguINiBloC0BwAAAHRBEOxAm4G0BwAAAHQuCHZNyfzLXwSC\nYA0GNjWV1esZ8afRKHTbaYwdLzrtQdQDAAAA2gkEu8bxvHLLFjTWPH9BImENBlavZ/R6JiuL\n1et//zM9HYm7CskfEwzsAQAAAO0Egl3jTKaYqQ5BEDQYJKuqyKoqWaxWLikpIu2JvzPZ2ZxK\n1a5d7r6i014gEMjKyuqUzgAAAADdFAS7xjU0BPr0ISwWwmZDmlPtD3e78ePHYzbxSiVjNLIG\nA2swMEYjq9ezaWmsTscYjZxOJ8BQ38XOnj1rNpsj6tjB2B4AAADQGAh2jcvLO7tiBYIgKMMQ\nVitRX09aLITJRJhMhMVC1tcTFgtRX48FAvFvEvN6JV6vpKwsRhuOs1otYzCcT3t6/fkIaDQy\nBgMPQ30XwJFcAAAAoDEQ7C5NIEkmLY1JS4txgSEEwT2e6LR3PgLabEiT1xq6CMcRZjNhNsds\n5KXS8LQX1OlovR5JS2PS0jidTiD+6M8jpD0AAAAAgWDXepxKxalUwfz86CaU43CrVUx7pMlE\nmM3hERBraIh/L1ggQJ09S509G6MNRVmtNjS2x+r1TFoadyECcgl9uaqmQdoDAADwRwPBrh0J\nOM4ajazRGLMVa2g4P8Inpj2zmbyQ+XCrtbF5G7F2IxBWK2G1IiUlMRql0t8P7+p0YsWW8xHQ\nYBAS+vKdMUH5FQAAAAmsE4JdTU3Nm2++WVpaumrVqtBCr9f7/vvvHzlyhGGYwsLC2bNnGwyG\nju9bR+Ll8mBubjA3N1YbT9hshMlEWiyEOOAXFgFxjyf+vaCBAFVZSVVWxmzlNJpQfb5Q2hOL\n9rEJfUXzcDCwBwAAIGF0dLDbvn37hx9+OGjQoNLS0vDlCxcu9Hq9f//73yUSyZIlS+bPn//f\n//4Xw7AO7l5XgWGsXs/q9THnZWCBAFJdTVgsMqs1lPbOR0CrFWWY+PeD2+243S45dSq6SaCo\n8LT3+xxevZ4xGBK+RDOkPQAAAN1RRwc7hmFef/31srKyLVu2hBZarda9e/e++eabOTk5CILM\nnj37jjvuOHr06IABAzq4e90CL5UyPXoEsrPp6AOpgkDYbGLaI81mwmz+fcDPasUdjvj3gtI0\nWVND1tTErtWXnCymPS7sghxiGRdWp0MuLlCSMCDtNWHHjh3XXXed3W5HEESj0axataqkpOTx\nxx9vaGhAUbRnz57bt29PT08XV66urn7ppZfWr19vtVoZhkEQhCCI5OTkYDDo9/sxDCsuLl6+\nfLnH43n55Zf37dvncrn8fj+CICRJ0jQdCASEsApEKIpKpVJBEILBoPinRCJhWZZl2fDVNBrN\n3r17T5w48dprr+3evVvcr1QqpWmaufB1CEVRjUajUqkIgqiurg4Gg4IgoCgasTvxZ2pq6ssv\nv/zll1/u2bOHZdnU1NS+ffseOXLEbrcTBEHTtNif0MoGg8HhcFSGDZ+HSvmEtq/T6f7xj3/M\nnj07tA5FUQzDhFaI6Ez8MAxTKpVer5ePf0ZXp0JRFMMwnudj3l8URVEUDd0XHMdJkhSfL+TC\nAxu6IUVRzzzzzE8//XTs2DGe53v27HnzzTd/+OGHFosl/Knv3bv33Llz77jjDp7nH3vssS+/\n/NLr9SYlJf3lL39JTU39+9//brfbKYpKSUmRy+UYhgmCwLJsXl7eo48+mp2d/fLLLx8+fFit\nVk+ePLmmpmbFihVer1epVN5www1qtXrjxo1er/eyyy7zer2bN2/2+XwoiuI4ThBEfn7+Lbfc\nUllZuWPHDvGlcvbs2erqakEQZDIZRVE0TeM4npeXd/PNNz/88MO//vrra6+9dvr06fT09Lvu\nuuvuu+/GMGz79u2vvvrqqVOn0tLSbr/99lmzZsUzMmKxWObPn79t2zZBEK644orMzMw1a9ZY\nLJa+ffs+++yzAwYMWLRo0YoVK5xO54ABA+bNm9e/f/82eXLjx7LsO++8880334R6NXTo0A7u\nQzxOnTo1f/78/fv3JyUlTZky5YknnpDL5Z3VmRa+R7TSb7/99sorr4QOxe7ateuNN95Yvnx5\n6G3uL3/5y+jRo2+66abo2zocjocffvirr75qbONWq5UgiJSUlNb3M+YHeVcgvtFTzTxDDg0G\nCbM58vCuOIfXbEYvfAi1kkAQrFZ7UcUWg4FJTWV1OjYtjZfFDIoxBAIBlmUVCgXaDWNinGmP\n4ziv15vc/Se4HDp0aNCgQU2vQxCE2+2WyWS1tbUDBw60WCxNr0+SJI7jgeaUE7qkFqci8Mfx\n9NNP79y5c9u2bc26FUEQLMu2U5fCDR06dM+ePeFLHnnkkXHjxk2fPj184ezZs995552YW7DZ\nbBiGqdVqp9M5cODAioqKOPcllUq3bNkybNiw1t2D5rn99tsjPu5//vnnCRMmNH2rQCDA83yH\nRavjx48PHTq0IWxC5OjRozdv3oy3T21ahmFmzJjx/fffN7ZCl5g84Xa7VSpV+Od3cnKyy+UK\n/fnJJ5/s3btX/J2iKI7jwlujXXKFOImDBF2QIAiCIHDxT7AI0ekQnQ6JFTsIp5O0WimTibBY\nKLOZtFhIi4UymwmLhbTb498DyrKkyUSaTDFbOYWCMRoZvZ7R62mjkdFqaaOR1etpg4HVaoWw\nr5jid/G2/VzvMAcOHIhemJeXF7FEfBLb5LXaua6++upLrsOy7Pjx49euXTt37txLpjoEQRiG\nYZpzXkE8INWBS3rllVdacKuOSXUIgkSkOgRB/vvf/37xxRcRC999990ZM2Zcfvnl0VsIve08\n++yzTaS66H0FAoFZs2bt2LGjRR1viW3btkUP4tx3331Hjhxp+gu/ONDb5m8gjZk9e3bDxWUu\ntm/fvnjx4jvvvLM9dscwTNPj7u0b7Hbs2PH666+Lv//73/9uYhij6SeprKws9ApLTk7W6XRN\nP2Ft9Yy2JDl1oLbtHqdSBVUqJCcnugllGNJqpcxmymoV054YAUmbjTKbm1WiGff58PJyaXl5\ndJOAYYxWy1xIe7RWyxiNtE7H6PW0wcApFC2/b13D6dOnoxfm5OR02LtP+3HEd5T/2LFjDMPs\n2rWrvfsDwB9KzH/AnTt3NnE6E8Mwu3fvbu6Ojh075nQ6FR31brxz587ohVVVVefOncvMzLzk\nzTvmrANBEKLTNoIgO3funDlzZnvs8ZIfGe0b7AYPHrxo0SLx99TU1MZWS0lJcbvd4rks4hKX\ny6VWq0MrPPfcc08++WSo6emnn9ZqtY1tzWaziefrtL7/5kbKBXc68eQhkiQ7bpcpKUJ+fhBB\noo/XiiWaSbOZsFiIujrSaiXq6wmzmTSbm1WiGeV5ymKhGhnL4WWy88dzU1NZg4ExGNjUVEan\nY9PSWK22m5ZoFgShsrJSevFMlO540l6ch8txHNdqtc09hQAA0AJJSUkxPyjtdjuGYSkpKRKJ\npLnbRFFUr9fL4j6jppVUjVxySa/XN5EBEAQJBoM8z3dYP2MeclUoFE13ssUYhmn6BMr2/TiU\ny+U9evS45GoFBQUMw5SVleXn5yMI4na7q6qqwj/eZDJZ6BkSh6ku+UHSJidmdfGzu7pI9/ik\nJDopiS4oiG46X6K5ro6wWiNLNNfVYc050o35/ZKzZyWNlWjW6cKvwMukpp6f1WEwcElJLb5r\n7S38RO+QkydPRq/ZxdNeRkZGZSMldcKNHTsWRdGJEyeeOXOmA3oFQAtIJJJgG51w3DEkEonB\nYKiqqopYfvXVVzfxGSH+JzZ3+Hz06NEdOSdgwoQJzz33XMTC4uLijIyMeG7eYR+REyZMWL16\ndcTCSZMmtVMHLrnZjh7ncDgcHMd5PB4EQaxWK4IgSqVSo9GMGDHi7bfffuSRRyiK+vDDD/Py\n8vr27dvBfQNt7hIlmn2+UNoTizMTFyJgs0s0WyyExYIcPx6jMbxEc/h8jm5VormLT8jdtWtX\nVlZW+IGP6GkKcrlcnC/1z3/+c/369REFj6IplUqSJOM8yBsncZZlG24QJJ5XX3119+7dX3/9\ndbNupVAofD5fO3Up3HXXXbd27drw6PnSSy+NHDly4sSJ4Wckz58/v6ioqOlNPf3006tXrz54\n8GDMVrlcPmHChPAz9JOTk99///3Wdb95hgwZ8re//e21114L79Wnn37akX2Ix//+979du3aF\nnzp84403VAtgFQAAIABJREFU3njjjZ3Vn46eIzZr1qyI45uzZs269tprGxoa3n///YMHD3Ic\nV1RUNHv27PBDseFgVizS0lmx3QnHcbW1WF2dyusVa7W0uERz01iNhgsv0Rw24NcBJZp5ng8G\ng217vKCz0l59ff348ePLysoQBMnNzd20aVNFRcX06dMtFguO48OHD9+wYUPogIXX6120aNFP\nP/109uxZ8eNQLpdnZWU5nU673U6S5OjRoz/99FOPx7NgwYI9e/ZYLBan0ykIgkKh8Pv99fX1\nPM+HsiNBEDqdDkEQm83G8zxJkmq12u/3u1yu0HmoKIr269dv69atFRUVb7311po1a9xuN47j\nSUlJwWDQZrOJmyJJsnfv3hqNRiqVHjx40G638zyP43iocgqKoiRJchxHEET//v0XL1783nvv\nrV27NhAI9O7de/jw4du3b6+srJTJZMFgsLa2Vtw7RVGDBg0yGAwMw6xfvz70rivO/A0V6UAQ\nZMyYMW+99dZll10WOhk/PT3dbDaH/hQPwYTufsx5vmIdjfDT+TEMk0gkmZmZdXV1Xq+3xc9y\ndOWXxj5BwptCXQ1fLv6MiNpiEROxCcdxsRgNTdPR2xcfOpqmxYdCqVSq1eqamhqO48SNYBjG\ncZy4X7VavXTp0g8++GD79u0MwwwcOPDRRx996aWXysrK3G632AGCICZPnjxnzpwrr7ySJMn3\n3nvv9ddft9lsRqNx/vz5BoPh0UcfraysVCqVGRkZcrmcIAie51mWLSgoeOihh4xG44IFCw4e\n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\nZcuWVVVV5eTkkCR55swZiqJQFKVpuri42GAw7Nix4/Tp0xKJpLi4eOLEibm5uQiCHD9+fOPG\njX6/f/jw4WPHjm2TF0MnELobu91+6623NrGCxWJxOBwt3j7P83feeWf4Q/T444+3eGvtxO/3\n+3y+zu5F+3K5XBaLRfxET1Qsyzqdzo7c45w5c8Jf2/fff39zH+HHH388fAsYhr3xxhvTpk2L\n590m9MkEAADxmDx5cjAYjHgXevrppxt7M7n77rt5nt+0aZNer49/L1Kp9N13333xxRcpigot\nvO666xiGabt33zZD0/S1117bxAoQ7CK99dZb0c/6N9980+INtgcIdomhg4PdZ599Fv3a/uCD\nD+LfwsqVK+N/rwQAgNZ75plnwt+Fdu/e3fRXxAULFmRmZjZ3L+GRLmT+/Plt/TbcBi4Z7OAc\nu0hffPFFnAsB6F5ivow///zz+Lfw5Zdftl13AADg0iLeo958802hybMd3nvvverq6ubuJfok\njehddxcQ7CLZ7fbohTabreN7AkDbav1rO+YWAACg/US8R1mt1qbXdzqd7bTr7gKCXaTCwsLo\nhX379u34ngDQtlr/2o65BQAAaD8R71GXnM4oTudqj113FxDsIr344otSqTR8iUqleuaZZzqr\nPwC0lXnz5snl8vAlMpns+eefj38LTz31VMQWEATR6XQwKwIA0E7+8Y9/hP85b948pVLZ2Moy\nmWzhwoVTp05t7l6ys7O1Wm3Ewpdffrm52+kKINhFuvzyy7/77rvQyMSgQYPWrl2bn5/fub0C\noPX69u27Zs2a4uLi0J8//PBD//79499CTk7Oxo0bc3JyQkv69eu3ZcuWdevWxZPtuunXXwAS\nWCd+K1MoFBKJJPRnSkpKUlJS+ApZWVlff/31NddcE74wKSlp+/btWVlZ4p8oiqpUKvH33r17\nr1q1avDgwR988MG9995LkiSCICRJinsRa8ogCKJSqYxGY2iDKIpOnDhxw4YN69evHz58uLiw\nZ8+eK1asuPLKK9v8XneA7ldyyeFwPPzww1999VVjK1itVoIgUlJSWrkji8WC47hGo2nldtpD\nIBDgeT567CSRuN1umqa1Wm0CjwZxHOf1epOTkzt4vzabTRAEnU7X4i04HI6ampoePXqE3lIR\nBKmvr581a1aPHj3eeuut48ePV1ZWFhcX9+vXjyTJnTt3il+WeJ7/+eefOY5LSUn56quvXC7X\n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"
          },
          "metadata": {
            "image/png": {
              "width": 420,
              "height": 420
            }
          }
        }
      ],
      "id": "dNujhir1q_0N"
    },
    {
      "cell_type": "code",
      "source": [
        "p2 <- ggplot(data, aes(x = ln_p, y = ln_q)) +\n",
        "  geom_smooth(method = \"lm\", color = \"red\") +\n",
        "  labs(title = \"Regression Line Only\")\n",
        "print(p2)"
      ],
      "metadata": {
        "id": "t7axTjsnq8qI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 454
        },
        "outputId": "84a6aa7b-41cd-43f6-e371-2c46d15c86eb"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1m\u001b[22m`geom_smooth()` using formula = 'y ~ x'\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "plot without title"
            ],
            "image/png": "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\n0029evUaN25cYmKieNh1D3BWUlJiMpn8/PykU5KV9pafny+txMbGOh8gnnR0yPASObXcUR2/\nSlXXw8PDCwsLCwsLa7lf8b1+fn5BQUF12UxVDzzwQGJi4q+//nr48OFbbrnFarVu3bo1Ojr6\n0UcfreV+AQCQg/eGXaWXOykvL+/YseORI0eys7Odw078S12n07300kvV3k5sbKz4V754pLOq\nK4IgOMdfXW5c/JB333139uzZO3fu/PTTT7/66qvXX3998eLF69atE5+Bcd0Dqu6q2kyx2+01\nbVtBdfwqVdW+ffvs7Oxff/31zjvvrOnGDxw4IB7ZkO098cQTL7/88po1a958880vv/yyoKDg\nmWeeqVT5AAC4gfeGXSWBgYHp6emPPvro2LFjf/vtN+l3uQICAsLDw4uKiiZMmOB8ss2ZzWYz\nGAxGo1F8Q1rPycmp/U7rcuOSpk2bjh07duzYsSaTac2aNc8888zYsWP79u0r/Z7cdQ8QhYSE\nBAUFlZWVFRYWVvolsIsXLwrXnlNUgxv6Kjnr0aPH559/vmbNmjFjxtR0jPg6Jn/5y18assOR\nI0fOmTNn06ZNb7zxhvjLdk888URDbhAAgPrx3t+xq+ovf/nLwIEDT58+LT5tUyK+EN23335b\n6fhLly6JbxgMhsTERJvNduTIEecDPvvss+ve6XVvXBCE7Ozsc+fOSX8MCAgYN25c165dCwsL\nxecHXPeASsQzWN9//32lezx69GhgYODNN9983W27WV2+SlX99a9/DQsL27t37/Lly6s94Ouv\nv/7oo4/8/PwaOEMiISHhgQceyM3N/eyzz7Zt29ahQ4dazhECACAfwu4aixcvDgsLe/fdd50b\nQvzFtdTUVPGElui7775r0qSJ+HxJQRAeeeQRQRCkl0MTBGHfvn3Oz5SsyXVv/ODBgwkJCcOG\nDauoqJAOMBqNmZmZBoMhJibmugfUdKfz5s1z/pB58+ZZrdahQ4dWOsOnBnX5FlQVEREhJt3T\nTz/94osvOr/indlsXrZsWa9evex2+6JFi1q0aNHAHY4cOVIQhAkTJpSUlPC0CQCAUrgUe424\nuLi5c+dOnjx51KhRhw4dEl+ILiUlZfv27Rs3brz99tsff/zx0NDQ3377befOnYGBgdLrmzz7\n7LPr169fvnx5dnb23XffnZ2dvXXr1hdffLHSyb+qrnvjnTp1GjJkyIYNGzp06PDoo482atQo\n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\n9sEHzmHDGC/bFrLmHWEHAMAl0rnthPBceWXZunW1999/znjZiRM7v/IK42XbQr7XZwk7AAAu\nne5tpyQkHH3mmR+Ki/2ZmWeWgsGOS5c6R41y7N2r69bMRJq8I+wAAGgX3dtOqONlN248Z7zs\nvn3OsWMZL3tRJMg7wg4AgPYyQtsxXjZSTP36LGEHAEAEGKHtRCvjZZ0jRqR88ol+mzIrM+Yd\nYQcAQGQYpO0ac3LKV6+unjw5NF7WXlPTo6Ag6ze/sXo8+u7NjMyVd4QdAAARY5C2U+z24489\nVv7HP/44XlZROrz1lnPUKMbLXhqzvD5L2AEAEEkGaTshxOlrry1bt87185+HVuJLS3vdf3/H\n4mLGy14yg+cdYQcAQIQZp+2CqamHf/e7c8bL+v2dFyxwPvSQ49AhffdmaoY9gEfYAQAQeXl5\necbJuxbGy+7a1f+hhzpt2KDjruRgtLwj7AAAiBbjtN3542Vtp05d/tvfMl42IoyTd4QdAABR\nZJy2OzNeds0axstGiRHajrADACC6DNR2Qnjy8srWr68ZN+6c8bIPP9xlzhxLY6O+e0P72bW/\nyMrKyvnz5+/fv3/Tpk2hxfr6+uLi4q+//trn8+Xm5ubn53fu3LnZN06fPr28vDz0aUJCwtq1\na9v4vQAA6CgvL88Ih3NUisNxdNasquuvd86eHVdTI4QQipJRUpL0v/97+OWXmx7Pg+lofcRu\n69atTz31VHZ2drP1BQsWHD9+/Lnnnnv55ZeTkpKef/75YDDY7DT19fVTpkxZdtaSJUva/r0A\nAOjLUMfthBCum27as3at+7bbQisJe/Y4R45kvKypaR12Pp9v3rx5N954Y9PFqqqqL774YsqU\nKU6ns1u3bvn5+ZWVlbt37272vW63Oysrq9NZGRkZbf9eAAB0Z7S283focGjRosNz5waTktQV\nxsuandYvxd52221CiAMHDjRd3LdvX1xcnNPpVD9NSUnJzs7eu3fvNddcEzqNz+fzer3bt28v\nKSlxu919+vQZP3589+7dL/i933zzzdGjR9WPGxsbFUXxer0t7i0QCKj/be0EZhcIBHw+n8SH\nM8NcuWanXnGy/nTqbbKxsdFqlfBdv4qiyH3LFEL4/X5Zf8BgMBjxW2ZOTs73338fwTO8NIqi\nqP/1+/3Vd9/tvvbaHrNmJe3cqX41+dNPncOHVxYV1d16q67bvHTqc7rl7PsINRPt+4LP51PC\n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\n5/V6t2/fPmPGjEceeWTu3LmVlZXR2z8AAIBh6fAeu/PV1dWlpqZaLJbQSlpamsvlavHEwWBw\n1apVY8eOtdvtQoiGhob09HS/3//oo48KIVavXj1r1qzXX389OTlZPf0rr7zyP//zP+rHycnJ\nwWCwtra2xXNWFEUI4fF4vF5v5H44AwkGgz6fr+n/Z5koihIIBFq7cs1OvXE2NjbqvZGoCAaD\nQgiXyyXrjTPMw47ZqbfMhoYGj8ej916iIhgM1tXV6b2LKPL7/XLfOOW7Zfp8PvUxszXRDbtt\n27bNmzdP/Xju3Ll5eXmtnbLtD+iffvqpx+O59dZb1U/T0tJWrlwZ+urMmTMnTJjw2Wef3XHH\nHZe6awAAAFOKbtgNGDBg4cKF6sdZWVmtnSw9Pb2urk5RlFDeuVyuDh06tHjijz/+eNCgQTab\nrcWvJiYmZmZmVlVVhVYKCwsLCwvVj2tra6dNm9baOft8PpfLlZCQkJSUdKGfzJTcbndCQkJc\nXJzeG4mK6upqm82Wnp6u90aiwuv1+v3+0HFoybjdbq/Xm5aW1tr92tQURTl58mRrDztm5/V6\n3W53UlJSYmKi3nuJCpfLlZKSIusts7q62m63p6Wl6b2XqDh9+rQQQr5bps/nC/9LotF9j11S\nUlLPsxwOR2sn69u3r8/nO3DggPppXV3dwYMHWzy8d+rUqR07dtxwww2hlYqKikWLFvn9fvVT\nj8dz4sSJMBEJAAAgK63fY1dbWxsIBNxutxBCPa6WkpKSkZExcODAxYsXT58+PT4+funSpb17\n977yyiuFEFu2bPF4PPfcc4/67fv37w8EAl27dg2dYUZGxvbt2/1+/9ixYwOBwMqVK1NSUgYN\nGqTxzwUAAKA7rcPuiSeeOH78uPrxxIkThRCTJk0aOnTo9OnTi4uLi4qKAoFA//79f/3rX6sv\ny+7cubOuri4UdrW1tRaLpekfNElNTZ09e/by5ctnzJgRFxeXm5s7d+7cMEcHAQAAZKV12C1d\nurTF9aSkpBkzZpy//sQTTzT99JZbbrnllluanSYnJ2f27NkR2iAAAIBZMaQBAABAEoQdAACA\nJAg7AAAASRB2AAAAkiDsAAAAJEHYAQAASIKwAwAAkARhBwAAIAnCDgAAQBKEHQAAgCQIOwAA\nAEkQdgAAAJIg7AAAACRh13sDWqupqVmxYkWLXwoEAh6PJz4+Pi4uTuNdacPr9drtdpvNpvdG\noqKhocFisSQmJuq9kajw+/3BYDA+Pl7vjUSF1+v1+/2JiYlWq4T/1FQUxePxSHzL9Hq9Ej9s\nqk8Kst4yGxoabDZbQkKC3nuJCp/PJ4SQ75YZCATCn8CiKIo2WzGCxsbG999/v7WvVlVVff75\n53369MnNzdVyV5oJBAJWq9Visei9kajYvHlzYmLiP/3TP+m9kagIBoNCCCmfXYQQO3bsOHz4\n8K233pqUlKT3XqLC7/fb7XL+K7qysnLnzp15eXk5OTl67yUq/H6/zWaT8mEzEAhs3rw5IyNj\n4MCBeu8lKiR+2ExJSbnzzjtb+6qcjzWtiY+PHzFiRGtf/fvf/15cXHz99deHOQ0Ma/78+d27\nd+e6M6Ovvvpq165dzz//fPfu3fXeCy7ORx99tGLFittvv527nul4PJ6XXnrppz/9KdedZCQs\nWQAAgNhE2AEAAEiCsAMAAJBEbP3yBAAAgMQ4YgcAACAJwg4AAEAShB0AAIAkYuvv2DUzffr0\n8vLy0KcJCQlr165tdpr6+vri4uKvv/7a5/Pl5ubm5+d37txZ012iJTU1NcuWLdu1a1djY2NO\nTs7DDz/cr1+/Zqdpy/ULLbXl3sQ9zrC405kXT3YxJaZ/eWLixIkjRoy48cYb1U+tVmtGRkaz\n07zwwgv19fVTp051OByrVq0qLy9/9dVXpfxL1uZSWFgYHx8/ZcqUxMTEVatW7dixY+nSpc0G\n47Tl+oWW2nJv4h5nWNzpzIsnu5gS09eZ2+3OysrqdNb5N/SqqqovvvhiypQpTqezW7du+fn5\nlZWVu3fv1mW3CHG73ZmZmQUFBTk5OV27dh0/fnxdXd3BgwfPP1n46xdaasu9iXucYXGnMzWe\n7GJK7L4U6/P5vF7v9u3bS0pK3G53nz59xo8f32yi0b59++Li4pxOp/ppSkpKdnb23r17r7nm\nGj22jDNSU1NnzZoV+rS6utpqtXbq1Knpadpy/UJLbbk3cY8zLO505sWTXayJ3SN2DQ0N6enp\nfr//0Ucf/dWvftXY2Dhr1qxTp041PU1dXV1qamrT8c9paWkul0vzzaJVbrf797///bBhwzp0\n6NB0vS3XL7TUlnsT9zhT4E5nLjzZxZoYOmK3bdu2efPmqR/PnTs3Ly9v5cqVoa/OnDlzwoQJ\nn3322R133NH0u5re0KGX86879eNDhw7Nnj372muvnTBhQrNvSUtLa8v1Cy215d7EPc7guNOZ\nThuvF+560oihsBswYMDChQvVj7Oyspp9NTExMTMzs6qqqulienp6XV2doiihW7zL5Wr2j1Ro\noMXrbteuXb/73e/uv//+n//85xc8hxavX2ipLfcm7nEGx51OAjzZSS+GXopNSkrqeZbD4aio\nqFi0aJHf71e/6vF4Tpw40Sz4+vbt6/P5Dhw4oH6qvlk4dLgImml23Qkhvv3225deeqmwsLC1\nJ5i2XL/QUlvuTdzjjIw7nUnxZBdrbEVFRXrvQR82m23JkiWVlZW9evVyuVxvvPFGfX39v/3b\nv9nt9i1btnz77be5ubmJiYkVFRUff/xxbm5uQ0PDa6+9lpyc/OCDD3LIWl+NjY3PPvvsv/zL\nvwwYMKDhLKvV2vS6C3P96r39GBXm3sQ9zvi405kXT3axJqb/jl1paeny5cvV3wbKzc2dPHly\nly5dhBAvv/xyXV3d7NmzhRANDQ3FxcU7duwIBAL9+/fPz8/n6LTudu3a9cwzzzRbnDp16t13\n3930umvt+oVeWrs3cY8zPu50psaTXUyJ6bADAACQSQy9xw4AAEBuhB0AAIAkCDsAAABJEHYA\nAACSIOwAAAAkQdgBAABIgrADAACQBGEHAOEMHjz4iiuu0HsXANAmhB0AAIAkCDsAAABJEHYA\n0FZDhgy5+eabd+zYcfvtt1922WWdO3e+//77jx8/3pbvvf766wcOHPjXv/71hhtuSEpKysjI\nmDhxosvlivaeAcQUu94bAADTiI+P//7776dOnTpnzpyrr75669at9913n8Ph+MMf/nDB73U4\nHPv37//Vr361cOHCfv36bd68eeLEiSdPntywYUP0Nw4gVhB2AHARDh48uHr16ptuukkIMXLk\nyFtuuWXLli1t+Uar1XrixIn169cPGjRICDFu3LhPPvnkzTffPHjwYI8ePaK7aQAxg5diAeAi\nJCUlqVWnys7OPnr0aBu/Nzk5efDgwaFPhwwZIoT45ptvIrtDALGMsAOAi5CZmdn0U7vdHgwG\n2/i9Xbp0sVgsoU87duwohDh27FgEtwcgxhF2AKAPv98vhLBaeRwGEDE8oACARo4cORIIBEKf\nqsfqunTpot+OAMiGsAMAjZw+ffqjjz4KffqXv/zF4XDccMMNOm4JgGT4rVgA0EiPHj1mzJhR\nUVHRp0+fDz/8cNOmTePHj+/QoYPe+wIgD8IOADSSnJxcUlJSWFj45ZdfOhyOyZMnv/LKK3pv\nCoBULIqi6L0HAJDf4MGDq6qqvvvuO703AkBmvMcOAABAEoQdAACAJAg7AGivzZs3W8JasmSJ\n3nsEEBN4jx0AtFd9fX15eXmYE3Tv3p3ffgWgAcIOAABAErwUCwAAIAnCDgAAQBKEHQAAgCQI\nOwAAAEkQdgAAAJIg7AAAACTx/6OzExQog4ycAAAAAElFTkSuQmCC"
          },
          "metadata": {
            "image/png": {
              "width": 420,
              "height": 420
            }
          }
        }
      ],
      "id": "t7axTjsnq8qI"
    },
    {
      "cell_type": "code",
      "source": [
        "model <- lm(ln_q ~ ln_p, data = data)\n",
        "elasticity <- coef(model)[\"ln_p\"]\n",
        "se <- summary(model)$coefficients[\"ln_p\", \"Std. Error\"]\n",
        "r_squared_adj <- summary(model)$adj.r.squared\n",
        "cat(sprintf(\"Elasticity: %f, SE: %f, R2: %f\\n\\n\", elasticity, se, r_squared_adj))\n",
        "conf_intervals <- confint(model, c(\"(Intercept)\", \"ln_p\"), level = 0.95)\n",
        "print(conf_intervals)"
      ],
      "metadata": {
        "id": "aZPOUT5SvR4o",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c5186cae-c1da-4c35-91b0-08f0b9986919"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Elasticity: -0.062508, SE: 0.012995, R2: 0.002953\n",
            "\n",
            "                   2.5 %       97.5 %\n",
            "(Intercept) -10.24409466 -10.11228387\n",
            "ln_p         -0.08798159  -0.03703361\n"
          ]
        }
      ],
      "id": "aZPOUT5SvR4o"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cr2Ha215l4QK"
      },
      "source": [
        "Let's begin with a simple prediction task. We will discover how well can we explain the price of these products using their textual descriptions."
      ],
      "id": "cr2Ha215l4QK"
    },
    {
      "cell_type": "code",
      "source": [
        "install.packages(\"caTools\")\n",
        "install.packages(\"base\")\n",
        "library(caTools)"
      ],
      "metadata": {
        "id": "pGt-G-qpciGd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dfdf62d9-66b7-4787-b00c-b019f9064cf4"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "also installing the dependency ‘bitops’\n",
            "\n",
            "\n",
            "Installing package into ‘/usr/local/lib/R/site-library’\n",
            "(as ‘lib’ is unspecified)\n",
            "\n",
            "Warning message:\n",
            "“package ‘base’ is a base package, and should not be updated”\n"
          ]
        }
      ],
      "id": "pGt-G-qpciGd"
    },
    {
      "cell_type": "code",
      "source": [
        "library(caTools)\n",
        "set.seed(124)\n",
        "split <- sample.split(Y = data$ln_p, SplitRatio = 0.8)\n",
        "train_main <- data[split, ]\n",
        "holdout <- data[!split, ]\n",
        "split_main <- sample.split(Y = train_main$ln_p, SplitRatio = 0.75)\n",
        "train <- train_main[split_main, ]\n",
        "val <- train_main[!split_main, ]"
      ],
      "metadata": {
        "id": "EPX_-K9CPpuO"
      },
      "id": "EPX_-K9CPpuO",
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "library(reticulate)\n",
        "use_python(\"/usr/bin/python3\", required = TRUE)\n",
        "py_run_string('import tensorflow as tf')\n",
        "\n",
        "py$train_texts <- train$text\n",
        "train_tensors <- py_run_string(\"\n",
        "tensors = tokenizer(\n",
        "    list(train_texts),\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=128,\n",
        "    return_tensors='tf'\n",
        ")\")\n",
        "train_tensors <- py$tensors\n",
        "\n",
        "py$val_texts <- val$text\n",
        "val_tensors <- py_run_string(\"\n",
        "val_tensors = tokenizer(\n",
        "    list(val_texts),\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=128,\n",
        "    return_tensors='tf'\n",
        ")\")\n",
        "val_tensors <- py$val_tensors\n",
        "\n",
        "py$holdout_texts <- holdout$text\n",
        "tensors_holdout <- py_run_string(\"\n",
        "tensors_holdout = tokenizer(\n",
        "    list(holdout_texts),\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=128,\n",
        "    return_tensors='tf'\n",
        ")\")\n",
        "tensors_holdout <- py$tensors_holdout\n",
        "ln_p <- train$ln_p\n",
        "ln_q <- train$ln_q\n",
        "val_ln_p <- val$ln_p\n",
        "val_ln_q <- val$ln_q"
      ],
      "metadata": {
        "id": "IGFzO9sZPvAJ"
      },
      "id": "IGFzO9sZPvAJ",
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ln_p <- train$ln_p\n",
        "ln_q <- train$ln_q\n",
        "val_ln_p <- val$ln_p\n",
        "val_ln_q <- val$ln_q"
      ],
      "metadata": {
        "id": "XQ4DMJQ0drZm"
      },
      "execution_count": 64,
      "outputs": [],
      "id": "XQ4DMJQ0drZm"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Using BERT as Feature Extractor"
      ],
      "metadata": {
        "id": "gPYEMuKZ7ylj"
      },
      "id": "gPYEMuKZ7ylj"
    },
    {
      "cell_type": "code",
      "source": [
        "library(reticulate)\n",
        "#Sys.setenv(RETICULATE_PYTHON = \"/usr/bin/python\")\n",
        "library(keras)\n",
        "#install_keras()"
      ],
      "metadata": {
        "id": "ytZhy46hdDdr",
        "collapsed": true
      },
      "id": "ytZhy46hdDdr",
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "library(caTools)\n",
        "library(dplyr)\n",
        "library(readr)\n",
        "library(reticulate)\n",
        "library(keras)\n",
        "library(caret)\n",
        "library(glmnet)\n",
        "library(stringr)\n",
        "\n",
        "use_python(\"/usr/bin/python3\", required = TRUE)\n",
        "py_run_string('import tensorflow as tf')\n",
        "py_run_string('from transformers import BertTokenizer, TFBertModel')\n",
        "py_run_string('\n",
        "tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n",
        "bert_model = TFBertModel.from_pretrained(\"bert-base-uncased\")\n",
        "')\n",
        "\n",
        "py$train_texts <- train$text\n",
        "train_tensors <- py_run_string(\"\n",
        "tensors = tokenizer(\n",
        "    list(train_texts),\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=128,\n",
        "    return_tensors='tf'\n",
        ")\")\n",
        "train_tensors <- py$tensors\n",
        "\n",
        "py$val_texts <- val$text\n",
        "val_tensors <- py_run_string(\"\n",
        "val_tensors = tokenizer(\n",
        "    list(val_texts),\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=128,\n",
        "    return_tensors='tf'\n",
        ")\")\n",
        "val_tensors <- py$val_tensors\n",
        "\n",
        "py$holdout_texts <- holdout$text\n",
        "tensors_holdout <- py_run_string(\"\n",
        "tensors_holdout = tokenizer(\n",
        "    list(holdout_texts),\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=128,\n",
        "    return_tensors='tf'\n",
        ")\")\n",
        "tensors_holdout <- py$tensors_holdout\n",
        "\n",
        "ln_p <- train$ln_p\n",
        "val_ln_p <- val$ln_p\n",
        "holdout_ln_p <- holdout$ln_p\n",
        "\n",
        "py_run_string('\n",
        "import tensorflow as tf\n",
        "from transformers import TFBertModel\n",
        "\n",
        "# Define the input layers\n",
        "input_ids = tf.keras.layers.Input(shape=(128,), dtype=tf.int32, name=\"input_ids\")\n",
        "token_type_ids = tf.keras.layers.Input(shape=(128,), dtype=tf.int32, name=\"token_type_ids\")\n",
        "attention_mask = tf.keras.layers.Input(shape=(128,), dtype=tf.int32, name=\"attention_mask\")\n",
        "\n",
        "# Load the pre-trained BERT model\n",
        "bert_model = TFBertModel.from_pretrained(\"bert-base-uncased\")\n",
        "outputs = bert_model(input_ids=input_ids, token_type_ids=token_type_ids, attention_mask=attention_mask)\n",
        "\n",
        "# Define the embedding model\n",
        "embedding_model = tf.keras.models.Model(inputs=[input_ids, token_type_ids, attention_mask], outputs=outputs.last_hidden_state[:, 0, :])\n",
        "')\n",
        "\n",
        "py_run_string('\n",
        "import numpy as np\n",
        "embeddings = embedding_model.predict({\n",
        "    \"input_ids\": tf.convert_to_tensor(tensors[\"input_ids\"]),\n",
        "    \"token_type_ids\": tf.convert_to_tensor(tensors[\"token_type_ids\"]),\n",
        "    \"attention_mask\": tf.convert_to_tensor(tensors[\"attention_mask\"])\n",
        "})\n",
        "')\n",
        "\n",
        "embeddings <- py$embeddings\n",
        "\n",
        "py$ln_p <- ln_p\n",
        "py_run_string('\n",
        "from sklearn.linear_model import LassoCV\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "lcv = make_pipeline(StandardScaler(), LassoCV(cv=KFold(n_splits=5, shuffle=True, random_state=123), random_state=123))\n",
        "lcv.fit(embeddings, ln_p)\n",
        "')\n",
        "\n",
        "py_run_string('\n",
        "embeddings_val = embedding_model.predict({\n",
        "    \"input_ids\": tf.convert_to_tensor(val_tensors[\"input_ids\"]),\n",
        "    \"token_type_ids\": tf.convert_to_tensor(val_tensors[\"token_type_ids\"]),\n",
        "    \"attention_mask\": tf.convert_to_tensor(val_tensors[\"attention_mask\"])\n",
        "})\n",
        "val_predictions = lcv.predict(embeddings_val)\n",
        "')\n",
        "\n",
        "val_predictions <- py$val_predictions\n",
        "\n",
        "r2_val <- caret::R2(val_predictions, val_ln_p)\n",
        "\n",
        "py_run_string('\n",
        "embeddings_holdout = embedding_model.predict({\n",
        "    \"input_ids\": tf.convert_to_tensor(tensors_holdout[\"input_ids\"]),\n",
        "    \"token_type_ids\": tf.convert_to_tensor(tensors_holdout[\"token_type_ids\"]),\n",
        "    \"attention_mask\": tf.convert_to_tensor(tensors_holdout[\"attention_mask\"])\n",
        "})\n",
        "holdout_predictions = lcv.predict(embeddings_holdout)\n",
        "')\n",
        "\n",
        "holdout_predictions <- py$holdout_predictions\n",
        "\n",
        "r2_holdout <- caret::R2(holdout_predictions, holdout_ln_p)\n",
        "\n",
        "print(r2_val)\n",
        "print(r2_holdout)\n",
        "ln_p_hat_holdout <- holdout_predictions"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "TsqfQ3OH-HR3",
        "outputId": "a4107a7d-ce9e-4d09-a63e-1bab3174bf76"
      },
      "id": "TsqfQ3OH-HR3",
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ERROR",
          "evalue": "Exception encountered when calling layer 'embeddings' (type TFBertEmbeddings).\n\nCould not build a TypeSpec for name: \"tf.debugging.assert_less_4/assert_less/Assert/Assert\"\nop: \"Assert\"\ninput: \"tf.debugging.assert_less_4/assert_less/All\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_0\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_1\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_2\"\ninput: \"Placeholder\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_4\"\ninput: \"tf.debugging.assert_less_4/assert_less/y\"\nattr {\n  key: \"T\"\n  value {\n    list {\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_INT32\n      type: DT_STRING\n      type: DT_INT32\n    }\n  }\n}\nattr {\n  key: \"summarize\"\n  value {\n    i: 3\n  }\n}\n of unsupported type <class 'tensorflow.python.framework.ops.Operation'>.\n\nCall arguments received by layer 'embeddings' (type TFBertEmbeddings):\n  • input_ids=<KerasTensor: shape=(None, 128) dtype=int32 (created by layer 'input_ids')>\n  • position_ids=None\n  • token_type_ids=<KerasTensor: shape=(None, 128) dtype=int32 (created by layer 'token_type_ids')>\n  • inputs_embeds=None\n  • past_key_values_length=0\n  • training=False",
          "traceback": [
            "Exception encountered when calling layer 'embeddings' (type TFBertEmbeddings).\n\nCould not build a TypeSpec for name: \"tf.debugging.assert_less_4/assert_less/Assert/Assert\"\nop: \"Assert\"\ninput: \"tf.debugging.assert_less_4/assert_less/All\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_0\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_1\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_2\"\ninput: \"Placeholder\"\ninput: \"tf.debugging.assert_less_4/assert_less/Assert/Assert/data_4\"\ninput: \"tf.debugging.assert_less_4/assert_less/y\"\nattr {\n  key: \"T\"\n  value {\n    list {\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_STRING\n      type: DT_INT32\n      type: DT_STRING\n      type: DT_INT32\n    }\n  }\n}\nattr {\n  key: \"summarize\"\n  value {\n    i: 3\n  }\n}\n of unsupported type <class 'tensorflow.python.framework.ops.Operation'>.\n\nCall arguments received by layer 'embeddings' (type TFBertEmbeddings):\n  • input_ids=<KerasTensor: shape=(None, 128) dtype=int32 (created by layer 'input_ids')>\n  • position_ids=None\n  • token_type_ids=<KerasTensor: shape=(None, 128) dtype=int32 (created by layer 'token_type_ids')>\n  • inputs_embeds=None\n  • past_key_values_length=0\n  • training=FalseTraceback:\n",
            "1. py_run_string(\"\\nimport tensorflow as tf\\nfrom transformers import TFBertModel\\n\\n# Define the input layers\\ninput_ids = tf.keras.layers.Input(shape=(128,), dtype=tf.int32, name=\\\"input_ids\\\")\\ntoken_type_ids = tf.keras.layers.Input(shape=(128,), dtype=tf.int32, name=\\\"token_type_ids\\\")\\nattention_mask = tf.keras.layers.Input(shape=(128,), dtype=tf.int32, name=\\\"attention_mask\\\")\\n\\n# Load the pre-trained BERT model\\nbert_model = TFBertModel.from_pretrained(\\\"bert-base-uncased\\\")\\noutputs = bert_model(input_ids=input_ids, token_type_ids=token_type_ids, attention_mask=attention_mask)\\n\\n# Define the embedding model\\nembedding_model = tf.keras.models.Model(inputs=[input_ids, token_type_ids, attention_mask], outputs=outputs.last_hidden_state[:, 0, :])\\n\")",
            "2. py_run_string_impl(code, local, convert)"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Linear Probing: Training Only Final Layer after BERT"
      ],
      "metadata": {
        "id": "mOc1_C5p7ta7"
      },
      "id": "mOc1_C5p7ta7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ck1xqRIrmx8I"
      },
      "outputs": [],
      "source": [
        "### Now let's prepare our model\n",
        "\n",
        "from tensorflow.keras import Model, Input\n",
        "from tensorflow.keras.layers import Dense, Dropout, Concatenate\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import regularizers\n",
        "\n",
        "tf.keras.utils.set_random_seed(123)\n",
        "\n",
        "input_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "token_type_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "attention_mask = Input(shape=(128,), dtype=tf.int32)\n",
        "\n",
        "# # First we compute the text embedding\n",
        "Z = bert(input_ids, token_type_ids, attention_mask)\n",
        "\n",
        "for layer in bert.layers:\n",
        "    layer.trainable=False\n",
        "    for w in layer.weights: w._trainable=False\n",
        "\n",
        "# # We want the \"pooled / summary\" embedding, not individual word embeddings\n",
        "Z = Z[1]\n",
        "\n",
        "# # Then we do a regular regression\n",
        "# Z = Dropout(0.2)(Z)\n",
        "ln_p_hat = Dense(1, activation='linear',\n",
        "                 kernel_regularizer=regularizers.L2(1e-3))(Z)\n",
        "\n",
        "PricePredictionNetwork = Model([\n",
        "                                input_ids,\n",
        "                                token_type_ids,\n",
        "                                attention_mask,\n",
        "                                ], ln_p_hat)\n",
        "PricePredictionNetwork.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),\n",
        "    loss=tf.keras.losses.MeanSquaredError(),\n",
        "    metrics=tfa.metrics.RSquare(),\n",
        ")\n",
        "PricePredictionNetwork.summary()"
      ],
      "id": "Ck1xqRIrmx8I"
    },
    {
      "cell_type": "code",
      "source": [
        "from livelossplot import PlotLossesKeras\n",
        "\n",
        "tf.keras.utils.set_random_seed(123)\n",
        "earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "modelcheckpoint = tf.keras.callbacks.ModelCheckpoint(\"/content/gdrive/MyDrive/pweights.hdf5\", monitor='val_loss', save_best_only=True, save_weights_only=True)\n",
        "\n",
        "PricePredictionNetwork.fit(\n",
        "                x= [tensors['input_ids'],\n",
        "                    tensors['token_type_ids'],\n",
        "                    tensors['attention_mask'],],\n",
        "                y=ln_p,\n",
        "                validation_data = (\n",
        "                    [val_tensors['input_ids'],\n",
        "                     val_tensors['token_type_ids'],\n",
        "                     val_tensors['attention_mask']], val_ln_p\n",
        "                ),\n",
        "                epochs=5,\n",
        "                callbacks = [earlystopping, modelcheckpoint,\n",
        "                             PlotLossesKeras(groups = {'train_loss': ['loss'], 'train_rsq':['r_square'], 'val_loss': ['val_loss'], 'val_rsq': ['val_r_square']})],\n",
        "                batch_size=16,\n",
        "                shuffle=True)"
      ],
      "metadata": {
        "id": "XhTREb3NcZhH"
      },
      "execution_count": null,
      "outputs": [],
      "id": "XhTREb3NcZhH"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Fine Tuning starting from the Linear Probing Trained Weights\n",
        "\n",
        "Now we train the whole network, initializing the weights based on the result of the linear probing phase in the previous section."
      ],
      "metadata": {
        "id": "MyFxR5GC8C3K"
      },
      "id": "MyFxR5GC8C3K"
    },
    {
      "cell_type": "code",
      "source": [
        "### Now let's prepare our model\n",
        "\n",
        "from tensorflow.keras import Model, Input\n",
        "from tensorflow.keras.layers import Dense, Dropout, Concatenate\n",
        "import tensorflow_addons as tfa\n",
        "from tensorflow.keras import regularizers\n",
        "\n",
        "tf.keras.utils.set_random_seed(123)\n",
        "\n",
        "input_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "token_type_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "attention_mask = Input(shape=(128,), dtype=tf.int32)\n",
        "\n",
        "# # First we compute the text embedding\n",
        "Z = bert(input_ids, token_type_ids, attention_mask)\n",
        "\n",
        "for layer in bert.layers:\n",
        "    layer.trainable=True\n",
        "    for w in layer.weights: w._trainable=True\n",
        "\n",
        "# # We want the \"pooled / summary\" embedding, not individual word embeddings\n",
        "Z = Z[1]\n",
        "\n",
        "# # Then we do a regularized linear regression\n",
        "ln_p_hat = Dense(1, activation='linear',\n",
        "                 kernel_regularizer=regularizers.L2(1e-3))(Z)\n",
        "\n",
        "PricePredictionNetwork = Model([\n",
        "                                input_ids,\n",
        "                                token_type_ids,\n",
        "                                attention_mask,\n",
        "                                ], ln_p_hat)\n",
        "PricePredictionNetwork.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n",
        "    loss=tf.keras.losses.MeanSquaredError(),\n",
        "    metrics=tfa.metrics.RSquare(),\n",
        ")\n",
        "PricePredictionNetwork.summary()"
      ],
      "metadata": {
        "id": "NzWCkTY87luH"
      },
      "execution_count": null,
      "outputs": [],
      "id": "NzWCkTY87luH"
    },
    {
      "cell_type": "code",
      "source": [
        "PricePredictionNetwork.load_weights(\"/content/gdrive/MyDrive/pweights.hdf5\")"
      ],
      "metadata": {
        "id": "PWauCl0T7nUo"
      },
      "execution_count": null,
      "outputs": [],
      "id": "PWauCl0T7nUo"
    },
    {
      "cell_type": "code",
      "source": [
        "from livelossplot import PlotLossesKeras\n",
        "\n",
        "tf.keras.utils.set_random_seed(123)\n",
        "\n",
        "earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "modelcheckpoint = tf.keras.callbacks.ModelCheckpoint(\"/content/gdrive/MyDrive/pweights.hdf5\", monitor='val_loss', save_best_only=True, save_weights_only=True)\n",
        "\n",
        "PricePredictionNetwork.fit(\n",
        "                x= [tensors['input_ids'],\n",
        "                    tensors['token_type_ids'],\n",
        "                    tensors['attention_mask'],],\n",
        "                y=ln_p,\n",
        "                validation_data = (\n",
        "                    [val_tensors['input_ids'],\n",
        "                     val_tensors['token_type_ids'],\n",
        "                     val_tensors['attention_mask']], val_ln_p\n",
        "                ),\n",
        "                epochs=10,\n",
        "                callbacks = [earlystopping, modelcheckpoint,\n",
        "                             PlotLossesKeras(groups = {'train_loss': ['loss'], 'train_rsq':['r_square'], 'val_loss': ['val_loss'], 'val_rsq': ['val_r_square']})],\n",
        "                batch_size=16,\n",
        "                shuffle=True)"
      ],
      "metadata": {
        "id": "iDSBZWAe8nhE"
      },
      "execution_count": null,
      "outputs": [],
      "id": "iDSBZWAe8nhE"
    },
    {
      "cell_type": "code",
      "source": [
        "PricePredictionNetwork.load_weights(\"/content/gdrive/MyDrive/pweights.hdf5\")"
      ],
      "metadata": {
        "id": "wchpbXoqBAJu"
      },
      "execution_count": null,
      "outputs": [],
      "id": "wchpbXoqBAJu"
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute predictions\n",
        "ln_p_hat_holdout = PricePredictionNetwork.predict([\n",
        "                                                   tensors_holdout['input_ids'],\n",
        "                                                   tensors_holdout['token_type_ids'],\n",
        "                                                   tensors_holdout['attention_mask'],\n",
        "                                                   ])"
      ],
      "metadata": {
        "id": "jpUmDHYfkJEZ"
      },
      "execution_count": null,
      "outputs": [],
      "id": "jpUmDHYfkJEZ"
    },
    {
      "cell_type": "code",
      "source": [
        "print('Neural Net R^2, Price Prediction:')\n",
        "get_r2(holdout['ln_p'], ln_p_hat_holdout)"
      ],
      "metadata": {
        "id": "g_XK81hpkQMN"
      },
      "execution_count": null,
      "outputs": [],
      "id": "g_XK81hpkQMN"
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.hist(ln_p_hat_holdout)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "GR4QP4DJPQk0"
      },
      "execution_count": null,
      "outputs": [],
      "id": "GR4QP4DJPQk0"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RAGwE4peL1Me"
      },
      "id": "RAGwE4peL1Me",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bafy9ftcoBed"
      },
      "source": [
        "Now, let's go one step further and construct a DML estimator of the average price elasticity. In particular, we will model market share $q_i$ as\n",
        "$$\\ln q_i = \\alpha + \\beta \\ln p_i + \\psi(d_i) + \\epsilon_i,$$ where $d_i$ denotes the description of product $i$ and $\\psi$ is the composition of text embedding and a linear layer."
      ],
      "id": "bafy9ftcoBed"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qiteu6FaoctV"
      },
      "outputs": [],
      "source": [
        "## Build the quantity prediction network\n",
        "\n",
        "tf.keras.utils.set_random_seed(123)\n",
        "\n",
        "# Initialize new BERT model from original\n",
        "bert2 = TFBertModel.from_pretrained(\"bert-base-uncased\")\n",
        "\n",
        "# for layer in bert2.layers:\n",
        "#     layer.trainable=False\n",
        "#     for w in layer.weights: w._trainable=False\n",
        "\n",
        "# Define inputs\n",
        "input_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "token_type_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "attention_mask = Input(shape=(128,), dtype=tf.int32)\n",
        "\n",
        "# First we compute the text embedding\n",
        "Z = bert2(input_ids, token_type_ids, attention_mask)\n",
        "\n",
        "# We want the \"pooled / summary\" embedding, not individual word embeddings\n",
        "Z = Z[1]\n",
        "\n",
        "ln_q_hat = Dense(1, activation='linear', kernel_regularizer=regularizers.L2(1e-3))(Z)\n",
        "\n",
        "# Compile model and optimization routine\n",
        "QuantityPredictionNetwork = Model([\n",
        "                                   input_ids,\n",
        "                                   token_type_ids,\n",
        "                                   attention_mask,\n",
        "                                   ], ln_q_hat)\n",
        "QuantityPredictionNetwork.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-5),\n",
        "    loss=tf.keras.losses.MeanSquaredError(),\n",
        "    metrics=tfa.metrics.RSquare(),\n",
        ")\n",
        "QuantityPredictionNetwork.summary()"
      ],
      "id": "Qiteu6FaoctV"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aaxHV0gGMqpw"
      },
      "outputs": [],
      "source": [
        "## Fit the quantity prediction network in the main sample\n",
        "tf.keras.utils.set_random_seed(123)\n",
        "\n",
        "earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "modelcheckpoint = tf.keras.callbacks.ModelCheckpoint(\"/content/gdrive/MyDrive/qweights.hdf5\", monitor='val_loss', save_best_only=True, save_weights_only=True)\n",
        "\n",
        "QuantityPredictionNetwork.fit(\n",
        "                [\n",
        "                 tensors['input_ids'],\n",
        "                 tensors['token_type_ids'],\n",
        "                 tensors['attention_mask'],\n",
        "                 ],\n",
        "                ln_q,\n",
        "                validation_data = (\n",
        "                    [val_tensors['input_ids'],\n",
        "                 val_tensors['token_type_ids'],\n",
        "                 val_tensors['attention_mask']], val_ln_q\n",
        "                ),\n",
        "                epochs=10,\n",
        "                callbacks = [earlystopping, modelcheckpoint,\n",
        "                             PlotLossesKeras(groups = {'train_loss': ['loss'], 'train_rsq':['r_square'], 'val_loss': ['val_loss'], 'val_rsq': ['val_r_square']})],\n",
        "                batch_size=16,\n",
        "                shuffle=True)"
      ],
      "id": "aaxHV0gGMqpw"
    },
    {
      "cell_type": "code",
      "source": [
        "QuantityPredictionNetwork.load_weights(\"/content/gdrive/MyDrive/qweights.hdf5\")"
      ],
      "metadata": {
        "id": "TfyQV3lw-xf2"
      },
      "execution_count": null,
      "outputs": [],
      "id": "TfyQV3lw-xf2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YADpNj0jMygZ"
      },
      "outputs": [],
      "source": [
        "## Predict in the holdout sample, residualize and regress\n",
        "\n",
        "ln_q_hat_holdout = QuantityPredictionNetwork.predict([\n",
        "                                                      tensors_holdout['input_ids'],\n",
        "                                                      tensors_holdout['token_type_ids'],\n",
        "                                                      tensors_holdout['attention_mask'],\n",
        "                                                      ])"
      ],
      "id": "YADpNj0jMygZ"
    },
    {
      "cell_type": "code",
      "source": [
        "print('Neural Net R^2, Quantity Prediction:')\n",
        "get_r2(holdout['ln_q'], ln_q_hat_holdout)"
      ],
      "metadata": {
        "id": "jh4criU1hGIP"
      },
      "execution_count": null,
      "outputs": [],
      "id": "jh4criU1hGIP"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ir-_yAfkPM6f"
      },
      "outputs": [],
      "source": [
        "# Compute residuals\n",
        "r_p = holdout[\"ln_p\"] - ln_p_hat_holdout.reshape((-1,))\n",
        "r_q = holdout[\"ln_q\"] - ln_q_hat_holdout.reshape((-1,))\n",
        "\n",
        "# Regress to obtain elasticity estimate\n",
        "beta = np.mean(r_p * r_q) / np.mean(r_p * r_p)\n",
        "\n",
        "# standard error on elastiticy estimate\n",
        "se = np.sqrt(np.mean( (r_p* r_q)**2)/(np.mean(r_p*r_p)**2)/holdout[\"ln_p\"].size)\n",
        "\n",
        "print('Elasticity of Demand with Respect to Price: {}'.format(beta))\n",
        "print('Standard Error: {}'.format(se))"
      ],
      "id": "ir-_yAfkPM6f"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Heterogeneous Elasticities within Major Product Categories\n",
        "\n",
        "We now look at the major product categories that have many products and we investigate whether the \"within group\" price elasticities"
      ],
      "metadata": {
        "id": "VCqeRTB_BNEH"
      },
      "id": "VCqeRTB_BNEH"
    },
    {
      "cell_type": "code",
      "source": [
        "holdout['category'] = holdout['amazon_category_and_sub_category'].str.split('>').apply(lambda x: x[0])"
      ],
      "metadata": {
        "id": "XRUZEXqc8HPG"
      },
      "execution_count": null,
      "outputs": [],
      "id": "XRUZEXqc8HPG"
    },
    {
      "cell_type": "code",
      "source": [
        "# Elasticity within the main product categories\n",
        "sql.run(\"\"\"\n",
        "  SELECT category, COUNT(*)\n",
        "  FROM holdout\n",
        "  GROUP BY 1\n",
        "  HAVING COUNT(*)>=100\n",
        "  ORDER BY 2 desc\n",
        "\"\"\")"
      ],
      "metadata": {
        "id": "ymWJv4Ej7lt9"
      },
      "execution_count": null,
      "outputs": [],
      "id": "ymWJv4Ej7lt9"
    },
    {
      "cell_type": "code",
      "source": [
        "main_cats = sql.run(\"\"\"\n",
        "  SELECT category\n",
        "  FROM holdout\n",
        "  GROUP BY 1\n",
        "  HAVING COUNT(*)>=100\n",
        "\"\"\")['category']\n",
        "\n",
        "dfs = []\n",
        "for cat in main_cats:\n",
        "    r_p = holdout[holdout['category'] == cat][\"ln_p\"] - ln_p_hat_holdout.reshape((-1,))[holdout['category'] == cat]\n",
        "    r_q = holdout[holdout['category'] == cat][\"ln_q\"] - ln_q_hat_holdout.reshape((-1,))[holdout['category'] == cat]\n",
        "    # Regress to obtain elasticity estimate\n",
        "    beta = np.mean(r_p * r_q) / np.mean(r_p * r_p)\n",
        "\n",
        "    # standard error on elastiticy estimate\n",
        "    se = np.sqrt(np.mean( (r_p* r_q)**2)/(np.mean(r_p*r_p)**2)/holdout[\"ln_p\"].size)\n",
        "\n",
        "    df = pd.DataFrame({'point': beta, 'se': se, 'lower': beta - 1.96 * se, 'upper': beta + 1.96 * se}, index=[0])\n",
        "    df['category'] = cat\n",
        "    df['N'] = holdout[holdout['category'] == cat].shape[0]\n",
        "    dfs.append(df)\n",
        "\n",
        "df = pd.concat(dfs)\n",
        "df"
      ],
      "metadata": {
        "id": "E3ncPtwt8nJi"
      },
      "execution_count": null,
      "outputs": [],
      "id": "E3ncPtwt8nJi"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Clustering Products\n",
        "\n",
        "In this final part of the notebook, we'll illustrate how the BERT text embeddings can be used to cluster products based on their  descriptions.\n",
        "\n",
        "Intiuitively, our neural network has now learned which aspects of the text description are relevant to predict prices and market shares.\n",
        "We can therefore use the embeddings produced by our network to cluster products, and we might expect that the clusters reflect market-relevant information.\n",
        "\n",
        "In the following block of cells, we compute embeddings using our learned models and cluster them using $k$-means clustering with $k=10$. Finally, we will explore how the estimated price elasticity differs across clusters.\n",
        "\n",
        "### Overview of **$k$-means clustering**\n",
        "The $k$-means clustering algorithm seeks to divide $n$ data vectors into $k$ groups, each of which contain points that are \"close together.\"\n",
        "\n",
        "In particular, let $C_1, \\ldots, C_k$ be a partitioning of the data into $k$ disjoint, nonempty subsets (clusters), and define\n",
        "$$\\bar{C_i}=\\frac{1}{\\#C_i}\\sum_{x \\in C_i} x$$\n",
        "to be the *centroid* of the cluster $C_i$. The $k$-means clustering score $\\mathrm{sc}(C_1 \\ldots C_k)$ is defined to be\n",
        "$$\\mathrm{sc}(C_1 \\ldots C_k) = \\sum_{i=1}^k \\sum_{x \\in C_i} \\left(x - \\bar{C_i}\\right)^2.$$\n",
        "\n",
        "The $k$-means clustering is then defined to be any partitioning $C^*_1 \\ldots C^*_k$ that minimizes the score $\\mathrm{sc}(-)$.\n"
      ],
      "metadata": {
        "id": "QFTjf9vP6Zfu"
      },
      "id": "QFTjf9vP6Zfu"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mc7I00JPK6wJ"
      },
      "outputs": [],
      "source": [
        "## STEP 1: Compute embeddings\n",
        "\n",
        "input_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "token_type_ids = Input(shape=(128,), dtype=tf.int32)\n",
        "attention_mask = Input(shape=(128,), dtype=tf.int32)\n",
        "\n",
        "Y1 = bert(input_ids, token_type_ids, attention_mask)[1]\n",
        "Y2 = bert2(input_ids, token_type_ids, attention_mask)[1]\n",
        "Y = Concatenate()([Y1,Y2])\n",
        "\n",
        "embedding_model = Model([input_ids, token_type_ids, attention_mask], Y)\n",
        "\n",
        "embeddings = embedding_model.predict([tensors_holdout['input_ids'],\n",
        "                                      tensors_holdout['token_type_ids'],\n",
        "                                      tensors_holdout['attention_mask']])"
      ],
      "id": "Mc7I00JPK6wJ"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Dimension reduction and the **Johnson-Lindenstrauss transform**\n",
        "\n",
        "Our learned embeddings have dimension in the $1000$s, and $k$-means clustering is often an expensive operation. To improve the situation, we will use a neat trick that is used extensively in machine learning applications: the *Johnson-Lindenstrauss transform*.\n",
        "\n",
        "This trick involves finding a low-dimensional linear projection of the embeddings that approximately preserves pairwise distances.\n",
        "\n",
        "In fact, Johnson and Lindenstrauss proved a much more interesting statement: a Gaussian random matrix will *almost always* approximately preserve pairwise distances.\n",
        "\n"
      ],
      "metadata": {
        "id": "hCG2MunU6iF-"
      },
      "id": "hCG2MunU6iF-"
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 2 Make low-dimensional projections\n",
        "from sklearn.random_projection import GaussianRandomProjection\n",
        "\n",
        "jl = GaussianRandomProjection(eps=.25)\n",
        "embeddings_lowdim = jl.fit_transform(embeddings)"
      ],
      "metadata": {
        "id": "afGiLR7v6ecJ"
      },
      "execution_count": null,
      "outputs": [],
      "id": "afGiLR7v6ecJ"
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 3 Compute clusters\n",
        "from sklearn.cluster import KMeans\n",
        "\n",
        "k_means = KMeans(n_clusters=10)\n",
        "k_means.fit(embeddings_lowdim)\n",
        "cluster_ids = k_means.labels_"
      ],
      "metadata": {
        "id": "9Tl9AM3J6j3X"
      },
      "execution_count": null,
      "outputs": [],
      "id": "9Tl9AM3J6j3X"
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 4 Regress within each cluster\n",
        "\n",
        "betas = np.zeros(10)\n",
        "ses = np.zeros(10)\n",
        "\n",
        "r_p = holdout[\"ln_p\"] - ln_p_hat_holdout.reshape((-1,))\n",
        "r_q = holdout[\"ln_q\"] - ln_q_hat_holdout.reshape((-1,))\n",
        "\n",
        "for c in range(10):\n",
        "\n",
        "  r_p_c = r_p[cluster_ids == c]\n",
        "  r_q_c = r_q[cluster_ids == c]\n",
        "\n",
        "  # Regress to obtain elasticity estimate\n",
        "  betas[c] = np.mean(r_p_c * r_q_c) / np.mean(r_p_c * r_p_c)\n",
        "\n",
        "  # standard error on elastiticy estimate\n",
        "  ses[c] = np.sqrt(np.mean( (r_p_c * r_q_c)**2)/(np.mean(r_p_c*r_p_c)**2)/r_p_c.size)"
      ],
      "metadata": {
        "id": "0l7De-Do6mD0"
      },
      "execution_count": null,
      "outputs": [],
      "id": "0l7De-Do6mD0"
    },
    {
      "cell_type": "code",
      "source": [
        "# STEP 5 Plot\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "plt.bar(range(10), betas, yerr = 1.96 * ses)"
      ],
      "metadata": {
        "id": "oXoe98f06njT"
      },
      "execution_count": null,
      "outputs": [],
      "id": "oXoe98f06njT"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "4.0.5"
    },
    "papermill": {
      "default_parameters": {},
      "duration": 427.936706,
      "end_time": "2022-04-19T09:13:53.230849",
      "environment_variables": {},
      "exception": null,
      "input_path": "__notebook__.ipynb",
      "output_path": "__notebook__.ipynb",
      "parameters": {},
      "start_time": "2022-04-19T09:06:45.294143",
      "version": "2.3.4"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}