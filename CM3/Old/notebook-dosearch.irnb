{"cells":[{"metadata":{},"cell_type":"markdown","source":"# Dosearch for Causal Identification in DAGs.\n\n\nThis a simple notebook for teaching that illustrates capabilites of the \"dosearch\" package, which is a great tool. \n\nNB. In my experience, the commands are sensitive to syntax ( e.g. spacing when -> are used), so be careful when changing to other examples."},{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"install.packages(\"dosearch\")\nlibrary(\"dosearch\") \n\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"We start with the simplest graph, with the simplest example\nwhere $D$ is policy, $Y$ is outcomes, $X$ is a confounder:\n$$\nD\\to Y, \\quad X \\to (D,Y)\n$$\n"},{"metadata":{},"cell_type":"markdown","source":"Now suppose we want conditional average policy effect."},{"metadata":{"trusted":true},"cell_type":"code","source":"data <- \"p(y,d,x)\"  #data structure\n\nquery <- \"p(y | do(d),x)\" #query -- target parameter\n\ngraph <- \"x -> y\n  x -> d \n  d -> y\"\n\ndosearch(data, query, graph)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"This recovers the correct identification formula for law of the counterfactual $Y(d)$ induced by $do(D=d)$:\n$$\np_{Y(d)|X}(y|x) := p(y|do(d),x) = p(y|d,x).\n$$"},{"metadata":{"trusted":true},"cell_type":"code","source":"data <- \"p(y,d,x)\"\n\nquery <- \"p(y | do(d))\"\n\ngraph <- \"x -> y\n  x -> d \n  d -> y\"\n\n\ndosearch(data, query, graph)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"This recovers the correct identification formula:\n$$\np_{Y(d)}(y) := p(y: do(d)) = \\sum_{x}\\left(p(x)p(y|d,x)\\right) \n$$\nWe integreate out $x$ in the previous formula.\n"},{"metadata":{},"cell_type":"markdown","source":"Suppose we don't observe the confounder. The effect is generally not identified.\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"\ndata <- \"p(y,d)\"\n\nquery <- \"p(y | do(d))\"\n\ngraph <- \"x -> y\n  x -> d \n  d -> y\"\n\ndosearch(data, query, graph)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"The next graph is an example of J. Pearl (different notation), where the graph is considerably more complicated. We are interested in $D \\to Y$.\n\n![image.png](attachment:image.png)\n\nHere we try conditioning on $X_2$. This would block one backdoor path from $D$ to $Y$, but would open another path on which $X_2$ is a collider, so this shouldn't work. The application below gave a correct answer (after I put the spacings carefully).\n","attachments":{"image.png":{"image/png":""}}},{"metadata":{"trusted":true},"cell_type":"code","source":"\ndata <- \"p(y,d,x2)\"   #observed only (Y, D, X_2)\n\nquery<- \"p(y|do(d))\"   #target parameter\n\ngraph<- \"z1 -> x1\nz1 -> x2\nz2 -> x2\nz2 -> x3\nx2 -> d\nx2 -> y\nx3 -> y\nx1 -> d\nd -> m\nm -> y\n\"\n\ndosearch(data, query, graph)\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Intuitively, we should add more common causes. For example, adding $X_3$ and using $S = (X_2, X_3)$ should work."},{"metadata":{"trusted":true},"cell_type":"code","source":"\ndata <- \"p(y,d,x2,x3)\"\n\nconditional.query<- \"p(y|do(d),x2, x3)\"  #can ID conditional average effect?\nquery<- \"p(y|do(d))\"  #can ID unconditional effect?\n\ngraph<- \"z1 -> x1\nz1 -> x2\nz2 -> x2\nz2 -> x3\nx2 -> d\nx2 -> y\nx3 -> y\nx1 -> d\nd -> m\nm -> y\n\"\n\nprint(dosearch(data, conditional.query, graph))\nprint(dosearch(data, query, graph))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"This retrives correct formulas for counterfactual distributions of $Y(d)$ induced by $Do(D=d)$:\n\nThe conditional distribution is identified by:\n$$\np_{Y(d) \\mid X_2, X_3}(y) := p(y |x_2, x_3: do(d)) = p(y|x_2,x_3,d).\n$$\n\nThe unconditional distribution is obtained by integration out $x_2$ and $x_3$:\n\n$$\np_{Y(d) }(y) :=  p(y do(d)) = \\sum_{x2,x3}\\left(p(x_2,x_3)p(y|x_2,x_3,d)\\right).\n$$\n\n\n"},{"metadata":{},"cell_type":"markdown","source":"Next we suppose that we observe only $(Y,D, M)$. Can we identify the effect $D \\to Y$?  Can we use back-door-criterion twice to get $D \\to M$ and $M \\to Y$ affect? Yes, that's called front-door criterion -- so we just need to remember only the back-door and the fact that we can use it iteratively."},{"metadata":{"trusted":true},"cell_type":"code","source":"data <- \"p(y,d, m)\" \n\nquery.dm<- \"p(m|do(d))\" \nquery.md<- \"p(y|do(m))\" \nquery<- \"p(y|do(d))\"\n\ngraph<- \"z1 -> x1\nz1 -> x2\nz2 -> x2\nz2 -> x3\nx2 -> d\nx2 -> y\nx3 -> y\nx1 -> d\nd -> m\nm -> y\n\"\nprint(dosearch(data, query.dm, graph))\nprint(dosearch(data, query.md, graph))\nprint(dosearch(data, query, graph))\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"So we get identification results:\nFirst,\n$$\np_{M(d)}(m)  := p(m|do(d)) = p(m|d).\n$$\nSecond,\n$$\np_{Y(m)}(y) := p(y|do(m)) = \\sum_{d}\\left(p(d)p(y|d,m)\\right), \n$$\nand the last by integrating the product of these two formulas:\n$$\np_{Y(d)}(y) := p(y|do(d)) = \\sum_{m}\\left(p(m|d)\\sum_{d}\\left(p(d)p(y|d,m)\\right)\\right) \n$$\n"},{"metadata":{},"cell_type":"markdown","source":"The package is very rich and allows identification analysis, when the data comes from multiple sources. Suppose we observe marginal distributions $(Y,D)$  and $(D,M)$ only. Can we identify the effect of $D \\to Y$. The answer is (guess) and the package correctly recovers it."},{"metadata":{"trusted":true},"cell_type":"code","source":"data <- \"p(y,m)\n         p(m,d)\" \n\nquery.dm<- \"p(m|do(d))\" \nquery.md<- \"p(y|do(m))\" \nquery<- \"p(y|do(d))\"\n\ngraph<- \"z1 -> x1\nz1 -> x2\nz2 -> x2\nz2 -> x3\nx2 -> d\nx2 -> y\nx3 -> y\nx1 -> d\nd -> m\nm -> y\n\"\nprint(dosearch(data, query.dm, graph))\nprint(dosearch(data, query.md, graph))\nprint(dosearch(data, query, graph))","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"3.6.3"}},"nbformat":4,"nbformat_minor":4}
