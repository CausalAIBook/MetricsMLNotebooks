{"cells":[{"metadata":{"id":"mll4gH73k2-A"},"cell_type":"markdown","source":["# Causal Identification in DAGs using Backdoor and Swigs, Equivalence Classes, Falsifiability Tests\n"]},{"metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true,"id":"md3VArZXk2-G"},"cell_type":"code","source":["#install and load package\n","install.packages(\"dagitty\")\n","install.packages(\"ggdag\")\n","library(dagitty)\n","library(ggdag)\n"],"execution_count":null,"outputs":[]},{"metadata":{"id":"5DaJmPrbk2-J"},"cell_type":"markdown","source":["# Graph Generation and Plotting"]},{"metadata":{"id":"eeldklHqk2-K"},"cell_type":"markdown","source":["The following DAG is due to Judea Pearl"]},{"metadata":{"trusted":true,"id":"1fgBFtRxk2-K"},"cell_type":"code","source":["#generate a couple of DAGs and plot them\n","\n","G = dagitty('dag{\n","Z1 [pos=\"-2,-1.5\"]\n","X1 [pos=\"-2,0\"]\n","Z2 [pos=\"1.5,-1.5\"]\n","X3 [pos=\"1.5, 0\"]\n","Y [outcome,pos=\"1.5,1.5\"]\n","D [exposure,pos=\"-2,1.5\"]\n","M [mediator, pos=\"0,1.5\"]\n","X2 [pos=\"0,0\"]\n","Z1 -> X1\n","X1 -> D\n","Z1 -> X2\n","Z2 -> X3\n","X3 -> Y\n","Z2 -> X2\n","D -> Y\n","X2 -> Y\n","X2 -> D\n","M->Y\n","D->M\n","}')\n","\n","\n","ggdag(G)+  theme_dag()"],"execution_count":null,"outputs":[]},{"metadata":{"id":"SfZKYPLgk2-K"},"cell_type":"markdown","source":["# Report Relatives of X2"]},{"metadata":{"trusted":true,"id":"PDE3ROjfk2-P"},"cell_type":"code","source":["print(parents(G, \"X2\"))\n","print(children(G, \"X2\"))\n","print(ancestors(G, \"X2\"))\n","print(descendants(G, \"X2\"))\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"id":"LEAIT0-_k2-R"},"cell_type":"markdown","source":["# Find Paths Between D and Y\n","\n"]},{"metadata":{"trusted":true,"id":"5JhG_60wk2-R"},"cell_type":"code","source":["paths(G, \"D\", \"Y\")"],"execution_count":null,"outputs":[]},{"metadata":{"id":"i8h9AIZYk2-S"},"cell_type":"markdown","source":["# List All Testable Implications of the Model"]},{"metadata":{"trusted":true,"id":"B5LnSoCik2-T"},"cell_type":"code","source":["print( impliedConditionalIndependencies(G) )"],"execution_count":null,"outputs":[]},{"metadata":{"id":"TKxYwKyuk2-U"},"cell_type":"markdown","source":["# Identification by Backdoor: List minimal adjustment sets to identify causal effecs $D \\to Y$"]},{"metadata":{"trusted":true,"id":"dXKGvXgTk2-V"},"cell_type":"code","source":["print( adjustmentSets( G, \"D\", \"Y\" ) )"],"execution_count":null,"outputs":[]},{"metadata":{"id":"4QqmWahfk2-W"},"cell_type":"markdown","source":["# Identification via SWIG and D-separation"]},{"metadata":{"trusted":true,"id":"Zv3rbjEuk2-W"},"cell_type":"code","source":["SWIG = dagitty('dag{\n","Z1 [pos=\"-2,-1.5\"]\n","X1 [pos=\"-2,0\"]\n","Z2 [pos=\"1.5,-1.5\"]\n","X3 [pos=\"1.5, 0\"]\n","Yd [outcome,pos=\"1.5,1.5\"]\n","D [exposure,pos=\"-2,1.5\"]\n","d [pos=\"-1, 1.5\"]\n","Md [mediator, pos=\"0,1.5\"]\n","X2 [pos=\"0,0\"]\n","Z1 -> X1\n","X1 -> D\n","Z1 -> X2\n","Z2 -> X3\n","X3 -> Yd\n","Z2 -> X2\n","X2 -> Yd\n","X2 -> D\n","X3-> Yd\n","Md-> Yd\n","d-> Md\n","}')\n","\n","ggdag(SWIG)+  theme_dag()"],"execution_count":null,"outputs":[]},{"metadata":{"id":"7Bdrp3mOk2-W"},"cell_type":"markdown","source":["\n","# Deduce Conditional Exogeneity or Ignorability by D-separation\n"]},{"metadata":{"trusted":true,"id":"KwJgFzoqk2-X"},"cell_type":"code","source":["print( impliedConditionalIndependencies(SWIG)[5:8] )\n"],"execution_count":null,"outputs":[]},{"metadata":{"id":"wgaiPTysk2-X"},"cell_type":"markdown","source":["This coincides with the backdoor criterion for this graph."]},{"metadata":{"id":"iHHStLhqk2-X"},"cell_type":"markdown","source":["# Print All Average Effects Identifiable by Conditioning"]},{"metadata":{"trusted":true,"id":"OcBfUurBk2-X"},"cell_type":"code","source":["for( n in names(G) ){\n","    for( m in children(G,n) ){\n","        a <- adjustmentSets( G, n, m )\n","        if( length(a) > 0 ){\n","            cat(\"The effect \",n,\"->\",m,\n","                \" is identifiable by controlling for:\\n\",sep=\"\")\n","            print( a, prefix=\" * \" )\n","        }\n","    }\n","}"],"execution_count":null,"outputs":[]},{"metadata":{"id":"gZRMiUymk2-Y"},"cell_type":"markdown","source":["# Equivalence Classes"]},{"metadata":{"trusted":true,"id":"8vNiL5HWk2-Y"},"cell_type":"code","source":["P=equivalenceClass(G)\n","plot(P)\n","#equivalentDAGs(G,10)"],"execution_count":null,"outputs":[]},{"metadata":{"id":"mUAnGdrkk2-Z"},"cell_type":"markdown","source":["Next Consider the elemntary Triangular Model:\n","$$\n","D \\to Y, \\quad X \\to (D,Y).\n","$$\n","This model has not testable implications and is Markov-equivalent to any other DAG difined on names $(X, D, Y)$."]},{"metadata":{"trusted":true,"id":"pBHDnH7Fk2-Z"},"cell_type":"code","source":["G3<- dagitty('dag{\n","D -> Y\n","X -> D\n","X -> Y\n","}\n","')\n","\n","ggdag(G3)+  theme_dag()\n","\n","print(impliedConditionalIndependencies(G3))\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"id":"1cw47mOEk2-Z"},"cell_type":"code","source":["P=equivalenceClass(G3)\n","plot(P)\n","equivalentDAGs(G3,10)\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"id":"kjil8zIfk2-Z"},"cell_type":"markdown","source":["# Example of Testing DAG Validity\n","\n","Next we simulate the data from a Linear SEM associated to DAG G, and perform a test of conditional independence restrictions, exploting linearity.\n","\n","\n","There are many other options for nonlinear models and discrete categorical variabales. Type help(localTests)."]},{"metadata":{"trusted":true,"id":"MZ_4jxNdk2-a"},"cell_type":"code","source":["set.seed(1)\n","x <- simulateSEM(G)\n","head(x)\n","#cov(x)\n","localTests(G, data = x, type = c(\"cis\"))\n","\n"],"execution_count":null,"outputs":[]},{"metadata":{"id":"aUQHK-vEk2-a"},"cell_type":"markdown","source":["Next we replaced $D$ by $\\bar D$ generated differently:\n","$$\n","\\bar D= (D + Y)/2\n","$$\n","So basically $\\bar D$ is an average of $D$ and $Y$ generated by $D$.  We then test if the resulting collection of random variables satisifes conditional indepdendence restrictions, exploiting linearity.  We end up rejectiong these restrictions and thefore the validity of this model for the data generated in this way.  This makes sense, because the new data no longer obeys the previous DAG structure.\n","\n"]},{"metadata":{"trusted":true,"id":"C0ND4GbEk2-a"},"cell_type":"code","source":["x.R = x\n","x.R$D = (x$D+ x$Y)/2\n","\n","localTests(G, data = x.R, type = c(\"cis\"))\n","\n"],"execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"3.6.3"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}