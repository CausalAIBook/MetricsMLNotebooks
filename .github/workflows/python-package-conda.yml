name: Run Jupyter Notebooks

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0'  # Runs once a week on Sunday at midnight

jobs:
  run-notebooks:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'  # Adjust this to your preferred Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jupyter nbconvert flake8 flake8-nb
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash

    - name: Run Flake8 linting on notebooks
      id: lint
      run: |
        mkdir -p linting_logs
        flake8_errors=0
        for notebook in PM1/*.ipynb; do
          [ -e "$notebook" ] || continue
          flake8-nb "$notebook" > "linting_logs/$(basename "$notebook" .ipynb)_linting.log" 2>&1 || flake8_errors=$((flake8_errors+1))
        done
        echo "flake8_errors=$flake8_errors" >> $GITHUB_ENV
      shell: bash

    - name: Run Jupyter notebooks
      id: execute
      run: |
        mkdir -p logs
        notebook_errors=0
        for notebook in PM1/*.ipynb; do
          [ -e "$notebook" ] || continue
          echo "Running $notebook"
          jupyter nbconvert --execute --inplace --to notebook --allow-errors "$notebook" > "logs/$(basename "$notebook" .ipynb).log" 2>&1 || notebook_errors=$((notebook_errors+1))
        done
        echo "notebook_errors=$notebook_errors" >> $GITHUB_ENV
      shell: bash

    - name: Aggregate and report errors and warnings
      run: |
        echo "Aggregating errors and warnings..."
        grep -E "Error|Warning" logs/*.log linting_logs/*.log > logs/errors_and_warnings.log || true
        echo "Errors and Warnings:"
        cat logs/errors_and_warnings.log
        if grep -q "Error" logs/errors_and_warnings.log; then
          exit 1
        fi
      shell: bash

    - name: Check for errors
      if: ${{ env.flake8_errors != '0' || env.notebook_errors != '0' }}
      run: exit 1
