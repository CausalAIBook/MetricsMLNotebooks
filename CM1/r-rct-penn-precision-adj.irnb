{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hz35ETpNelkG"
   },
   "source": [
    "# Analyzing RCT data with Precision Adjustment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "w7B1iDaqa2ZI",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "install.packages(\"sandwich\")\n",
    "install.packages(\"lmtest\")\n",
    "install.packages(\"xtable\")\n",
    "install.packages(\"hdm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "library(sandwich)\n",
    "library(lmtest)\n",
    "library(xtable)\n",
    "library(hdm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v7-YfIbyelkV"
   },
   "source": [
    "## Data\n",
    "\n",
    "In this lab, we analyze the Pennsylvania re-employment bonus experiment, which was previously studied in \"Sequential testing of duration data: the case of the Pennsylvania ‘reemployment bonus’ experiment\" (Bilias, 2000), among others. These experiments were conducted in the 1980s by the U.S. Department of Labor to test the incentive effects of alternative compensation schemes for unemployment insurance (UI). In these experiments, UI claimants were randomly assigned either to a control group or one of five treatment groups. Actually, there are six treatment groups in the experiments. Here we focus on treatment group 4, but feel free to explore other treatment groups. In the control group the current rules of the UI applied. Individuals in the treatment groups were offered a cash bonus if they found a job within some pre-specified period of time (qualification period), provided that the job was retained for a specified duration. The treatments differed in the level of the bonus, the length of the qualification period, and whether the bonus was declining over time in the qualification period; see http://qed.econ.queensu.ca/jae/2000-v15.6/bilias/readme.b.txt for further details on data.\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "_whbk2z4elkY",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "## loading the data\n",
    "file <- \"https://raw.githubusercontent.com/CausalAIBook/MetricsMLNotebooks/main/data/penn_jae.dat\"\n",
    "Penn <- as.data.frame(read.table(file, header = TRUE))\n",
    "\n",
    "n <- dim(Penn)[1]\n",
    "p_1 <- dim(Penn)[2]\n",
    "Penn <- subset(Penn, tg == 4 | tg == 0)\n",
    "attach(Penn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iTghGG4Kelkk",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "T4 <- (tg == 4)\n",
    "summary(T4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ZbWuqKExelkl",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "head(Penn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "72Rx7ECEelkn"
   },
   "source": [
    "### Model\n",
    "To evaluate the impact of the treatments on unemployment duration, we consider the linear regression model:\n",
    "\n",
    "$$\n",
    "Y =  D \\beta_1 + W'\\beta_2 + \\varepsilon, \\quad E \\varepsilon (D,W')' = 0,\n",
    "$$\n",
    "\n",
    "where $Y$ is  the  log of duration of unemployment, $D$ is a treatment  indicators,  and $W$ is a set of controls including age group dummies, gender, race, number of dependents, quarter of the experiment, location within the state, existence of recall expectations, and type of occupation.   Here $\\beta_1$ is the ATE, if the RCT assumptions hold rigorously.\n",
    "\n",
    "\n",
    "We also consider interactive regression model:\n",
    "\n",
    "$$\n",
    "Y =  D \\alpha_1 + D W' \\alpha_2 + W'\\beta_2 + \\varepsilon, \\quad E \\varepsilon (D,W', DW')' = 0,\n",
    "$$\n",
    "where $W$'s are demeaned (apart from the intercept), so that $\\alpha_1$ is the ATE, if the RCT assumptions hold rigorously."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uNtms5PHelko"
   },
   "source": [
    "Under RCT, the projection coefficient $\\beta_1$ has\n",
    "the interpretation of the causal effect of the treatment on\n",
    "the average outcome. We thus refer to $\\beta_1$ as the average\n",
    "treatment effect (ATE). Note that the covariates, here are\n",
    "independent of the treatment $D$, so we can identify $\\beta_1$ by\n",
    "just linear regression of $Y$ on $D$, without adding covariates.\n",
    "However we do add covariates in an effort to improve the\n",
    "precision of our estimates of the average treatment effect."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cMy_2NxKelkq"
   },
   "source": [
    "### Analysis\n",
    "\n",
    "We consider\n",
    "\n",
    "*  classical 2-sample approach, no adjustment (CL)\n",
    "*  classical linear regression adjustment (CRA)\n",
    "*  interactive regression adjusment (IRA)\n",
    "\n",
    "and carry out robust inference using the *estimatr* R packages."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lo-Cogv5elkx"
   },
   "source": [
    "# Carry out covariate balance check\n",
    "\n",
    "\n",
    "We first look at the coefficients individually with a $t$-test, and then we adjust the $p$-values to control for family-wise error."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2FeCJjOselky"
   },
   "source": [
    "The regression below is done using \"type='HC1'\" which computes the correct Eicker-Huber-White standard errors, instead of the classical non-robust formula based on homoscedasticity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "GYOMYN_WRNTL",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "data <- model.matrix(T4 ~ (female + black + othrace + factor(dep) + q2 + q3 + q4 + q5 + q6 +\n",
    "                             agelt35 + agegt54 + durable + lusd + husd)^2)\n",
    "\n",
    "# individual t-tests\n",
    "m <- lm(T4 ~ (female + black + othrace + factor(dep) + q2 + q3 + q4 + q5 + q6 +\n",
    "                agelt35 + agegt54 + durable + lusd + husd)^2, data = as.data.frame(data))\n",
    "coeftest(m, vcov = vcovHC(m, type = \"HC1\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hejmSGDuEj5U"
   },
   "source": [
    "<!-- We could conduct a Wald test to jointly test the hypothesis that all coefficients are zero. If the resulting p-value from such a test is small, we would reject the the null hypothesis that $\\beta_i=0 \\ \\forall i$, i.e. the balance conditions fail.\n",
    "\n",
    "However, calculating such a statistic requires computing the inverse of the covariance matrix, which in the presence of multicollinearity is singular. Python side-steps this issue in its computation of the pseudo-inverse, but it is trickier in R.  -->\n",
    "\n",
    "To test balance conditions, we employ the Holm-Bonferroni step-down method. With 100+ hypotheses, the family-wise type I error, or the probability of making at least one type I error treating all hypotheses independently, is close to 1. To control for this, we adjust p-values with the following procedure.\n",
    "\n",
    "First, set $\\alpha=0.05$ and denote the list of $n$ p-values from the regression with the vector $p$.\n",
    "\n",
    "1. Sort $p$ from smallest to largest, so $p_{(1)} \\leq p_{(2)} \\leq \\cdots \\leq p_{(n)}$. Denote the corresponding hypothesis for $p_{(i)}$ as $H_{(i)}$.\n",
    "2. For $i=1,\\ldots, n$,\n",
    "- If $$p_{(i)} > \\frac{\\alpha}{n-i+1} $$ Break the loop and do not reject any $H_{(j)}$ for $j \\geq i$.\n",
    "- Else reject $H_{(i)}$ if $$p_{(i)} \\leq \\frac{\\alpha}{n-i+1} $$ Increment $i := i+1$.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "T4AmK55IiiV1",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "holm_bonferroni <- function(p, alpha = 0.05) {\n",
    "  n <- length(p)\n",
    "  sig_beta <- c()\n",
    "\n",
    "  for (i in 1:n) {\n",
    "    if (sort(p)[i] > alpha / (n - i + 1)) {\n",
    "      break\n",
    "    } else {\n",
    "      sig_beta <- c(sig_beta, order(p)[i])\n",
    "    }\n",
    "  }\n",
    "\n",
    "  return(sig_beta)\n",
    "}\n",
    "\n",
    "p_values <- as.vector(coeftest(m, vcov = vcovHC(m, type = \"HC1\"))[, 4])\n",
    "significant_indices <- holm_bonferroni(p_values, alpha = 0.05)\n",
    "print(paste(\"Significant Coefficients (Indices): \", significant_indices))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "66zng98lpK1w"
   },
   "source": [
    "There is also a built in R function to do this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "iBMiaj3jAZuo",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "p_values <- as.vector(coeftest(m, vcov = vcovHC(m, type = \"HC1\"))[, 4])\n",
    "holm_reject <- p.adjust(sort(p_values), \"holm\") <= 0.05\n",
    "holm_reject"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tPtstQV7elk0"
   },
   "source": [
    "We see that that even though this is a randomized experiment, balance conditions are failed.\n",
    "<!--\n",
    "The holm method fails to reject any hypothesis. That is, we fail to reject the hypothesis that any coefficient is zero. Thus, in this randomized experiment, balance conditions are met. -->"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "C-2Ii9rbelk1"
   },
   "source": [
    "# Model Specification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "43W-vaIzelk1",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# model specifications\n",
    "\n",
    "# no adjustment (2-sample approach)\n",
    "formula_cl <- log(inuidur1) ~ T4\n",
    "\n",
    "# adding controls\n",
    "formula_cra <- log(inuidur1) ~ T4 + (female + black + othrace + factor(dep) + q2 + q3 + q4 + q5 + q6 +\n",
    "                                       agelt35 + agegt54 + durable + lusd + husd)^2\n",
    "# Omitted dummies: q1, nondurable, muld\n",
    "\n",
    "ols_cl <- lm(formula_cl)\n",
    "ols_cra <- lm(formula_cra)\n",
    "\n",
    "ols_cl <- coeftest(ols_cl, vcov = vcovHC(ols_cl, type = \"HC1\"))\n",
    "ols_cra <- coeftest(ols_cra, vcov = vcovHC(ols_cra, type = \"HC1\"))\n",
    "\n",
    "print(ols_cl)\n",
    "print(ols_cra)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "K2nSjv8Aelk2"
   },
   "source": [
    "The interactive specificaiton corresponds to the approach introduced in Lin (2013)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SGdP0kQ3elk2",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "# interactive regression model;\n",
    "\n",
    "X <- model.matrix(~ (female + black + othrace + factor(dep) + q2 + q3 + q4 + q5 + q6 +\n",
    "                       agelt35 + agegt54 + durable + lusd + husd)^2)[, -1]\n",
    "dim(X)\n",
    "\n",
    "demean <- function(x) {\n",
    "  x - mean(x)\n",
    "}\n",
    "\n",
    "X <- apply(X, 2, demean)\n",
    "\n",
    "ols_ira <- lm(log(inuidur1) ~ T4 * X)\n",
    "ols_ira <- coeftest(ols_ira, vcov = vcovHC(ols_ira, type = \"HC1\"))\n",
    "print(ols_ira)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "y7k740wbelk3"
   },
   "source": [
    "Next we try out partialling out with lasso"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "O9AZ49XNelk3",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "T4 <- demean(T4)\n",
    "\n",
    "DX <- model.matrix(~ T4 * X)[, -1]\n",
    "\n",
    "rlasso_ira <- summary(rlassoEffects(DX, log(inuidur1), index = 1))\n",
    "\n",
    "print(rlasso_ira)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UOzNgaLaellA"
   },
   "source": [
    "### Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "UGh_LJouellB",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "str(ols_ira)\n",
    "ols_ira[2, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "wvxXEMUQellC",
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [],
   "source": [
    "table <- matrix(0, 2, 4)\n",
    "table[1, 1] <- ols_cl[2, 1]\n",
    "table[1, 2] <- ols_cra[2, 1]\n",
    "table[1, 3] <- ols_ira[2, 1]\n",
    "table[1, 4] <- rlasso_ira[[1]][1]\n",
    "\n",
    "table[2, 1] <- ols_cl[2, 2]\n",
    "table[2, 2] <- ols_cra[2, 2]\n",
    "table[2, 3] <- ols_ira[2, 2]\n",
    "table[2, 4] <- rlasso_ira[[1]][2]\n",
    "\n",
    "\n",
    "colnames(table) <- c(\"CL\", \"CRA\", \"IRA\", \"IRA w Lasso\")\n",
    "rownames(table) <- c(\"estimate\", \"standard error\")\n",
    "tab <- xtable(table, digits = 5)\n",
    "tab\n",
    "\n",
    "print(tab, type = \"latex\", digits = 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "srdCKAK8ellD"
   },
   "source": [
    "Treatment group 4 experiences an average decrease of about $7.8\\%$ in the length of unemployment spell.\n",
    "\n",
    "\n",
    "Observe that regression estimators delivers estimates that are slighly more efficient (lower standard errors) than the simple 2 mean estimator, but essentially all methods have very similar standard errors. From IRA results we also see that there is not any statistically detectable heterogeneity.  We also see the regression estimators offer slightly lower estimates -- these difference occur perhaps to due minor imbalance in the treatment allocation, which the regression estimators try to correct.\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
