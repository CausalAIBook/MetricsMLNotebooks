{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_execution_state": "idle",
        "_uuid": "051d70d956493feee0c6d64651c6a088724dca2a",
        "papermill": {
          "duration": 0.036479,
          "end_time": "2021-02-13T18:19:43.396666",
          "exception": false,
          "start_time": "2021-02-13T18:19:43.360187",
          "status": "completed"
        },
        "tags": [],
        "id": "dtt9U13qNGOn"
      },
      "source": [
        "# A Simple Case Study using Wage Data from 2015"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036639,
          "end_time": "2021-02-13T18:19:43.468425",
          "exception": false,
          "start_time": "2021-02-13T18:19:43.431786",
          "status": "completed"
        },
        "tags": [],
        "id": "LCKYnHWrNGOn"
      },
      "source": [
        "We illustrate how to predict an outcome variable $Y$ in a high-dimensional setting, where the number of covariates $p$ is large in relation to the sample size $n$. We use linear prediction rules for estimation, including OLS and the penalized linear methods we've studied. Later, we will also consider nonlinear prediction rules including tree-based methods and neural nets."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "install.packages(\"xtable\")\n",
        "install.packages(\"hdm\")\n",
        "install.packages(\"glmnet\")\n",
        "install.packages(\"MLmetrics\")\n",
        "\n",
        "library(hdm)\n",
        "library(xtable)\n",
        "library(glmnet)\n",
        "library(MLmetrics)"
      ],
      "metadata": {
        "id": "VPwV7nNDS_nz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.034705,
          "end_time": "2021-02-13T18:19:43.537814",
          "exception": false,
          "start_time": "2021-02-13T18:19:43.503109",
          "status": "completed"
        },
        "tags": [],
        "id": "gRYGynhrNGOo"
      },
      "source": [
        "## Data"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036082,
          "end_time": "2021-02-13T18:19:43.609347",
          "exception": false,
          "start_time": "2021-02-13T18:19:43.573265",
          "status": "completed"
        },
        "tags": [],
        "id": "S_YMURKqNGOo"
      },
      "source": [
        "Again, we consider data from the U.S. March Supplement of the Current Population Survey (CPS) in 2015.\n",
        "The preproccessed sample consists of $5150$ never-married individuals."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.279387,
          "end_time": "2021-02-13T18:19:43.923823",
          "exception": false,
          "start_time": "2021-02-13T18:19:43.644436",
          "status": "completed"
        },
        "tags": [],
        "id": "B09_5wrUNGOo"
      },
      "outputs": [],
      "source": [
        "file = \"https://raw.githubusercontent.com/CausalAIBook/MetricsMLNotebooks/main/data/wage2015_subsample_inference.csv\"\n",
        "data <- read.csv(file)\n",
        "dim(data)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.034902,
          "end_time": "2021-02-13T18:19:43.994834",
          "exception": false,
          "start_time": "2021-02-13T18:19:43.959932",
          "status": "completed"
        },
        "tags": [],
        "id": "Ol9dToMQNGOq"
      },
      "source": [
        "The outcomes $Y_i$'s are hourly (log) wages of never-married workers living in the U.S. The raw regressors $Z_i$'s consist of a variety of characteristics, including experience, education and industry and occupation indicators."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.091723,
          "end_time": "2021-02-13T18:19:44.123394",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.031671",
          "status": "completed"
        },
        "tags": [],
        "id": "bsqnI6d0NGOq"
      },
      "outputs": [],
      "source": [
        "Z <- subset(data,select=-c(lwage,wage)) # regressors\n",
        "colnames(Z)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.037074,
          "end_time": "2021-02-13T18:19:44.196749",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.159675",
          "status": "completed"
        },
        "tags": [],
        "id": "VeU2XMYENGOr"
      },
      "source": [
        "The following figure shows the weekly wage distribution from the US survey data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.443391,
          "end_time": "2021-02-13T18:19:44.677379",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.233988",
          "status": "completed"
        },
        "tags": [],
        "id": "d3sbTfpRNGOr"
      },
      "outputs": [],
      "source": [
        "hist(data$wage, xlab= \"hourly wage\", main=\"Empirical wage distribution from the US survey data\", breaks= 35)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036602,
          "end_time": "2021-02-13T18:19:44.752465",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.715863",
          "status": "completed"
        },
        "tags": [],
        "id": "BmGfrWFNNGOs"
      },
      "source": [
        "Wages show a high degree of skewness. Hence, wages are transformed in almost all studies by\n",
        "the logarithm."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036009,
          "end_time": "2021-02-13T18:19:44.826260",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.790251",
          "status": "completed"
        },
        "tags": [],
        "id": "msBSjtuKNGOs"
      },
      "source": [
        "## Analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036925,
          "end_time": "2021-02-13T18:19:44.899159",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.862234",
          "status": "completed"
        },
        "tags": [],
        "id": "B-XZMCogNGOs"
      },
      "source": [
        "Due to the skewness of the data, we are considering log wages which leads to the following regression model\n",
        "\n",
        "$$log(wage) = g(Z) + \\epsilon.$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036183,
          "end_time": "2021-02-13T18:19:44.971528",
          "exception": false,
          "start_time": "2021-02-13T18:19:44.935345",
          "status": "completed"
        },
        "tags": [],
        "id": "pNLS-C_7NGOt"
      },
      "source": [
        "In this notebook, we will evaluate *linear* prediction rules. In later notebooks, we will also utilize nonlinear prediction methods. In linear models, we estimate the prediction rule of the form\n",
        "\n",
        "$$\\hat g(Z) = \\hat \\beta'X.$$\n",
        "\n",
        "Again, we generate $X$ in three ways:\n",
        "\n",
        "1. Basic Model:   $X$ consists of a set of raw regressors (e.g. gender, experience, education indicators, regional indicators).\n",
        "\n",
        "\n",
        "2. Flexible Model:  $X$ consists of all raw regressors from the basic model plus occupation and industry indicators, transformations (e.g., $\\operatorname{exp}^2$ and $\\operatorname{exp}^3$) and additional two-way interactions.\n",
        "\n",
        "3. Extra Flexible Model: $X$ takes the flexible model and takes all pairwise interactions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.037318,
          "end_time": "2021-02-13T18:19:45.044959",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.007641",
          "status": "completed"
        },
        "tags": [],
        "id": "-kGLyGXvNGOt"
      },
      "source": [
        "To evaluate the out-of-sample performance, we split the data first."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.062188,
          "end_time": "2021-02-13T18:19:45.143118",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.080930",
          "status": "completed"
        },
        "tags": [],
        "id": "oAqJIgmlNGOt"
      },
      "outputs": [],
      "source": [
        "set.seed(1234)\n",
        "training <- sample(nrow(data), nrow(data)*(3/4), replace=FALSE)\n",
        "\n",
        "data_train <- data[training,]\n",
        "data_test <- data[-training,]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.060969,
          "end_time": "2021-02-13T18:19:45.445389",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.384420",
          "status": "completed"
        },
        "tags": [],
        "id": "C6qC_wyjNGOu"
      },
      "outputs": [],
      "source": [
        "Y_train <- data_train$lwage\n",
        "Y_test <- data_test$lwage"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.038774,
          "end_time": "2021-02-13T18:19:45.217757",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.178983",
          "status": "completed"
        },
        "tags": [],
        "id": "5-CCjJnbNGOt"
      },
      "source": [
        "We are starting by running a simple OLS regression. We fit the basic and flexible model to our training data by running an ols regression and compute the R-squared on the test sample"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.037704,
          "end_time": "2021-02-13T18:19:45.622370",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.584666",
          "status": "completed"
        },
        "tags": [],
        "id": "qbummAR-NGOu"
      },
      "source": [
        "As known from our first lab, the basic model consists of $51$ regressors and the flexible model of $246$ regressors. Let us fit our models to the training sample using the two different model specifications. We are starting by running a simple ols regression and computing the mean squared error and $R^2$ on the test sample."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Low dimensional specification (basic)"
      ],
      "metadata": {
        "id": "4LNs__OcfmFV"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.094135,
          "end_time": "2021-02-13T18:19:45.347955",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.253820",
          "status": "completed"
        },
        "tags": [],
        "id": "WD7tshOlNGOt"
      },
      "outputs": [],
      "source": [
        "X_basic <-  \"sex + exp1 + shs + hsg+ scl + clg + mw + so + we + C(occ2)+ C(ind2)\"\n",
        "formula_basic <- as.formula(paste(\"lwage\", \"~\", X_basic))\n",
        "model_X_basic_train <- model.matrix(formula_basic,data_train)\n",
        "model_X_basic_test <- model.matrix(formula_basic,data_test)\n",
        "p_basic <- dim(model_X_basic_train)[2]\n",
        "p_basic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.069537,
          "end_time": "2021-02-13T18:19:45.887169",
          "exception": false,
          "start_time": "2021-02-13T18:19:45.817632",
          "status": "completed"
        },
        "tags": [],
        "id": "kx1xoWHFNGOv"
      },
      "outputs": [],
      "source": [
        "# ols (basic model)\n",
        "fit.lm.basic <- lm(formula_basic, data_train)\n",
        "# Compute the Out-Of-Sample Performance\n",
        "yhat.lm.basic <- predict(fit.lm.basic, newdata=data_test)\n",
        "cat(\"Basic model MSE (OLS): \", mean((Y_test-yhat.lm.basic)^2)) # MSE OLS (basic model)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.052764,
          "end_time": "2021-02-13T18:19:46.122829",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.070065",
          "status": "completed"
        },
        "tags": [],
        "id": "hDlMXF0ANGOw"
      },
      "source": [
        "To determine the out-of-sample $MSE$ and the standard error in one step, we can use the function *lm*:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.076484,
          "end_time": "2021-02-13T18:19:46.239015",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.162531",
          "status": "completed"
        },
        "tags": [],
        "id": "ERCs22oDNGOw"
      },
      "outputs": [],
      "source": [
        "MSE.lm.basic <- summary(lm((Y_test-yhat.lm.basic)^2~1))$coef[1:2]\n",
        "MSE.lm.basic"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.039088,
          "end_time": "2021-02-13T18:19:46.317915",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.278827",
          "status": "completed"
        },
        "tags": [],
        "id": "3PQ-f_waNGOw"
      },
      "source": [
        "We also compute the out-of-sample $R^2$:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.057098,
          "end_time": "2021-02-13T18:19:46.413754",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.356656",
          "status": "completed"
        },
        "tags": [],
        "id": "YLgvLE2BNGOw"
      },
      "outputs": [],
      "source": [
        "R2.lm.basic <- 1-MSE.lm.basic[1]/var(Y_test)\n",
        "cat(\"Basic model R^2 (OLS): \",R2.lm.basic) # MSE OLS (basic model)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### High-dimensional specification (flexible)"
      ],
      "metadata": {
        "id": "tTZyELgyf51J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_flex <- \"sex + exp1 + shs+hsg+scl+clg+C(occ2)+C(ind2)+mw+so+we + (exp1+exp2+exp3+exp4)*(shs+hsg+scl+clg+C(occ2)+C(ind2)+mw+so+we)\"\n",
        "formula_flex <- as.formula(paste(\"lwage\", \"~\", X_flex))\n",
        "model_X_flex_train <- model.matrix(formula_flex,data_train)\n",
        "model_X_flex_test <- model.matrix(formula_flex,data_test)\n",
        "p_flex <- dim(model_X_flex_train)[2]\n",
        "p_flex"
      ],
      "metadata": {
        "id": "J8Rffx0ef3nM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.039585,
          "end_time": "2021-02-13T18:19:46.492903",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.453318",
          "status": "completed"
        },
        "tags": [],
        "id": "77G7YfbnNGOw"
      },
      "source": [
        "We repeat the same procedure for the flexible model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 0.198636,
          "end_time": "2021-02-13T18:19:46.730717",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.532081",
          "status": "completed"
        },
        "tags": [],
        "id": "KpRtjaAlNGOw"
      },
      "outputs": [],
      "source": [
        "# ols (flexible model)\n",
        "fit.lm.flex <- lm(formula_flex, data_train)\n",
        "# Compute the Out-Of-Sample Performance\n",
        "options(warn=-1)\n",
        "yhat.lm.flex <- predict(fit.lm.flex, newdata=data_test)\n",
        "MSE.lm.flex <- summary(lm((Y_test-yhat.lm.flex)^2~1))$coef[1:2]\n",
        "R2.lm.flex <- 1-MSE.lm.flex[1]/var(Y_test)\n",
        "cat(\"Flexible model R^2 (OLS): \",R2.lm.flex) # MSE OLS (flexible model)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.042521,
          "end_time": "2021-02-13T18:19:46.935859",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.893338",
          "status": "completed"
        },
        "tags": [],
        "id": "sShiB-i9NGOx"
      },
      "source": [
        "### Penalized regressions (flexible model)\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.051953,
          "end_time": "2021-02-13T18:19:46.853182",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.801229",
          "status": "completed"
        },
        "tags": [],
        "id": "5wgFVRkkNGOx"
      },
      "source": [
        "We observe that ols regression works better for the basic model with smaller $p/n$ ratio. We proceed by running penalized regressions first for the flexible model, tuned via cross-validation."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fit.lasso.cv.flex   <- cv.glmnet(model_X_flex_train, Y_train, family=\"gaussian\", alpha=1)\n",
        "fit.ridge.flex   <- cv.glmnet(model_X_flex_train, Y_train, family=\"gaussian\", alpha=0)\n",
        "fit.elnet.flex   <- cv.glmnet(model_X_flex_train, Y_train, family=\"gaussian\", alpha=.5)\n",
        "\n",
        "yhat.lasso.cv.flex    <- predict(fit.lasso.cv.flex , newx = model_X_flex_test)\n",
        "yhat.ridge.flex    <- predict(fit.ridge.flex , newx = model_X_flex_test)\n",
        "yhat.elnet.flex    <- predict(fit.elnet.flex , newx = model_X_flex_test)\n",
        "\n",
        "MSE.lasso.cv.flex  <- summary(lm((Y_test-yhat.lasso.cv.flex )^2~1))$coef[1:2]\n",
        "MSE.ridge.flex  <- summary(lm((Y_test-yhat.ridge.flex )^2~1))$coef[1:2]\n",
        "MSE.elnet.flex  <- summary(lm((Y_test-yhat.elnet.flex )^2~1))$coef[1:2]\n",
        "\n",
        "R2.lasso.cv.flex  <- 1-MSE.lasso.cv.flex [1]/var(Y_test)\n",
        "R2.ridge.flex  <- 1-MSE.ridge.flex [1]/var(Y_test)\n",
        "R2.elnet.flex  <- 1-MSE.elnet.flex [1]/var(Y_test)\n",
        "\n",
        "# R^2 using cross-validation (flexible model)\n",
        "cat('Flexible model R^2 (Lasso): ', R2.lasso.cv.flex)\n",
        "cat('\\nFlexible model R^2 (Ridge): ', R2.ridge.flex)\n",
        "cat('\\nFlexible model R^2 (Elastic Net): ', R2.elnet.flex)"
      ],
      "metadata": {
        "id": "n3jvO5HQmzbf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.040161,
          "end_time": "2021-02-13T18:19:47.015626",
          "exception": false,
          "start_time": "2021-02-13T18:19:46.975465",
          "status": "completed"
        },
        "tags": [],
        "id": "ZytMS-aCNGOx"
      },
      "source": [
        "We can also try a variant of the `l1` penalty, where the weight is chosen based on theoretical derivations. We use package *hdm* and the function *rlasso*, relying on a theoretical based choice of the penalty level $\\lambda$ in the lasso regression."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Specifically, we use \"plug-in\" tuning with a theoretically valid choice of penalty $\\lambda = 2 \\cdot c \\hat{\\sigma} \\sqrt{n} \\Phi^{-1}(1-\\alpha/2p)$, where $c>1$ and $1-\\alpha$ is a confidence level, $\\Phi^{-1}$ denotes the quantile function, and $\\hat{\\sigma}$ is estimated in an iterative manner (see corresponding notes in book). Under homoskedasticity, this choice ensures that the Lasso predictor is well behaved, delivering good predictive performance under approximate sparsity. In practice, this formula will work well even in the absence of homoskedasticity, especially when the random variables $\\epsilon$ and $X$ in the regression equation decay quickly at the tails.\n",
        "\n",
        "In practice, many people choose to use cross-validation, which is perfectly fine for predictive tasks. However, when conducting inference, to make our analysis valid we will require cross-fitting in addition to cross-validation. As we have not yet discussed cross-fitting, we rely on this theoretically-driven penalty in order to allow for accurate inference in the upcoming notebooks."
      ],
      "metadata": {
        "id": "n-D_fRJBnkEH"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.049543,
          "end_time": "2021-02-13T18:19:47.757271",
          "exception": false,
          "start_time": "2021-02-13T18:19:47.707728",
          "status": "completed"
        },
        "tags": [],
        "id": "yBiZ3q3INGOy"
      },
      "source": [
        "Now, we repeat the same procedure for the flexible model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "papermill": {
          "duration": 3.430649,
          "end_time": "2021-02-13T18:19:51.229007",
          "exception": false,
          "start_time": "2021-02-13T18:19:47.798358",
          "status": "completed"
        },
        "tags": [],
        "id": "PlTdJh5PNGOy"
      },
      "outputs": [],
      "source": [
        "fit.rlasso.flex  <- rlasso(formula_flex, data_train, post=FALSE)\n",
        "fit.rlasso.post.flex <- rlasso(formula_flex, data_train, post=TRUE)\n",
        "yhat.rlasso.flex   <- predict(fit.rlasso.flex, newdata=data_test)\n",
        "yhat.rlasso.post.flex   <- predict(fit.rlasso.post.flex, newdata=data_test)\n",
        "\n",
        "MSE.lasso.flex <- summary(lm((Y_test-yhat.rlasso.flex)^2~1))$coef[1:2]\n",
        "MSE.lasso.post.flex <- summary(lm((Y_test-yhat.rlasso.post.flex)^2~1))$coef[1:2]\n",
        "\n",
        "R2.lasso.flex <- 1-MSE.lasso.flex[1]/var(Y_test)\n",
        "R2.lasso.post.flex <- 1-MSE.lasso.post.flex[1]/var(Y_test)\n",
        "# R^2 theoretically chosen penalty (flexible model)\n",
        "cat('Flexible model R^2 (RLasso): ', R2.lasso.flex)\n",
        "cat('\\nFlexible model R^2 (RLasso post): ', R2.lasso.post.flex)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finally, we try the combination of a sparse and a dense coefficient using the LAVA method"
      ],
      "metadata": {
        "id": "aude922IfxBG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define function to compute lava estimator. Doing an iterative scheme with fixed\n",
        "# number of iteration. Could iterate until a convergence criterion is met.\n",
        "lava.predict <- function(X, Y, newX, lambda1, lambda2, iter=5){\n",
        "\n",
        "  # Need to demean internally\n",
        "  dy = Y - mean(Y)\n",
        "  dx = scale(X, scale = FALSE)\n",
        "\n",
        "  sp1 = glmnet(dx, dy, lambda = lambda1)  #lasso step fits \"sparse part\"\n",
        "  de1 = glmnet(dx, dy-predict(sp1, newx = dx), alpha = 0, lambda = lambda2)\n",
        "\n",
        "  i=1\n",
        "  while(i<= iter) {\n",
        "    sp1 = glmnet(dx, dy-predict(de1, newx = dx, s=\"lambda.min\"), lambda = lambda1)\n",
        "    de1 = glmnet(dx, dy-predict(sp1, newx = dx, s=\"lambda.min\"), alpha = 0, lambda = lambda2)\n",
        "    i = i+1 }\n",
        "\n",
        "  bhat = sp1$beta+de1$beta\n",
        "  a0 = mean(Y)-sum(colMeans(X)*bhat)\n",
        "\n",
        "  # Need to add intercept to output\n",
        "\n",
        "  yhat = newX%*%bhat + a0\n",
        "\n",
        "  return(yhat)\n",
        "}"
      ],
      "metadata": {
        "id": "WgBPFQ72ftBz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# define function to get predictions and r2 scores for lava estimator\n",
        "lava_yhat_r2 <- function(xtr.mod, xte.mod, ytr, yte, num_folds = 5){\n",
        "\n",
        "    # 5-fold CV. glmnet does cross-validation internally and\n",
        "    # relatively efficiently. We're going to write out all the steps to make sure\n",
        "    # we're using the same CV folds across all procedures in a transparent way and\n",
        "    # to keep the overall structure clear as well.\n",
        "\n",
        "    # Setup for brute force K-Fold CV\n",
        "    n = length(ytr)\n",
        "    Kf = num_folds  # Number of folds\n",
        "    sampleframe <- rep(1:Kf, ceiling( n/Kf ) )\n",
        "    cvgroup <- sample( sampleframe , size=n ,  replace=FALSE )  # CV groups\n",
        "\n",
        "\n",
        "    ##------------------------------------------------------------\n",
        "    # We're going to take a shortcut and use the range of lambda values that come out\n",
        "    # of the default implementation in glmnet for everything. Could do better here - maybe\n",
        "\n",
        "    ## Fit ridge on grid of lambda values (chosen by default using glmnet) using basic model.\n",
        "    ridge.mod = glmnet(xtr.mod,ytr,alpha=0)  # alpha = 0 gives ridge\n",
        "    ridge.lambda = ridge.mod$lambda # values of penalty parameter\n",
        "\n",
        "    ## Fit lasso on grid of lambda values (chosen by default using glmnet) using basic model.\n",
        "    lasso.mod = glmnet(xtr.mod,ytr)  # default is lasso (equivalent to alpha = 1)\n",
        "    lasso.lambda = lasso.mod$lambda # values of penalty parameter\n",
        "\n",
        "    ##------------------------------------------------------------\n",
        "\n",
        "\n",
        "    # Lava - Using a double loop over candidate penalty parameter values.\n",
        "\n",
        "    lambda1.lava.mod = lasso.mod$lambda[seq(5,length(lasso.mod$lambda),10)]\n",
        "    lambda2.lava.mod = ridge.mod$lambda[seq(5,length(ridge.mod$lambda),10)]\n",
        "\n",
        "    CV.mod.lava = matrix(0,length(lambda1.lava.mod),length(lambda2.lava.mod))\n",
        "\n",
        "    for(k in 1:Kf) {\n",
        "      indk = cvgroup == k\n",
        "\n",
        "      K.xtr.mod = xtr.mod[!indk,]\n",
        "      K.ytr = ytr[!indk]\n",
        "      K.xte.mod = xtr.mod[indk,]\n",
        "      K.yte = ytr[indk]\n",
        "\n",
        "      for(ii in 1:length(lambda1.lava.mod)) {\n",
        "        for(jj in 1:length(lambda2.lava.mod)) {\n",
        "          CV.mod.lava[ii,jj] = CV.mod.lava[ii,jj] +\n",
        "            sum((K.yte - lava.predict(K.xtr.mod, K.ytr, newX = K.xte.mod ,\n",
        "                                      lambda1 = lambda1.lava.mod[ii],\n",
        "                                      lambda2 = lambda2.lava.mod[jj]))^2)\n",
        "        }\n",
        "      }\n",
        "\n",
        "    }\n",
        "\n",
        "    # Get CV min values of tuning parameters\n",
        "    cvmin.lava.mod = which(CV.mod.lava == min(CV.mod.lava) , arr.ind = TRUE)\n",
        "    cvlambda1.lava.mod = lambda1.lava.mod[cvmin.lava.mod[1]]\n",
        "    cvlambda2.lava.mod = lambda2.lava.mod[cvmin.lava.mod[2]]\n",
        "\n",
        "    # cat(\"Min Lava Lasso CV Penalty: \", cvlambda1.lava.mod)\n",
        "    # cat(\"\\nMin Lava Ridge CV Penalty: \", cvlambda2.lava.mod)\n",
        "\n",
        "\n",
        "    #### Look at performance on test sample\n",
        "\n",
        "    # Calculate R^2 in training data and in validation data as measures\n",
        "    # Refit on entire training sample\n",
        "\n",
        "\n",
        "    #### CV-min model\n",
        "\n",
        "    # In sample fit\n",
        "    cvmin.yhat.lava.tr <- lava.predict(xtr.mod, ytr, newX = xtr.mod,\n",
        "                                            lambda1 = cvlambda1.lava.mod,\n",
        "                                            lambda2 = cvlambda2.lava.mod)\n",
        "    r2.lava.mod = 1-sum((ytr-cvmin.yhat.lava.tr)^2)/sum((ytr-mean(ytr))^2)\n",
        "\n",
        "    # Out of sample fit\n",
        "    cvmin.yhat.lava.test <- lava.predict(xtr.mod, ytr, newX = xte.mod,\n",
        "                                            lambda1 = cvlambda1.lava.mod,\n",
        "                                            lambda2 = cvlambda2.lava.mod)\n",
        "    r2V.lava.mod = 1-sum((yte-cvmin.yhat.lava.test)^2)/sum((yte-mean(ytr))^2)\n",
        "\n",
        "\n",
        "    # cat(\"\\nIn sample R2 (CV-min): \", r2.lava.mod)\n",
        "    # cat(\"\\nOut of Sample R2 (CV-min): \", r2V.lava.mod)\n",
        "\n",
        "\n",
        "    #### Use average model across cv-folds and refit model using all training data\n",
        "    ###### we won't report these results.\n",
        "    ###### Averaging is theoretically more solid, but cv-min is more practical.\n",
        "    n.tr = length(ytr)\n",
        "    n.te = length(yte)\n",
        "    yhat.tr.lava.mod = matrix(0,n.tr,Kf)\n",
        "    yhat.te.lava.mod = matrix(0,n.te,Kf)\n",
        "\n",
        "\n",
        "    for(k in 1:Kf) {\n",
        "      indk = cvgroup == k\n",
        "\n",
        "      K.xtr.mod = xtr.mod[!indk,]\n",
        "      K.ytr = ytr[!indk]\n",
        "\n",
        "      # Lava\n",
        "      yhat.tr.lava.mod[,k] = as.vector(lava.predict(K.xtr.mod, K.ytr, newX = xtr.mod ,\n",
        "                                            lambda1 = cvlambda1.lava.mod,\n",
        "                                            lambda2 = cvlambda2.lava.mod))\n",
        "      yhat.te.lava.mod[,k] = as.vector(lava.predict(K.xtr.mod, K.ytr, newX = xte.mod ,\n",
        "                                            lambda1 = cvlambda1.lava.mod,\n",
        "                                            lambda2 = cvlambda2.lava.mod))\n",
        "    }\n",
        "\n",
        "    avg.yhat.lava.tr <- rowMeans(yhat.tr.lava.mod)\n",
        "    avg.yhat.lava.test <- rowMeans(yhat.te.lava.mod)\n",
        "\n",
        "    r2.CVave.lava.mod = 1-sum((ytr-avg.yhat.lava.tr)^2)/sum((ytr-mean(ytr))^2)\n",
        "    r2V.CVave.lava.mod = 1-sum((yte-avg.yhat.lava.test)^2)/sum((yte-mean(ytr))^2)\n",
        "\n",
        "    # cat(\"\\nIn sample R2 (Average Across Folds): \", r2.CVave.lava.mod)\n",
        "    # cat(\"\\nOut of Sample R2 (Average Across Folds): \", r2V.CVave.lava.mod)\n",
        "\n",
        "    return(c(cvlambda1.lava.mod,\n",
        "             cvlambda2.lava.mod,\n",
        "             cvmin.yhat.lava.tr, # CV_min\n",
        "             cvmin.yhat.lava.test, # CV_min\n",
        "             r2.lava.mod,  # CV_min\n",
        "             r2V.lava.mod, # CV_min\n",
        "             avg.yhat.lava.tr, # Average across Folds\n",
        "             avg.yhat.lava.test, # Average across Folds\n",
        "             r2.CVave.lava.mod, # Average across Folds\n",
        "             r2V.CVave.lava.mod  # Average across Folds\n",
        "             )\n",
        "          )\n",
        "}"
      ],
      "metadata": {
        "id": "2HFE2EbdkMjj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fit.lava.flex <- lava_yhat_r2(model_X_flex_train, model_X_flex_test, Y_train, Y_test)\n",
        "cat('Flexible model R^2 (LAVA): ', fit.lava.flex[[6]]) # using CV_min"
      ],
      "metadata": {
        "id": "Uw3LMCiskJzV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<!-- We find that for this dataset the low dimensional OLS was the best among all specifications. The high-dimensional approaches did not manage to increase predictive power. -->\n",
        "\n",
        "We find that for this dataset the low dimensional OLS is sufficient. The high-dimensional approaches did not manage to substantively increase predictive power."
      ],
      "metadata": {
        "id": "f8lYhGaWfpYR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Extra high-dimensional specification (extra flexible)\n",
        "\n",
        "We repeat the same procedure for the extra flexible model.\n",
        "\n",
        "<!-- Given the results above, it is not immediately clear why one would choose to use Lasso as results are fairly similar. To motivate, we consider an extra flexible model to show how OLS can overfit significantly to the in-sample train data and perform poorly on the out-of-sample testing data. -->\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "bxuPZI4Zx0Vm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_extra <- \" sex + (exp1+exp2+exp3+exp4+shs+hsg+scl+clg+C(occ2)+C(ind2)+mw+so+we)^2\"\n",
        "formula_extra <- as.formula(paste(\"lwage\", \"~\", X_extra))\n",
        "model_X_extra_train <- model.matrix(formula_extra,data_train)\n",
        "model_X_extra_test <- model.matrix(formula_extra,data_test)\n",
        "p_extra <- dim(model_X_extra_train)[2]\n",
        "p_extra"
      ],
      "metadata": {
        "id": "JsFhSsM_rGjN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ols (extra flexible model)\n",
        "fit.lm.extra <- lm(formula_extra, data_train)\n",
        "options(warn=-1)\n",
        "yhat.lm.extra <- predict(fit.lm.extra, newdata=data_test)\n",
        "MSE.lm.extra <- summary(lm((Y_test-yhat.lm.extra)^2~1))$coef[1:2]\n",
        "R2.lm.extra <- 1-MSE.lm.extra[1]/var(Y_test)\n",
        "cat(\"Extra flexible model R^2 (OLS): \",R2.lm.extra)"
      ],
      "metadata": {
        "id": "eheA1UPBsHfL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Penalized regressions (extra flexible model)\n",
        "\n",
        "Now let's repeat our penalized regression analysis for the extra flexible model. Note this block takes a while ~ 1 hour 15 minutes. To reduce time substantially, reduce the number of folds in LAVA."
      ],
      "metadata": {
        "id": "Scm5monOrJu5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# penalized regressions\n",
        "fit.lasso.cv.extra   <- cv.glmnet(model_X_extra_train, Y_train, family=\"gaussian\", alpha=1)\n",
        "fit.ridge.extra   <- cv.glmnet(model_X_extra_train, Y_train, family=\"gaussian\", alpha=0)\n",
        "fit.elnet.extra   <- cv.glmnet(model_X_extra_train, Y_train, family=\"gaussian\", alpha=.5)\n",
        "fit.rlasso.extra  <- rlasso(formula_extra, data_train, post=FALSE)\n",
        "fit.rlasso.post.extra <- rlasso(formula_extra, data_train, post=TRUE)\n",
        "fit.lava.extra <- lava_yhat_r2(model_X_extra_train, model_X_extra_test, Y_train, Y_test)\n",
        "\n",
        "yhat.lasso.cv.extra    <- predict(fit.lasso.cv.extra , newx = model_X_extra_test)\n",
        "yhat.ridge.extra    <- predict(fit.ridge.extra , newx = model_X_extra_test)\n",
        "yhat.elnet.extra    <- predict(fit.elnet.extra , newx = model_X_extra_test)\n",
        "yhat.rlasso.extra   <- predict(fit.rlasso.extra, newdata=data_test)\n",
        "yhat.rlasso.post.extra   <- predict(fit.rlasso.post.extra, newdata=data_test)\n",
        "yhat.lava.extra <- fit.lava.extra[[4]]\n",
        "\n",
        "MSE.lasso.cv.extra  <- summary(lm((Y_test-yhat.lasso.cv.extra )^2~1))$coef[1:2]\n",
        "MSE.ridge.extra  <- summary(lm((Y_test-yhat.ridge.extra )^2~1))$coef[1:2]\n",
        "MSE.elnet.extra  <- summary(lm((Y_test-yhat.elnet.extra )^2~1))$coef[1:2]\n",
        "MSE.lasso.extra <- summary(lm((Y_test-yhat.rlasso.extra)^2~1))$coef[1:2]\n",
        "MSE.lasso.post.extra <- summary(lm((Y_test-yhat.rlasso.post.extra)^2~1))$coef[1:2]\n",
        "MSE.lava.extra <- summary(lm(as.vector(Y_test-yhat.lava.extra)^2~1))$coef[1:2]\n",
        "\n",
        "R2.lasso.cv.extra  <- 1-MSE.lasso.cv.extra [1]/var(Y_test)\n",
        "R2.ridge.extra  <- 1-MSE.ridge.extra [1]/var(Y_test)\n",
        "R2.elnet.extra  <- 1-MSE.elnet.extra [1]/var(Y_test)\n",
        "R2.lasso.extra <- 1-MSE.lasso.extra[1]/var(Y_test)\n",
        "R2.lasso.post.extra <- 1-MSE.lasso.post.extra[1]/var(Y_test)\n",
        "R2.lava.extra <- 1-MSE.lava.extra[1]/var(Y_test) # R2.lava.extra <- fit.lava.extra[[6]]\n",
        "\n",
        "# R^2 (extra flexible)\n",
        "cat('\\nExtra flexible model R^2 (Lasso): ', R2.lasso.cv.extra)\n",
        "cat('\\nExtra flexible model R^2 (Ridge): ', R2.ridge.extra)\n",
        "cat('\\nExtra flexible model R^2 (Elastic Net): ', R2.elnet.extra)\n",
        "cat('\\nExtra flexible model R^2 (RLasso): ', R2.lasso.extra)\n",
        "cat('\\nExtra flexible model R^2 (RLasso post): ', R2.lasso.post.extra)\n",
        "cat('\\nExtra flexible model R^2 (LAVA): ', R2.lava.extra) #using CV_min"
      ],
      "metadata": {
        "id": "tOKoNLKFovrI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "<!-- As shown above, the overfitting effect is mitigated with the penalized regression model. -->"
      ],
      "metadata": {
        "id": "Btez-AI8yE7S"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.6.3"
    },
    "papermill": {
      "default_parameters": {},
      "duration": 90.376935,
      "end_time": "2021-02-13T18:21:10.266455",
      "environment_variables": {},
      "exception": null,
      "input_path": "__notebook__.ipynb",
      "output_path": "__notebook__.ipynb",
      "parameters": {},
      "start_time": "2021-02-13T18:19:39.889520",
      "version": "2.2.2"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
