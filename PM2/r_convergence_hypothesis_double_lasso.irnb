{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "ir",
      "display_name": "R"
    },
    "language_info": {
      "name": "R"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Testing the Convergence Hypothesis"
      ],
      "metadata": {
        "id": "79U65py1grzb"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GK-MMvLseA2Q"
      },
      "outputs": [],
      "source": [
        "install.packages(\"hdm\")\n",
        "install.packages(\"xtable\")\n",
        "install.packages(\"lmtest\")\n",
        "install.packages(\"sandwich\")\n",
        "install.packages(\"glmnet\")\n",
        "install.packages(\"ggplot2\")\n",
        "library(hdm)\n",
        "library(xtable)\n",
        "library(lmtest)\n",
        "library(sandwich)\n",
        "library(glmnet)  # For LassoCV\n",
        "library(ggplot2)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Introduction"
      ],
      "metadata": {
        "id": "nlpSLLV6g1pc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We provide an additional empirical example of partialling-out with Lasso to estimate the regression coefficient $\\beta_1$ in the high-dimensional linear regression model:\n",
        "  $$\n",
        "  Y = \\beta_1 D +  \\beta_2'W + \\epsilon.\n",
        "  $$\n",
        "  \n",
        "Specifically, we are interested in how the rates  at which economies of different countries grow ($Y$) are related to the initial wealth levels in each country ($D$) controlling for country's institutional, educational, and other similar characteristics ($W$).\n",
        "  \n",
        "The relationship is captured by $\\beta_1$, the *speed of convergence/divergence*, which measures the speed at which poor countries catch up $(\\beta_1< 0)$ or fall behind $(\\beta_1> 0)$ rich countries, after controlling for $W$. Our inference question here is: do poor countries grow faster than rich countries, controlling for educational and other characteristics? In other words, is the speed of convergence negative: $ \\beta_1 <0?$ This is the Convergence Hypothesis predicted by the Solow Growth Model. This is a structural economic model. Under some strong assumptions, that we won't state here, the predictive exercise we are doing here can be given causal interpretation.\n"
      ],
      "metadata": {
        "id": "xXkzGJWag02O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Analysis"
      ],
      "metadata": {
        "id": "a5Ul2ppLfUBQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "We consider the data set GrowthData which is included in the package *hdm*. First, let us load the data set to get familiar with the data."
      ],
      "metadata": {
        "id": "9GgPNICafYuK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "getdata <- function(...)\n",
        "{\n",
        "    e <- new.env()\n",
        "    name <- data(..., envir = e)[1]\n",
        "    e[[name]]\n",
        "}\n",
        "\n",
        "# now load your data calling getdata()\n",
        "growth <- getdata(GrowthData)"
      ],
      "metadata": {
        "id": "_B9DWuS6fcVW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The sample contains $90$ countries and $63$ controls."
      ],
      "metadata": {
        "id": "smYhqwpbffVh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "growth"
      ],
      "metadata": {
        "id": "1dsF7_R4j-Qv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Thus $p \\approx 60$, $n=90$ and $p/n$ is not small. We expect the least squares method to provide a poor estimate of $\\beta_1$.  We expect the method based on partialling-out with Lasso to provide a high quality estimate of $\\beta_1$.\n",
        "To check this hypothesis, we analyze the relation between the output variable $Y$ and the other country's characteristics by running a linear regression in the first step."
      ],
      "metadata": {
        "id": "-AMcbsgefhTg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## Create the outcome variable y and covariates X\n",
        "y <- growth$Outcome\n",
        "X <- growth[-which(colnames(growth) %in% c(\"intercept\"))]"
      ],
      "metadata": {
        "id": "DncWsRS9mgAp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fit <- lm(Outcome ~ ., data=X)\n",
        "est <- summary(nocontrol.fit)$coef[\"gdpsh465\",1]\n",
        "\n",
        "HCV.coefs <- vcovHC(fit, type = 'HC1'); # HC - \"heteroskedasticity cosistent\"\n",
        "se <- sqrt(diag(HCV.coefs))[2] # Estimated std errors\n",
        "\n",
        "# print unconditional effect of gdpsh465 and the corresponding standard error\n",
        "cat (\"The estimated coefficient on gdpsh465 is\",est,\" and the corresponding robust standard error is\",se)\n",
        "\n",
        "# Calculate the 95% confidence interval for 'gdpsh465'\n",
        "lower_ci <- est - 1.96 * se\n",
        "upper_ci <- est + 1.96 * se\n",
        "\n",
        "cat (\"95% Confidence Interval: [\", lower_ci, \",\", upper_ci, \"]\")"
      ],
      "metadata": {
        "id": "vPO08MjomqfZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Summarize OLS results"
      ],
      "metadata": {
        "id": "D7nJZzhGfjQT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create an empty data frame with column names\n",
        "table <- data.frame(\n",
        "   Method = character(0),\n",
        "   Estimate = character(0),\n",
        "  `Std. Error` = numeric(0),\n",
        "  `Lower Bound CI` = numeric(0),\n",
        "  `Upper Bound CI` = numeric(0)\n",
        ")\n",
        "\n",
        "# Add OLS results to the table\n",
        "table <- rbind(table, c(\"OLS\", est, se, lower_ci, upper_ci))\n",
        "\n",
        "# Rename the columns to match the Python table\n",
        "colnames(table) <- c(\"Method\", \"Estimate\", \"Std. Error\", \"lower bound CI\", \"upper bound CI\")\n",
        "\n",
        "# Print the table\n",
        "print(table)"
      ],
      "metadata": {
        "id": "EwGVcIVAfRe5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Least squares provides a rather noisy estimate (high standard error) of the\n",
        "speed of convergence, and does not allow us to answer the question\n",
        "about the convergence hypothesis since the confidence interval includes zero.\n",
        "\n",
        "In contrast, we can use the partialling-out approach based on lasso regression (\"Double Lasso\")."
      ],
      "metadata": {
        "id": "KfrhJqKhfwKB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y <- growth$Outcome\n",
        "W <- growth[-which(colnames(growth) %in% c('Outcome', 'intercept', 'gdpsh465'))]\n",
        "D <- growth$gdpsh465"
      ],
      "metadata": {
        "id": "D9Y2U1Ldf1eB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Method 1: Lasso with Theoretical Penalty using HDM"
      ],
      "metadata": {
        "id": "8yNU2UgefzCZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Given the small sample size (n=93) using cross validation can be very noisy and can choose solely due to randomness a very small penalty leading to overfitting and poor performance. For the use of cross validation it is advisable to have at least 500 samples. We report the results using cross validation at the end, were we observe overfitting for the prediction of the outcome."
      ],
      "metadata": {
        "id": "tQPxdzQ2f84M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "double_lasso <- function(y, D, W) {\n",
        "  # residualize outcome with Lasso\n",
        "  yfit.rlasso <- rlasso(W,y, post=FALSE)\n",
        "  yhat.rlasso <- predict(yfit.rlasso, as.data.frame(W))\n",
        "  yres <- y - as.numeric(yhat.rlasso)\n",
        "\n",
        "\n",
        "  # residualize treatment with Lasso\n",
        "  Dfit.rlasso <- rlasso(W,D, post=FALSE)\n",
        "  Dhat.rlasso <- predict(Dfit.rlasso, as.data.frame(W))\n",
        "  Dres <- D - as.numeric(Dhat.rlasso)\n",
        "\n",
        "  # rest is the same as in the OLS case\n",
        "  hat <- mean(yres * Dres) / mean(Dres^2)\n",
        "  epsilon <- yres - hat * Dres\n",
        "  V <- mean(epsilon^2 * Dres^2) / mean(Dres^2)^2\n",
        "  stderr = sqrt(V / length(y))\n",
        "\n",
        "  return(list(hat = hat, stderr = stderr))\n",
        "}"
      ],
      "metadata": {
        "id": "DIzy51tZsoWp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results <- double_lasso(y, D, W)\n",
        "hat <- results$hat\n",
        "stderr <- results$stderr\n",
        "# Calculate the 95% confidence interval\n",
        "ci_lower <- hat - 1.96 * stderr\n",
        "ci_upper <- hat + 1.96 * stderr"
      ],
      "metadata": {
        "id": "Ncz7Uqn5sqqU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The least square method provides a rather noisy estimate of the speed of convergence. We can not answer the question if poor countries grow faster than rich countries. The least square method does not work when the ratio $p/n$ is large.\n",
        "\n",
        "In sharp contrast, partialling-out via Lasso provides a more precise estimate. The Lasso based point estimate is $-5\\%$ and the $95\\%$ confidence interval for the (annual) rate of convergence $[-7.8\\%,-2.2\\%]$ only includes negative numbers. This empirical evidence does support the convergence hypothesis."
      ],
      "metadata": {
        "id": "P5PEjKw9gLvC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Add Double Lasso results to the table\n",
        "table <- rbind(table, c(\"Double Lasso\", hat, stderr, ci_lower, ci_upper))\n",
        "\n",
        "# Print the table\n",
        "print(table)"
      ],
      "metadata": {
        "id": "tNLVM4WEgL9v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Method 2: Lasso with Cross-Validation"
      ],
      "metadata": {
        "id": "smPkxqCpgMR8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose penalty based on KFold cross validation\n",
        "set.seed(123)\n",
        "# Given small sample size, we use an aggressive number of 20 folds\n",
        "n_folds <- 20\n",
        "\n",
        "\n",
        "# Define LassoCV models for y and D\n",
        "model_y <- cv.glmnet(\n",
        "  x = as.matrix(W),\n",
        "  y = y,\n",
        "  alpha = 1,  # Lasso penalty\n",
        "  nfolds = n_folds,\n",
        "  family = \"gaussian\"\n",
        ")\n",
        "\n",
        "model_D <- cv.glmnet(\n",
        "  x = as.matrix(W),\n",
        "  y = D,\n",
        "  alpha = 1,  # Lasso penalty\n",
        "  nfolds = n_folds,\n",
        "  family = \"gaussian\"\n",
        ")\n",
        "\n",
        "# Get the best lambda values for y and D\n",
        "best_lambda_y <- model_y$lambda.min\n",
        "best_lambda_D <- model_D$lambda.min\n",
        "\n",
        "# Fit Lasso models with the best lambda values\n",
        "lasso_model_y <- glmnet(as.matrix(W), y, alpha = 1, lambda = best_lambda_y)\n",
        "lasso_model_D <- glmnet(as.matrix(W), D, alpha = 1, lambda = best_lambda_D)\n",
        "\n",
        "# Calculate the residuals\n",
        "res_y <- y - predict(lasso_model_y, s = best_lambda_y, newx = as.matrix(W))\n",
        "res_D <- D - predict(lasso_model_D, s = best_lambda_D, newx = as.matrix(W))"
      ],
      "metadata": {
        "id": "YhpTUkE_wQz9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tmp_df = as.data.frame(cbind(res_y, res_D))\n",
        "colnames(tmp_df) = c(\"res_y\",\"res_D\")"
      ],
      "metadata": {
        "id": "cbVsr86tyqTY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "fit.cv <- lm(res_y ~ res_D, data = tmp_df)\n",
        "est.cv <- summary(fit.cv)$coef[\"res_D\",1]\n",
        "\n",
        "HCV.cv.coefs <- vcovHC(fit.cv, type = 'HC1'); # HC - \"heteroskedasticity cosistent\"\n",
        "se.cv <- sqrt(diag(HCV.cv.coefs))[2] # Estimated std errors\n",
        "\n",
        "# Calculate the 95% confidence interval for 'gdpsh465'\n",
        "lower_ci.cv <- est.cv - 1.96 * se.cv\n",
        "upper_ci.cv <- est.cv + 1.96 * se.cv"
      ],
      "metadata": {
        "id": "D7SzuZ2P0P0X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Add LassoCV results to the table\n",
        "table <- rbind(table, c(\"Double Lasso CV\", est.cv, se.cv, lower_ci.cv, upper_ci.cv))\n",
        "\n",
        "# Print the table\n",
        "print(table)"
      ],
      "metadata": {
        "id": "Ctl5T5vUygRk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We find that the outcome model chooses too small of a penalty based on cross-validation, leading to overfitting of the outcome and tiny outcome residuals. This leads to artificially small standard errors and a zero treatment effect. Theoretically driven penalty should be preferred for such small sample sizes."
      ],
      "metadata": {
        "id": "0LzDsUi8gmQM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a data frame to store the results\n",
        "results_y <- data.frame(\n",
        "  Alphas = model_y$lambda,\n",
        "  OutOfSampleR2 = 1 - model_y$cvm / var(y)\n",
        ")\n",
        "\n",
        "results_D <- data.frame(\n",
        "  Alphas = model_D$lambda,\n",
        "  OutOfSampleR2 = 1 - model_D$cvm / var(D)\n",
        ")\n",
        "\n",
        "# Plot Outcome Lasso-CV Model\n",
        "ggplot(data = results_y, aes(x = Alphas, y = OutOfSampleR2)) +\n",
        "  geom_line() +\n",
        "  labs(\n",
        "    title = \"Outcome Lasso-CV Model: Out-of-sample R-squared as function of penalty level\",\n",
        "    x = \"Penalty Level\",\n",
        "    y = \"Out-of-sample R-squared\"\n",
        "  )\n",
        "\n",
        "# Plot Treatment Lasso-CV Model\n",
        "ggplot(data = results_D, aes(x = (Alphas), y = OutOfSampleR2)) +\n",
        "  geom_line() +\n",
        "  labs(\n",
        "    title = \"Treatment Lasso-CV Model: Out-of-sample R-squared as function of penalty level\",\n",
        "    x = \"Penalty Level\",\n",
        "    y = \"Out-of-sample R-squared\"\n",
        "  )\n"
      ],
      "metadata": {
        "id": "7uzcIGhVgmei"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Mw8BaZ621Zvp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}